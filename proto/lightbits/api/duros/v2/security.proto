syntax = "proto3";

package lightbits.api.duros.v2;

option go_package = "duros/v2;v2";

import "lightbits/api/duros/v2/labels.proto";
import "grpc/gateway/protoc_gen_swagger/options/annotations.proto";


message TrustedHost {
    // name
    //
    // Unique name identifying the trusted host.
    string name = 1;
    // projectName
    //
    // Project this host belongs to.
    string projectName = 2;
    // UUID
    //
    // Unique identifier of the trusted host (internally generated by the Lightbits cluster).
    string UUID = 3;
    // hostNqn
    //
    // Host NQN (NVMe Qualified Name) of the trusted host.
    string hostNqn = 4;
    // labels
    //
    // Optional. Labels to associate with the trusted host.
    repeated Label labels = 5;
    // authRequired
    //
    // Optional. authRequired is set by default.
    string authRequired = 6;
}


message CreateTrustedHostRequest{
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
          required: ["name", "projectName", "hostNqn"]
        }
    };
    // name
    //
    // Unique name identifying the trusted host to create.
    string name = 1;
    // projectName
    //
    // Project this trusted host belongs to.
    string projectName = 2;
    // hostNqn
    //
    // Host NQN (NVMe Qualified Name) of the trusted host.
    string hostNqn = 3;
    // labels
    //
    // Optional. Labels to associate with the trusted host.
    repeated Label labels = 4;
    // authRequired
    //
    // Optional. authRequired is set by default.
    string authRequired = 5;
}

message DeleteTrustedHostRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
          required: ["name", "projectName"]
        }
    };
    // name
    //
    // Name of the trusted host to delete (required to identify resource to delete).
    string name = 1;
    // projectName
    //
    // Project this trusted host belongs to (required to identify resource to delete).
    string projectName = 2;
}

message DeleteTrustedHostResponse {
}

message GetTrustedHostRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
          required: ["name", "projectName"]
        }
    };
    // name
    //
    // Name of the trusted host to get (required to identify resource to get).
    string name = 1;
    //
    // Project this trusted host belongs to (required to identify resource to get).
    string projectName = 2;
}


message UpdateTrustedHostRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
          required: ["name", "projectName"]
        }
    };
    // name
    //
    // Name of the trusted host to update (required to identify resource to update).
    string name = 1;
    // projectName
    //
    // Project this trusted host belongs to (required to identify resource to update).
    string projectName = 2;
    // hostNqn
    //
    // Host NQN (NVMe Qualified Name) of the trusted host to update. Currently update of hostNqn is not supported.
    string hostNqn = 3;
    // labels
    //
    // Optional. Labels to associate with the trusted host.
    repeated Label labels = 4;
    // authRequired
    //
    // Optional. authRequired is set by default
    string authRequired = 5;
}


message ListTrustedHostsRequest {
    // projectName
    //
    // Optional. When specified returns only trusted hosts that belong to the specified project.
    string projectName = 1;
    // labels
    //
    // Optional. When specified returns only trusted hosts that have the provided labels. Not currently supported.
    repeated Label labels = 2;
    // offsetUUID
    //
    // Optional. When specified returns a list that starts a trusted host with a UUID equal to offsetUUID. Not currently supported.
    string offsetUUID = 3;
    // limit
    //
    // Optional. Limits the number of trusted hosts in the response. Not currently supported.
    int64 limit = 4;
}

message ListTrustedHostsResponse {
    // hosts
    //
    // List of trusted hosts.
    repeated TrustedHost hosts = 1;
    // nextOffset
    //
    // If the response contains more hosts than the limit, the nextOffset will be returned. Currently this is not supported.
    string nextOffset = 2;
}

enum TargetSecretType {
    // Disabled
    //
    // Disabled. The Lightbits cluster can connect to a trusted host without any secret.
    Disabled = 0;
    // Enabled
    //
    // Enabled. The Lightbits cluster must have a target secret specified to connect to a trusted host.
    Enabled = 1;
    // AutoGenSecret
    //
    // Auto generated secret. The Lightbits cluster will automatically generate a target secret and use this when connecting to the trusted host.
    AutoGenSecret = 2;
}


message SetTrustedHostSecretsRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
          required: ["name", "projectName", "hostSecret"]
        }
    };
    // name
    //
    // Name of the trusted host to set secrets for.
    string name = 1;
    // projectName
    //
    // Project name of the trusted host to set secrets for.
    string projectName = 2;
    // hostSecret
    //
    // A trusted host secret to allow trusted connection from a host to the NVMe target (Lightbits cluster).
    string hostSecret = 3;
    // targetSecret
    //
    // A target secret to allow a trusted connection from an NVMe target (Lightbits cluster) to a host.
    string targetSecret = 4;
    // targetSecretType
    //
    // Type of target secret to set Disabled (default)/ Enabled/ AutoGenSecret.
    TargetSecretType targetSecretType = 5;
}

message SetTrustedHostSecretsResponse {
}

message GetTrustedHostSecretsRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
          required: ["name", "projectName"]
        }
    };
    // name
    //
    // Name of the trusted host to get secrets for.
    string name = 1;
    // projectName
    //
    // Project name of the trusted host to get secrets for.
    string projectName = 2;
}


message GetTrustedHostSecretsResponse {
    // host
    //
    // Configuration of info for the trusted host.
    TrustedHost host = 1;
    // hostSecret
    //
    // A host secret to allow a trusted connection from a host to the NVMe target (Lightbits cluster).
    string hostSecret = 2;
    // targetSecret
    //
    // A target secret to allow a trusted connection from a NVMe target (Lightbits cluster) to a host.
    string targetSecret = 3;
    // targetSecretType
    //
    // Type of target secret to set Disabled (default)/ Enabled/ AutoGenSecret.
    TargetSecretType targetSecretType = 4;
}

message EnableClusterInBandAuthRequest {
    // subsystemNqnName
    //
    // Name of the subsystem NQN to enable In-Band Authentication for. If not specified, the cluster level will be assumed. Currently only supported for the default subsystem: DefaultSubSystem.
    string subsystemNqnName = 1;
}

message DisableClusterInBandAuthRequest {
    // subsystemNqnName
    //
    // Name of the subsystem NQN to disable In-Band Authentication for. If not specified, the cluster level will be assumed. Currently only supported for the default subsystem: DefaultSubSystem.
    string subsystemNqnName = 1;
}

message EnableClusterInBandAuthResponse{
}

message DisableClusterInBandAuthResponse {
}
