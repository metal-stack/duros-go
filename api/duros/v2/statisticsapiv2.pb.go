// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: lightbits/api/duros/v2/statisticsapiv2.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// /////////////////////////////////////
//
//	API structures (external facing)
//
// /////////////////////////////////////
type ClusterStatisticsApi struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Installed Physical Storage
	//
	// All installed SSDs capacities over all servers in cluster, given in bytes.
	InstalledPhysicalStorage uint64 `protobuf:"varint,1,opt,name=installedPhysicalStorage,proto3" json:"installedPhysicalStorage,omitempty"`
	// Total Attached Physical Storage
	//
	// Sum of all managed and healthy SSDs capacities, given in bytes.
	ManagedPhysicalStorage uint64 `protobuf:"varint,2,opt,name=managedPhysicalStorage,proto3" json:"managedPhysicalStorage,omitempty"`
	// Effective Physical Storage
	//
	// Effective Physical storage excluding overhead of OVP and Parity, given in bytes.
	EffectivePhysicalStorage uint64 `protobuf:"varint,3,opt,name=effectivePhysicalStorage,proto3" json:"effectivePhysicalStorage,omitempty"`
	// Logical Storage
	//
	// Sum of capacities of all allocated volumes, given in bytes.
	LogicalStorage uint64 `protobuf:"varint,4,opt,name=logicalStorage,proto3" json:"logicalStorage,omitempty"`
	// Logical Used Storage
	//
	// Logical storage space used by all volumes (n of LBAs x 4096), given in bytes.
	LogicalUsedStorage uint64 `protobuf:"varint,5,opt,name=logicalUsedStorage,proto3" json:"logicalUsedStorage,omitempty"`
	// Physical Used Storage Excluding Parity
	//
	// Physical storage space occupied by all volumes (data only), given in bytes.
	PhysicalUsedStorage uint64 `protobuf:"varint,6,opt,name=physicalUsedStorage,proto3" json:"physicalUsedStorage,omitempty"`
	// Physical Used Storage
	//
	// Physical storage space occupied by all data including Parity overhead when EC enabled (physical n*disks/(n*disks -1)), given in bytes.
	PhysicalUsedStorageIncludingParity uint64 `protobuf:"varint,7,opt,name=physicalUsedStorageIncludingParity,proto3" json:"physicalUsedStorageIncludingParity,omitempty"`
	// Free Physical Storage
	//
	// Free storage before entering to read-only mode , given in bytes.
	FreePhysicalStorage uint64 `protobuf:"varint,8,opt,name=freePhysicalStorage,proto3" json:"freePhysicalStorage,omitempty"`
	// Estimated Free Logical Storage
	//
	// Estimated free storage before entering to read-only mode assuming current compression ratio, given in bytes.
	EstimatedFreeLogicalStorage uint64 `protobuf:"varint,9,opt,name=estimatedFreeLogicalStorage,proto3" json:"estimatedFreeLogicalStorage,omitempty"`
	// Estimated Total Available Logical Storage
	//
	// Estimate of total available logical storage based on current compression ratio (effective * compression)
	EstimatedLogicalStorage uint64 `protobuf:"varint,10,opt,name=estimatedLogicalStorage,proto3" json:"estimatedLogicalStorage,omitempty"`
	// compression ratio
	//
	// compression ratio logicalUsedStorage/physicalUsedStorage
	CompressionRatio float64 `protobuf:"fixed64,11,opt,name=compressionRatio,proto3" json:"compressionRatio,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ClusterStatisticsApi) Reset() {
	*x = ClusterStatisticsApi{}
	mi := &file_lightbits_api_duros_v2_statisticsapiv2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterStatisticsApi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatisticsApi) ProtoMessage() {}

func (x *ClusterStatisticsApi) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_statisticsapiv2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStatisticsApi.ProtoReflect.Descriptor instead.
func (*ClusterStatisticsApi) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_statisticsapiv2_proto_rawDescGZIP(), []int{0}
}

func (x *ClusterStatisticsApi) GetInstalledPhysicalStorage() uint64 {
	if x != nil {
		return x.InstalledPhysicalStorage
	}
	return 0
}

func (x *ClusterStatisticsApi) GetManagedPhysicalStorage() uint64 {
	if x != nil {
		return x.ManagedPhysicalStorage
	}
	return 0
}

func (x *ClusterStatisticsApi) GetEffectivePhysicalStorage() uint64 {
	if x != nil {
		return x.EffectivePhysicalStorage
	}
	return 0
}

func (x *ClusterStatisticsApi) GetLogicalStorage() uint64 {
	if x != nil {
		return x.LogicalStorage
	}
	return 0
}

func (x *ClusterStatisticsApi) GetLogicalUsedStorage() uint64 {
	if x != nil {
		return x.LogicalUsedStorage
	}
	return 0
}

func (x *ClusterStatisticsApi) GetPhysicalUsedStorage() uint64 {
	if x != nil {
		return x.PhysicalUsedStorage
	}
	return 0
}

func (x *ClusterStatisticsApi) GetPhysicalUsedStorageIncludingParity() uint64 {
	if x != nil {
		return x.PhysicalUsedStorageIncludingParity
	}
	return 0
}

func (x *ClusterStatisticsApi) GetFreePhysicalStorage() uint64 {
	if x != nil {
		return x.FreePhysicalStorage
	}
	return 0
}

func (x *ClusterStatisticsApi) GetEstimatedFreeLogicalStorage() uint64 {
	if x != nil {
		return x.EstimatedFreeLogicalStorage
	}
	return 0
}

func (x *ClusterStatisticsApi) GetEstimatedLogicalStorage() uint64 {
	if x != nil {
		return x.EstimatedLogicalStorage
	}
	return 0
}

func (x *ClusterStatisticsApi) GetCompressionRatio() float64 {
	if x != nil {
		return x.CompressionRatio
	}
	return 0
}

type NodeStatisticsApi struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total Attached Physical Total Storage
	//
	// Sum of all managed and healthy SSDs capacities, given in bytes.
	ManagedPhysicalStorage uint64 `protobuf:"varint,1,opt,name=managedPhysicalStorage,proto3" json:"managedPhysicalStorage,omitempty"`
	// Effective Physical Storage
	//
	// Effective Physical storage excluding overhead of OVP and Parity, given in bytes.
	EffectivePhysicalStorage uint64 `protobuf:"varint,2,opt,name=effectivePhysicalStorage,proto3" json:"effectivePhysicalStorage,omitempty"`
	// Logical Storage
	//
	// Sum of capacities of all allocated volumes, given in bytes.
	LogicalStorage uint64 `protobuf:"varint,3,opt,name=logicalStorage,proto3" json:"logicalStorage,omitempty"`
	// Logical Used Storage
	//
	// Logical storage space used by all volumes (n of LBAs x 4096), given in bytes.
	LogicalUsedStorage uint64 `protobuf:"varint,4,opt,name=logicalUsedStorage,proto3" json:"logicalUsedStorage,omitempty"`
	// Physical Used Storage Excluding Parity
	//
	// Physical storage space occupied by all volumes (data only), given in bytes.
	PhysicalUsedStorage uint64 `protobuf:"varint,5,opt,name=physicalUsedStorage,proto3" json:"physicalUsedStorage,omitempty"`
	// Physical Used Storage
	//
	// Physical storage space occupied by all data including Parity overhead when EC enabled (physical n*disks/(n*disks -1)), given in bytes.
	PhysicalUsedStorageIncludingParity uint64 `protobuf:"varint,6,opt,name=physicalUsedStorageIncludingParity,proto3" json:"physicalUsedStorageIncludingParity,omitempty"`
	// Free Physical Storage
	//
	// Free storage before entering to read-only mode, given in bytes.
	FreePhysicalStorage uint64 `protobuf:"varint,7,opt,name=freePhysicalStorage,proto3" json:"freePhysicalStorage,omitempty"`
	// Estimated Free Logical Storage
	//
	// Estimated free storage before entering to read-only mode assuming current compression ratio, given in bytes.
	EstimatedFreeLogicalStorage uint64 `protobuf:"varint,8,opt,name=estimatedFreeLogicalStorage,proto3" json:"estimatedFreeLogicalStorage,omitempty"`
	// Estimated Total Available Logical Storage
	//
	// Estimate of total available logical storage based on current compression ratio (effective * compression)
	EstimatedLogicalStorage uint64 `protobuf:"varint,9,opt,name=estimatedLogicalStorage,proto3" json:"estimatedLogicalStorage,omitempty"`
	// compression ratio
	//
	// compression ratio logicalUsedStorage/physicalUsedStorage
	CompressionRatio float64 `protobuf:"fixed64,10,opt,name=compressionRatio,proto3" json:"compressionRatio,omitempty"`
	// Unrecoverable Data Integrity Errors
	//
	// Number of data integrity errors that could no be recovered by the system.
	UnrecoverableDataIntegrityErrors uint32 `protobuf:"varint,11,opt,name=UnrecoverableDataIntegrityErrors,proto3" json:"UnrecoverableDataIntegrityErrors,omitempty"`
	// Recoverable Data Integrity Errors
	//
	// Number of data integrity errors that were recovered by the system.
	RecoverableDataIntegrityErrors uint32 `protobuf:"varint,12,opt,name=RecoverableDataIntegrityErrors,proto3" json:"RecoverableDataIntegrityErrors,omitempty"`
	// Garbage Collector Data Integrity Errors
	//
	// Number of data integrity errors that were detected by the GC.
	GarbageCollectorDataIntegrityErrors uint64 `protobuf:"varint,13,opt,name=GarbageCollectorDataIntegrityErrors,proto3" json:"GarbageCollectorDataIntegrityErrors,omitempty"`
	// Metadata utilization
	//
	// Metadata RAM utilization, shown as: used/available
	MetadataUtilization float64 `protobuf:"fixed64,14,opt,name=metadataUtilization,proto3" json:"metadataUtilization,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NodeStatisticsApi) Reset() {
	*x = NodeStatisticsApi{}
	mi := &file_lightbits_api_duros_v2_statisticsapiv2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeStatisticsApi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatisticsApi) ProtoMessage() {}

func (x *NodeStatisticsApi) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_statisticsapiv2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatisticsApi.ProtoReflect.Descriptor instead.
func (*NodeStatisticsApi) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_statisticsapiv2_proto_rawDescGZIP(), []int{1}
}

func (x *NodeStatisticsApi) GetManagedPhysicalStorage() uint64 {
	if x != nil {
		return x.ManagedPhysicalStorage
	}
	return 0
}

func (x *NodeStatisticsApi) GetEffectivePhysicalStorage() uint64 {
	if x != nil {
		return x.EffectivePhysicalStorage
	}
	return 0
}

func (x *NodeStatisticsApi) GetLogicalStorage() uint64 {
	if x != nil {
		return x.LogicalStorage
	}
	return 0
}

func (x *NodeStatisticsApi) GetLogicalUsedStorage() uint64 {
	if x != nil {
		return x.LogicalUsedStorage
	}
	return 0
}

func (x *NodeStatisticsApi) GetPhysicalUsedStorage() uint64 {
	if x != nil {
		return x.PhysicalUsedStorage
	}
	return 0
}

func (x *NodeStatisticsApi) GetPhysicalUsedStorageIncludingParity() uint64 {
	if x != nil {
		return x.PhysicalUsedStorageIncludingParity
	}
	return 0
}

func (x *NodeStatisticsApi) GetFreePhysicalStorage() uint64 {
	if x != nil {
		return x.FreePhysicalStorage
	}
	return 0
}

func (x *NodeStatisticsApi) GetEstimatedFreeLogicalStorage() uint64 {
	if x != nil {
		return x.EstimatedFreeLogicalStorage
	}
	return 0
}

func (x *NodeStatisticsApi) GetEstimatedLogicalStorage() uint64 {
	if x != nil {
		return x.EstimatedLogicalStorage
	}
	return 0
}

func (x *NodeStatisticsApi) GetCompressionRatio() float64 {
	if x != nil {
		return x.CompressionRatio
	}
	return 0
}

func (x *NodeStatisticsApi) GetUnrecoverableDataIntegrityErrors() uint32 {
	if x != nil {
		return x.UnrecoverableDataIntegrityErrors
	}
	return 0
}

func (x *NodeStatisticsApi) GetRecoverableDataIntegrityErrors() uint32 {
	if x != nil {
		return x.RecoverableDataIntegrityErrors
	}
	return 0
}

func (x *NodeStatisticsApi) GetGarbageCollectorDataIntegrityErrors() uint64 {
	if x != nil {
		return x.GarbageCollectorDataIntegrityErrors
	}
	return 0
}

func (x *NodeStatisticsApi) GetMetadataUtilization() float64 {
	if x != nil {
		return x.MetadataUtilization
	}
	return 0
}

type VolumeStatisticsApi struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Logical Used Storage
	//
	// Logical storage space used by volume, given in bytes.
	LogicalUsedStorage uint64 `protobuf:"varint,1,opt,name=logicalUsedStorage,proto3" json:"logicalUsedStorage,omitempty"`
	// Physical Used Storage
	//
	// Physical storage space used by volume excluding parity, given in bytes.
	PhysicalUsedStorage uint64 `protobuf:"varint,2,opt,name=physicalUsedStorage,proto3" json:"physicalUsedStorage,omitempty"`
	// compression ratio
	//
	// compression ratio userWritten/physicalCapacity
	CompressionRatio float64 `protobuf:"fixed64,3,opt,name=compressionRatio,proto3" json:"compressionRatio,omitempty"`
	// total compression ratio
	//
	// compression ratio sum(userWritten) / sum(physical capacity)
	TotalCompressionRatio float64 `protobuf:"fixed64,4,opt,name=totalCompressionRatio,proto3" json:"totalCompressionRatio,omitempty"` //need to decide on a name
	// PhysicalCapacity
	//
	// The physical capacity that exists in this volume layer
	PhysicalCapacity uint64 `protobuf:"varint,5,opt,name=physicalCapacity,proto3" json:"physicalCapacity,omitempty"`
	// Physical Owned storage Capacity
	//
	// The capacity that would be freed when volume is deleted
	PhysicalOwnedCapacity uint64 `protobuf:"varint,6,opt,name=physicalOwnedCapacity,proto3" json:"physicalOwnedCapacity,omitempty"`
	PhysicalOwnedMemory   uint64 `protobuf:"varint,7,opt,name=physicalOwnedMemory,proto3" json:"physicalOwnedMemory,omitempty"`
	PhysicalMemory        uint64 `protobuf:"varint,8,opt,name=physicalMemory,proto3" json:"physicalMemory,omitempty"`
	UserWritten           uint64 `protobuf:"varint,9,opt,name=userWritten,proto3" json:"userWritten,omitempty"`
	// Unrecoverable Data Integrity Errors
	//
	// Number of data integrity errors that could no be recovered by the system.
	UnrecoverableDataIntegrityErrors uint32 `protobuf:"varint,10,opt,name=unrecoverableDataIntegrityErrors,proto3" json:"unrecoverableDataIntegrityErrors,omitempty"`
	// Recoverable Data Integrity Errors
	//
	// Number of data integrity errors that were recovered by the system.
	RecoverableDataIntegrityErrors uint32 `protobuf:"varint,11,opt,name=recoverableDataIntegrityErrors,proto3" json:"recoverableDataIntegrityErrors,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *VolumeStatisticsApi) Reset() {
	*x = VolumeStatisticsApi{}
	mi := &file_lightbits_api_duros_v2_statisticsapiv2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeStatisticsApi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeStatisticsApi) ProtoMessage() {}

func (x *VolumeStatisticsApi) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_statisticsapiv2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeStatisticsApi.ProtoReflect.Descriptor instead.
func (*VolumeStatisticsApi) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_statisticsapiv2_proto_rawDescGZIP(), []int{2}
}

func (x *VolumeStatisticsApi) GetLogicalUsedStorage() uint64 {
	if x != nil {
		return x.LogicalUsedStorage
	}
	return 0
}

func (x *VolumeStatisticsApi) GetPhysicalUsedStorage() uint64 {
	if x != nil {
		return x.PhysicalUsedStorage
	}
	return 0
}

func (x *VolumeStatisticsApi) GetCompressionRatio() float64 {
	if x != nil {
		return x.CompressionRatio
	}
	return 0
}

func (x *VolumeStatisticsApi) GetTotalCompressionRatio() float64 {
	if x != nil {
		return x.TotalCompressionRatio
	}
	return 0
}

func (x *VolumeStatisticsApi) GetPhysicalCapacity() uint64 {
	if x != nil {
		return x.PhysicalCapacity
	}
	return 0
}

func (x *VolumeStatisticsApi) GetPhysicalOwnedCapacity() uint64 {
	if x != nil {
		return x.PhysicalOwnedCapacity
	}
	return 0
}

func (x *VolumeStatisticsApi) GetPhysicalOwnedMemory() uint64 {
	if x != nil {
		return x.PhysicalOwnedMemory
	}
	return 0
}

func (x *VolumeStatisticsApi) GetPhysicalMemory() uint64 {
	if x != nil {
		return x.PhysicalMemory
	}
	return 0
}

func (x *VolumeStatisticsApi) GetUserWritten() uint64 {
	if x != nil {
		return x.UserWritten
	}
	return 0
}

func (x *VolumeStatisticsApi) GetUnrecoverableDataIntegrityErrors() uint32 {
	if x != nil {
		return x.UnrecoverableDataIntegrityErrors
	}
	return 0
}

func (x *VolumeStatisticsApi) GetRecoverableDataIntegrityErrors() uint32 {
	if x != nil {
		return x.RecoverableDataIntegrityErrors
	}
	return 0
}

type SnapshotStatisticsApi struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PhysicalCapacity
	//
	// The physical capacity that exists in this volume layer
	PhysicalCapacity uint64 `protobuf:"varint,1,opt,name=physicalCapacity,proto3" json:"physicalCapacity,omitempty"`
	// Physical Owned storage Capacity
	//
	// The capacity that would be freed when snapshot would be deleted
	PhysicalOwnedCapacity uint64 `protobuf:"varint,2,opt,name=physicalOwnedCapacity,proto3" json:"physicalOwnedCapacity,omitempty"`
	// Physical Owned Memory
	//
	// The number, in bytes, of md ranges multiplied by the size of md range
	PhysicalOwnedMemory uint64 `protobuf:"varint,3,opt,name=physicalOwnedMemory,proto3" json:"physicalOwnedMemory,omitempty"`
	// Physical Memory
	//
	// Memory used by this MSVV (how many chunks)
	PhysicalMemory uint64 `protobuf:"varint,4,opt,name=physicalMemory,proto3" json:"physicalMemory,omitempty"`
	// User Written
	//
	// Amount, in bytes of data requested to be written by the user
	UserWritten   uint64 `protobuf:"varint,5,opt,name=userWritten,proto3" json:"userWritten,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnapshotStatisticsApi) Reset() {
	*x = SnapshotStatisticsApi{}
	mi := &file_lightbits_api_duros_v2_statisticsapiv2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotStatisticsApi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotStatisticsApi) ProtoMessage() {}

func (x *SnapshotStatisticsApi) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_statisticsapiv2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotStatisticsApi.ProtoReflect.Descriptor instead.
func (*SnapshotStatisticsApi) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_statisticsapiv2_proto_rawDescGZIP(), []int{3}
}

func (x *SnapshotStatisticsApi) GetPhysicalCapacity() uint64 {
	if x != nil {
		return x.PhysicalCapacity
	}
	return 0
}

func (x *SnapshotStatisticsApi) GetPhysicalOwnedCapacity() uint64 {
	if x != nil {
		return x.PhysicalOwnedCapacity
	}
	return 0
}

func (x *SnapshotStatisticsApi) GetPhysicalOwnedMemory() uint64 {
	if x != nil {
		return x.PhysicalOwnedMemory
	}
	return 0
}

func (x *SnapshotStatisticsApi) GetPhysicalMemory() uint64 {
	if x != nil {
		return x.PhysicalMemory
	}
	return 0
}

func (x *SnapshotStatisticsApi) GetUserWritten() uint64 {
	if x != nil {
		return x.UserWritten
	}
	return 0
}

type NvmeDeviceStatisticsApi struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unrecoverable Data Integrity Errors
	//
	// Number of data integrity errors that could no be recovered by the system.
	UnrecoverableDataIntegrityErrors uint32 `protobuf:"varint,1,opt,name=UnrecoverableDataIntegrityErrors,proto3" json:"UnrecoverableDataIntegrityErrors,omitempty"`
	// Recoverable Data Integrity Errors
	//
	// Number of data integrity errors that were recovered by the system.
	RecoverableDataIntegrityErrors uint32 `protobuf:"varint,2,opt,name=RecoverableDataIntegrityErrors,proto3" json:"RecoverableDataIntegrityErrors,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *NvmeDeviceStatisticsApi) Reset() {
	*x = NvmeDeviceStatisticsApi{}
	mi := &file_lightbits_api_duros_v2_statisticsapiv2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NvmeDeviceStatisticsApi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvmeDeviceStatisticsApi) ProtoMessage() {}

func (x *NvmeDeviceStatisticsApi) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_statisticsapiv2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvmeDeviceStatisticsApi.ProtoReflect.Descriptor instead.
func (*NvmeDeviceStatisticsApi) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_statisticsapiv2_proto_rawDescGZIP(), []int{4}
}

func (x *NvmeDeviceStatisticsApi) GetUnrecoverableDataIntegrityErrors() uint32 {
	if x != nil {
		return x.UnrecoverableDataIntegrityErrors
	}
	return 0
}

func (x *NvmeDeviceStatisticsApi) GetRecoverableDataIntegrityErrors() uint32 {
	if x != nil {
		return x.RecoverableDataIntegrityErrors
	}
	return 0
}

var File_lightbits_api_duros_v2_statisticsapiv2_proto protoreflect.FileDescriptor

const file_lightbits_api_duros_v2_statisticsapiv2_proto_rawDesc = "" +
	"\n" +
	",lightbits/api/duros/v2/statisticsapiv2.proto\x12\x16lightbits.api.duros.v2\"\xfa\x04\n" +
	"\x14ClusterStatisticsApi\x12:\n" +
	"\x18installedPhysicalStorage\x18\x01 \x01(\x04R\x18installedPhysicalStorage\x126\n" +
	"\x16managedPhysicalStorage\x18\x02 \x01(\x04R\x16managedPhysicalStorage\x12:\n" +
	"\x18effectivePhysicalStorage\x18\x03 \x01(\x04R\x18effectivePhysicalStorage\x12&\n" +
	"\x0elogicalStorage\x18\x04 \x01(\x04R\x0elogicalStorage\x12.\n" +
	"\x12logicalUsedStorage\x18\x05 \x01(\x04R\x12logicalUsedStorage\x120\n" +
	"\x13physicalUsedStorage\x18\x06 \x01(\x04R\x13physicalUsedStorage\x12N\n" +
	"\"physicalUsedStorageIncludingParity\x18\a \x01(\x04R\"physicalUsedStorageIncludingParity\x120\n" +
	"\x13freePhysicalStorage\x18\b \x01(\x04R\x13freePhysicalStorage\x12@\n" +
	"\x1bestimatedFreeLogicalStorage\x18\t \x01(\x04R\x1bestimatedFreeLogicalStorage\x128\n" +
	"\x17estimatedLogicalStorage\x18\n" +
	" \x01(\x04R\x17estimatedLogicalStorage\x12*\n" +
	"\x10compressionRatio\x18\v \x01(\x01R\x10compressionRatio\"\xd3\x06\n" +
	"\x11NodeStatisticsApi\x126\n" +
	"\x16managedPhysicalStorage\x18\x01 \x01(\x04R\x16managedPhysicalStorage\x12:\n" +
	"\x18effectivePhysicalStorage\x18\x02 \x01(\x04R\x18effectivePhysicalStorage\x12&\n" +
	"\x0elogicalStorage\x18\x03 \x01(\x04R\x0elogicalStorage\x12.\n" +
	"\x12logicalUsedStorage\x18\x04 \x01(\x04R\x12logicalUsedStorage\x120\n" +
	"\x13physicalUsedStorage\x18\x05 \x01(\x04R\x13physicalUsedStorage\x12N\n" +
	"\"physicalUsedStorageIncludingParity\x18\x06 \x01(\x04R\"physicalUsedStorageIncludingParity\x120\n" +
	"\x13freePhysicalStorage\x18\a \x01(\x04R\x13freePhysicalStorage\x12@\n" +
	"\x1bestimatedFreeLogicalStorage\x18\b \x01(\x04R\x1bestimatedFreeLogicalStorage\x128\n" +
	"\x17estimatedLogicalStorage\x18\t \x01(\x04R\x17estimatedLogicalStorage\x12*\n" +
	"\x10compressionRatio\x18\n" +
	" \x01(\x01R\x10compressionRatio\x12J\n" +
	" UnrecoverableDataIntegrityErrors\x18\v \x01(\rR UnrecoverableDataIntegrityErrors\x12F\n" +
	"\x1eRecoverableDataIntegrityErrors\x18\f \x01(\rR\x1eRecoverableDataIntegrityErrors\x12P\n" +
	"#GarbageCollectorDataIntegrityErrors\x18\r \x01(\x04R#GarbageCollectorDataIntegrityErrors\x120\n" +
	"\x13metadataUtilization\x18\x0e \x01(\x01R\x13metadataUtilization\"\xcb\x04\n" +
	"\x13VolumeStatisticsApi\x12.\n" +
	"\x12logicalUsedStorage\x18\x01 \x01(\x04R\x12logicalUsedStorage\x120\n" +
	"\x13physicalUsedStorage\x18\x02 \x01(\x04R\x13physicalUsedStorage\x12*\n" +
	"\x10compressionRatio\x18\x03 \x01(\x01R\x10compressionRatio\x124\n" +
	"\x15totalCompressionRatio\x18\x04 \x01(\x01R\x15totalCompressionRatio\x12*\n" +
	"\x10physicalCapacity\x18\x05 \x01(\x04R\x10physicalCapacity\x124\n" +
	"\x15physicalOwnedCapacity\x18\x06 \x01(\x04R\x15physicalOwnedCapacity\x120\n" +
	"\x13physicalOwnedMemory\x18\a \x01(\x04R\x13physicalOwnedMemory\x12&\n" +
	"\x0ephysicalMemory\x18\b \x01(\x04R\x0ephysicalMemory\x12 \n" +
	"\vuserWritten\x18\t \x01(\x04R\vuserWritten\x12J\n" +
	" unrecoverableDataIntegrityErrors\x18\n" +
	" \x01(\rR unrecoverableDataIntegrityErrors\x12F\n" +
	"\x1erecoverableDataIntegrityErrors\x18\v \x01(\rR\x1erecoverableDataIntegrityErrors\"\xf5\x01\n" +
	"\x15SnapshotStatisticsApi\x12*\n" +
	"\x10physicalCapacity\x18\x01 \x01(\x04R\x10physicalCapacity\x124\n" +
	"\x15physicalOwnedCapacity\x18\x02 \x01(\x04R\x15physicalOwnedCapacity\x120\n" +
	"\x13physicalOwnedMemory\x18\x03 \x01(\x04R\x13physicalOwnedMemory\x12&\n" +
	"\x0ephysicalMemory\x18\x04 \x01(\x04R\x0ephysicalMemory\x12 \n" +
	"\vuserWritten\x18\x05 \x01(\x04R\vuserWritten\"\xad\x01\n" +
	"\x17NvmeDeviceStatisticsApi\x12J\n" +
	" UnrecoverableDataIntegrityErrors\x18\x01 \x01(\rR UnrecoverableDataIntegrityErrors\x12F\n" +
	"\x1eRecoverableDataIntegrityErrors\x18\x02 \x01(\rR\x1eRecoverableDataIntegrityErrorsB\rZ\vduros/v2;v2b\x06proto3"

var (
	file_lightbits_api_duros_v2_statisticsapiv2_proto_rawDescOnce sync.Once
	file_lightbits_api_duros_v2_statisticsapiv2_proto_rawDescData []byte
)

func file_lightbits_api_duros_v2_statisticsapiv2_proto_rawDescGZIP() []byte {
	file_lightbits_api_duros_v2_statisticsapiv2_proto_rawDescOnce.Do(func() {
		file_lightbits_api_duros_v2_statisticsapiv2_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_lightbits_api_duros_v2_statisticsapiv2_proto_rawDesc), len(file_lightbits_api_duros_v2_statisticsapiv2_proto_rawDesc)))
	})
	return file_lightbits_api_duros_v2_statisticsapiv2_proto_rawDescData
}

var file_lightbits_api_duros_v2_statisticsapiv2_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_lightbits_api_duros_v2_statisticsapiv2_proto_goTypes = []any{
	(*ClusterStatisticsApi)(nil),    // 0: lightbits.api.duros.v2.ClusterStatisticsApi
	(*NodeStatisticsApi)(nil),       // 1: lightbits.api.duros.v2.NodeStatisticsApi
	(*VolumeStatisticsApi)(nil),     // 2: lightbits.api.duros.v2.VolumeStatisticsApi
	(*SnapshotStatisticsApi)(nil),   // 3: lightbits.api.duros.v2.SnapshotStatisticsApi
	(*NvmeDeviceStatisticsApi)(nil), // 4: lightbits.api.duros.v2.NvmeDeviceStatisticsApi
}
var file_lightbits_api_duros_v2_statisticsapiv2_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_lightbits_api_duros_v2_statisticsapiv2_proto_init() }
func file_lightbits_api_duros_v2_statisticsapiv2_proto_init() {
	if File_lightbits_api_duros_v2_statisticsapiv2_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_lightbits_api_duros_v2_statisticsapiv2_proto_rawDesc), len(file_lightbits_api_duros_v2_statisticsapiv2_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lightbits_api_duros_v2_statisticsapiv2_proto_goTypes,
		DependencyIndexes: file_lightbits_api_duros_v2_statisticsapiv2_proto_depIdxs,
		MessageInfos:      file_lightbits_api_duros_v2_statisticsapiv2_proto_msgTypes,
	}.Build()
	File_lightbits_api_duros_v2_statisticsapiv2_proto = out.File
	file_lightbits_api_duros_v2_statisticsapiv2_proto_goTypes = nil
	file_lightbits_api_duros_v2_statisticsapiv2_proto_depIdxs = nil
}
