// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: lightbits/api/duros/v2/durosapiv2.proto

package v2

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DurosAPI_GetVersion_FullMethodName                     = "/lightbits.api.duros.v2.DurosAPI/GetVersion"
	DurosAPI_CreateVolume_FullMethodName                   = "/lightbits.api.duros.v2.DurosAPI/CreateVolume"
	DurosAPI_DeleteVolume_FullMethodName                   = "/lightbits.api.duros.v2.DurosAPI/DeleteVolume"
	DurosAPI_ListVolumes_FullMethodName                    = "/lightbits.api.duros.v2.DurosAPI/ListVolumes"
	DurosAPI_ListEvents_FullMethodName                     = "/lightbits.api.duros.v2.DurosAPI/ListEvents"
	DurosAPI_GetHost_FullMethodName                        = "/lightbits.api.duros.v2.DurosAPI/GetHost"
	DurosAPI_ListHosts_FullMethodName                      = "/lightbits.api.duros.v2.DurosAPI/ListHosts"
	DurosAPI_GetVolume_FullMethodName                      = "/lightbits.api.duros.v2.DurosAPI/GetVolume"
	DurosAPI_ListNodes_FullMethodName                      = "/lightbits.api.duros.v2.DurosAPI/ListNodes"
	DurosAPI_GetNode_FullMethodName                        = "/lightbits.api.duros.v2.DurosAPI/GetNode"
	DurosAPI_ListNvmeDevices_FullMethodName                = "/lightbits.api.duros.v2.DurosAPI/ListNvmeDevices"
	DurosAPI_GetNvmeDevice_FullMethodName                  = "/lightbits.api.duros.v2.DurosAPI/GetNvmeDevice"
	DurosAPI_FetchLogs_FullMethodName                      = "/lightbits.api.duros.v2.DurosAPI/FetchLogs"
	DurosAPI_GetCluster_FullMethodName                     = "/lightbits.api.duros.v2.DurosAPI/GetCluster"
	DurosAPI_GetClusterInfo_FullMethodName                 = "/lightbits.api.duros.v2.DurosAPI/GetClusterInfo"
	DurosAPI_UpdateNvmeDevice_FullMethodName               = "/lightbits.api.duros.v2.DurosAPI/UpdateNvmeDevice"
	DurosAPI_AddNvmeDevice_FullMethodName                  = "/lightbits.api.duros.v2.DurosAPI/AddNvmeDevice"
	DurosAPI_UpdateVolume_FullMethodName                   = "/lightbits.api.duros.v2.DurosAPI/UpdateVolume"
	DurosAPI_GetServer_FullMethodName                      = "/lightbits.api.duros.v2.DurosAPI/GetServer"
	DurosAPI_ListServers_FullMethodName                    = "/lightbits.api.duros.v2.DurosAPI/ListServers"
	DurosAPI_UpgradeServer_FullMethodName                  = "/lightbits.api.duros.v2.DurosAPI/UpgradeServer"
	DurosAPI_UpgradeCluster_FullMethodName                 = "/lightbits.api.duros.v2.DurosAPI/UpgradeCluster"
	DurosAPI_EnableClusterEncryption_FullMethodName        = "/lightbits.api.duros.v2.DurosAPI/EnableClusterEncryption"
	DurosAPI_CreateServer_FullMethodName                   = "/lightbits.api.duros.v2.DurosAPI/CreateServer"
	DurosAPI_ReplaceNode_FullMethodName                    = "/lightbits.api.duros.v2.DurosAPI/ReplaceNode"
	DurosAPI_DeleteServer_FullMethodName                   = "/lightbits.api.duros.v2.DurosAPI/DeleteServer"
	DurosAPI_EnableServer_FullMethodName                   = "/lightbits.api.duros.v2.DurosAPI/EnableServer"
	DurosAPI_DisableServer_FullMethodName                  = "/lightbits.api.duros.v2.DurosAPI/DisableServer"
	DurosAPI_CreateProject_FullMethodName                  = "/lightbits.api.duros.v2.DurosAPI/CreateProject"
	DurosAPI_UpdateProject_FullMethodName                  = "/lightbits.api.duros.v2.DurosAPI/UpdateProject"
	DurosAPI_DeleteProject_FullMethodName                  = "/lightbits.api.duros.v2.DurosAPI/DeleteProject"
	DurosAPI_ListProjects_FullMethodName                   = "/lightbits.api.duros.v2.DurosAPI/ListProjects"
	DurosAPI_GetProject_FullMethodName                     = "/lightbits.api.duros.v2.DurosAPI/GetProject"
	DurosAPI_CreateCredential_FullMethodName               = "/lightbits.api.duros.v2.DurosAPI/CreateCredential"
	DurosAPI_DeleteCredential_FullMethodName               = "/lightbits.api.duros.v2.DurosAPI/DeleteCredential"
	DurosAPI_ListCredentials_FullMethodName                = "/lightbits.api.duros.v2.DurosAPI/ListCredentials"
	DurosAPI_GetCredential_FullMethodName                  = "/lightbits.api.duros.v2.DurosAPI/GetCredential"
	DurosAPI_GetRole_FullMethodName                        = "/lightbits.api.duros.v2.DurosAPI/GetRole"
	DurosAPI_ListRoles_FullMethodName                      = "/lightbits.api.duros.v2.DurosAPI/ListRoles"
	DurosAPI_CreateAdminEndpoint_FullMethodName            = "/lightbits.api.duros.v2.DurosAPI/CreateAdminEndpoint"
	DurosAPI_DeleteAdminEndpoint_FullMethodName            = "/lightbits.api.duros.v2.DurosAPI/DeleteAdminEndpoint"
	DurosAPI_ListAdminEndpoints_FullMethodName             = "/lightbits.api.duros.v2.DurosAPI/ListAdminEndpoints"
	DurosAPI_UpdateAdminEndpoint_FullMethodName            = "/lightbits.api.duros.v2.DurosAPI/UpdateAdminEndpoint"
	DurosAPI_GetAdminEndpoint_FullMethodName               = "/lightbits.api.duros.v2.DurosAPI/GetAdminEndpoint"
	DurosAPI_CreateResourcePolicy_FullMethodName           = "/lightbits.api.duros.v2.DurosAPI/CreateResourcePolicy"
	DurosAPI_CreatePolicy_FullMethodName                   = "/lightbits.api.duros.v2.DurosAPI/CreatePolicy"
	DurosAPI_UpdatePolicy_FullMethodName                   = "/lightbits.api.duros.v2.DurosAPI/UpdatePolicy"
	DurosAPI_UpdateResourcePolicy_FullMethodName           = "/lightbits.api.duros.v2.DurosAPI/UpdateResourcePolicy"
	DurosAPI_GetPolicy_FullMethodName                      = "/lightbits.api.duros.v2.DurosAPI/GetPolicy"
	DurosAPI_ListPolicies_FullMethodName                   = "/lightbits.api.duros.v2.DurosAPI/ListPolicies"
	DurosAPI_ListResourcePolicies_FullMethodName           = "/lightbits.api.duros.v2.DurosAPI/ListResourcePolicies"
	DurosAPI_GetResourcePolicy_FullMethodName              = "/lightbits.api.duros.v2.DurosAPI/GetResourcePolicy"
	DurosAPI_DeleteResourcePolicy_FullMethodName           = "/lightbits.api.duros.v2.DurosAPI/DeleteResourcePolicy"
	DurosAPI_DeletePolicy_FullMethodName                   = "/lightbits.api.duros.v2.DurosAPI/DeletePolicy"
	DurosAPI_CreateSnapshot_FullMethodName                 = "/lightbits.api.duros.v2.DurosAPI/CreateSnapshot"
	DurosAPI_GetSnapshot_FullMethodName                    = "/lightbits.api.duros.v2.DurosAPI/GetSnapshot"
	DurosAPI_ListSnapshots_FullMethodName                  = "/lightbits.api.duros.v2.DurosAPI/ListSnapshots"
	DurosAPI_DeleteSnapshot_FullMethodName                 = "/lightbits.api.duros.v2.DurosAPI/DeleteSnapshot"
	DurosAPI_GetFeatureFlag_FullMethodName                 = "/lightbits.api.duros.v2.DurosAPI/GetFeatureFlag"
	DurosAPI_EnableFeatureFlag_FullMethodName              = "/lightbits.api.duros.v2.DurosAPI/EnableFeatureFlag"
	DurosAPI_DisableFeatureFlag_FullMethodName             = "/lightbits.api.duros.v2.DurosAPI/DisableFeatureFlag"
	DurosAPI_ListFeatureFlags_FullMethodName               = "/lightbits.api.duros.v2.DurosAPI/ListFeatureFlags"
	DurosAPI_GetClusterConfigParam_FullMethodName          = "/lightbits.api.duros.v2.DurosAPI/GetClusterConfigParam"
	DurosAPI_UpdateClusterConfigParam_FullMethodName       = "/lightbits.api.duros.v2.DurosAPI/UpdateClusterConfigParam"
	DurosAPI_ListClusterConfigParams_FullMethodName        = "/lightbits.api.duros.v2.DurosAPI/ListClusterConfigParams"
	DurosAPI_RollbackVolume_FullMethodName                 = "/lightbits.api.duros.v2.DurosAPI/RollbackVolume"
	DurosAPI_ListChangedBlocks_FullMethodName              = "/lightbits.api.duros.v2.DurosAPI/ListChangedBlocks"
	DurosAPI_RotateClusterRootKey_FullMethodName           = "/lightbits.api.duros.v2.DurosAPI/RotateClusterRootKey"
	DurosAPI_GetClusterRootKey_FullMethodName              = "/lightbits.api.duros.v2.DurosAPI/GetClusterRootKey"
	DurosAPI_CreateIdpConfiguration_FullMethodName         = "/lightbits.api.duros.v2.DurosAPI/CreateIdpConfiguration"
	DurosAPI_DeleteIdpConfiguration_FullMethodName         = "/lightbits.api.duros.v2.DurosAPI/DeleteIdpConfiguration"
	DurosAPI_UpdateIdpConfiguration_FullMethodName         = "/lightbits.api.duros.v2.DurosAPI/UpdateIdpConfiguration"
	DurosAPI_ListIdpConfigurations_FullMethodName          = "/lightbits.api.duros.v2.DurosAPI/ListIdpConfigurations"
	DurosAPI_GetIdpConfiguration_FullMethodName            = "/lightbits.api.duros.v2.DurosAPI/GetIdpConfiguration"
	DurosAPI_CreateIdpClientConf_FullMethodName            = "/lightbits.api.duros.v2.DurosAPI/CreateIdpClientConf"
	DurosAPI_DeleteIdpClientConf_FullMethodName            = "/lightbits.api.duros.v2.DurosAPI/DeleteIdpClientConf"
	DurosAPI_UpdateIdpClientConf_FullMethodName            = "/lightbits.api.duros.v2.DurosAPI/UpdateIdpClientConf"
	DurosAPI_ListIdpClientConfs_FullMethodName             = "/lightbits.api.duros.v2.DurosAPI/ListIdpClientConfs"
	DurosAPI_GetIdpClientConf_FullMethodName               = "/lightbits.api.duros.v2.DurosAPI/GetIdpClientConf"
	DurosAPI_CreateAuthMapEntry_FullMethodName             = "/lightbits.api.duros.v2.DurosAPI/CreateAuthMapEntry"
	DurosAPI_UpdateAuthMapEntry_FullMethodName             = "/lightbits.api.duros.v2.DurosAPI/UpdateAuthMapEntry"
	DurosAPI_DeleteAuthMapEntry_FullMethodName             = "/lightbits.api.duros.v2.DurosAPI/DeleteAuthMapEntry"
	DurosAPI_GetAuthMapEntry_FullMethodName                = "/lightbits.api.duros.v2.DurosAPI/GetAuthMapEntry"
	DurosAPI_ListAuthMapEntries_FullMethodName             = "/lightbits.api.duros.v2.DurosAPI/ListAuthMapEntries"
	DurosAPI_EnableClusterInBandAuth_FullMethodName        = "/lightbits.api.duros.v2.DurosAPI/EnableClusterInBandAuth"
	DurosAPI_DisableClusterInBandAuth_FullMethodName       = "/lightbits.api.duros.v2.DurosAPI/DisableClusterInBandAuth"
	DurosAPI_CreateTrustedHost_FullMethodName              = "/lightbits.api.duros.v2.DurosAPI/CreateTrustedHost"
	DurosAPI_DeleteTrustedHost_FullMethodName              = "/lightbits.api.duros.v2.DurosAPI/DeleteTrustedHost"
	DurosAPI_GetTrustedHost_FullMethodName                 = "/lightbits.api.duros.v2.DurosAPI/GetTrustedHost"
	DurosAPI_ListTrustedHosts_FullMethodName               = "/lightbits.api.duros.v2.DurosAPI/ListTrustedHosts"
	DurosAPI_UpdateTrustedHost_FullMethodName              = "/lightbits.api.duros.v2.DurosAPI/UpdateTrustedHost"
	DurosAPI_SetTrustedHostSecret_FullMethodName           = "/lightbits.api.duros.v2.DurosAPI/SetTrustedHostSecret"
	DurosAPI_GetTrustedHostSecret_FullMethodName           = "/lightbits.api.duros.v2.DurosAPI/GetTrustedHostSecret"
	DurosAPI_EnableFederatedAuthentication_FullMethodName  = "/lightbits.api.duros.v2.DurosAPI/EnableFederatedAuthentication"
	DurosAPI_DisableFederatedAuthentication_FullMethodName = "/lightbits.api.duros.v2.DurosAPI/DisableFederatedAuthentication"
)

// DurosAPIClient is the client API for DurosAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DurosAPIClient interface {
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*Version, error)
	CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*Volume, error)
	DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error)
	ListVolumes(ctx context.Context, in *ListVolumeRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error)
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	GetHost(ctx context.Context, in *GetHostRequest, opts ...grpc.CallOption) (*ConnectedHost, error)
	ListHosts(ctx context.Context, in *ListHostsRequest, opts ...grpc.CallOption) (*ListHostsResponse, error)
	GetVolume(ctx context.Context, in *GetVolumeRequest, opts ...grpc.CallOption) (*Volume, error)
	ListNodes(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*DurosNodeInfo, error)
	ListNvmeDevices(ctx context.Context, in *ListNvmeDevicesRequest, opts ...grpc.CallOption) (*ListNvmeDevicesResponse, error)
	GetNvmeDevice(ctx context.Context, in *GetNvmeDeviceRequest, opts ...grpc.CallOption) (*UserNvmeDevicesResponse, error)
	FetchLogs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[httpbody.HttpBody], error)
	GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*ClusterInfo, error)
	GetClusterInfo(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*ClusterInfoV2, error)
	UpdateNvmeDevice(ctx context.Context, in *UpdateNvmeDeviceRequest, opts ...grpc.CallOption) (*UpdateNvmeDeviceResponse, error)
	AddNvmeDevice(ctx context.Context, in *AddNvmeDeviceRequest, opts ...grpc.CallOption) (*AddNvmeDeviceResponse, error)
	UpdateVolume(ctx context.Context, in *UpdateVolumeRequest, opts ...grpc.CallOption) (*UpdateVolumeResponse, error)
	GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*Server, error)
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
	UpgradeServer(ctx context.Context, in *UpgradeServerRequest, opts ...grpc.CallOption) (*UpgradeServerResponse, error)
	UpgradeCluster(ctx context.Context, in *UpgradeClusterRequest, opts ...grpc.CallOption) (*UpgradeClusterResponse, error)
	EnableClusterEncryption(ctx context.Context, in *EnableClusterEncryptionRequest, opts ...grpc.CallOption) (*EnableClusterEncryptionResponse, error)
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*Server, error)
	ReplaceNode(ctx context.Context, in *ReplaceNodeRequest, opts ...grpc.CallOption) (*ReplaceNodeResponse, error)
	DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error)
	EnableServer(ctx context.Context, in *EnableServerRequest, opts ...grpc.CallOption) (*Server, error)
	DisableServer(ctx context.Context, in *DisableServerRequest, opts ...grpc.CallOption) (*DisableServerResponse, error)
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*Project, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error)
	CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*Credential, error)
	DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*DeleteCredentialResponse, error)
	ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error)
	GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*Credential, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	CreateAdminEndpoint(ctx context.Context, in *CreateAdminEndpointRequest, opts ...grpc.CallOption) (*AdminEndpoint, error)
	DeleteAdminEndpoint(ctx context.Context, in *DeleteAdminEndpointRequest, opts ...grpc.CallOption) (*DeleteAdminEndpointResponse, error)
	ListAdminEndpoints(ctx context.Context, in *ListAdminEndpointsRequest, opts ...grpc.CallOption) (*ListAdminEndpointsResponse, error)
	UpdateAdminEndpoint(ctx context.Context, in *UpdateAdminEndpointRequest, opts ...grpc.CallOption) (*AdminEndpoint, error)
	GetAdminEndpoint(ctx context.Context, in *GetAdminEndpointRequest, opts ...grpc.CallOption) (*AdminEndpoint, error)
	CreateResourcePolicy(ctx context.Context, in *CreateResourcePolicyRequest, opts ...grpc.CallOption) (*ResourcePolicy, error)
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*Policy, error)
	UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error)
	UpdateResourcePolicy(ctx context.Context, in *UpdateResourcePolicyRequest, opts ...grpc.CallOption) (*UpdateResourcePolicyResponse, error)
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*Policy, error)
	ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error)
	ListResourcePolicies(ctx context.Context, in *ListResourcePoliciesRequest, opts ...grpc.CallOption) (*ListResourcePoliciesResponse, error)
	GetResourcePolicy(ctx context.Context, in *GetResourcePolicyRequest, opts ...grpc.CallOption) (*ResourcePolicy, error)
	DeleteResourcePolicy(ctx context.Context, in *DeleteResourcePolicyRequest, opts ...grpc.CallOption) (*DeleteResourcePolicyResponse, error)
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error)
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*Snapshot, error)
	GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*Snapshot, error)
	ListSnapshots(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error)
	DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*DeleteSnapshotResponse, error)
	GetFeatureFlag(ctx context.Context, in *GetFeatureFlagRequest, opts ...grpc.CallOption) (*FeatureFlagStatus, error)
	EnableFeatureFlag(ctx context.Context, in *EnableFeatureFlagRequest, opts ...grpc.CallOption) (*SetFeatureFlagResponse, error)
	DisableFeatureFlag(ctx context.Context, in *DisableFeatureFlagRequest, opts ...grpc.CallOption) (*SetFeatureFlagResponse, error)
	ListFeatureFlags(ctx context.Context, in *ListFeatureFlagsRequest, opts ...grpc.CallOption) (*ListFeatureFlagsResponse, error)
	GetClusterConfigParam(ctx context.Context, in *GetClusterConfigParamRequest, opts ...grpc.CallOption) (*ClusterConfigParam, error)
	UpdateClusterConfigParam(ctx context.Context, in *UpdateClusterConfigParamRequest, opts ...grpc.CallOption) (*UpdateClusterConfigParamResponse, error)
	ListClusterConfigParams(ctx context.Context, in *ListClusterConfigParamsRequest, opts ...grpc.CallOption) (*ListClusterConfigParamsResponse, error)
	RollbackVolume(ctx context.Context, in *RollbackVolumeRequest, opts ...grpc.CallOption) (*RollbackVolumeResponse, error)
	ListChangedBlocks(ctx context.Context, in *ListChangedBlocksRequest, opts ...grpc.CallOption) (*ListChangedBlocksResponse, error)
	RotateClusterRootKey(ctx context.Context, in *RotateClusterRootKeyRequest, opts ...grpc.CallOption) (*RotateClusterRootKeyResponse, error)
	GetClusterRootKey(ctx context.Context, in *GetClusterRootKeyRequest, opts ...grpc.CallOption) (*GetClusterRootKeyResponse, error)
	CreateIdpConfiguration(ctx context.Context, in *CreateIDPConfigurationRequest, opts ...grpc.CallOption) (*IDPConfiguration, error)
	DeleteIdpConfiguration(ctx context.Context, in *DeleteIDPConfigurationRequest, opts ...grpc.CallOption) (*DeleteIDPConfigurationResponse, error)
	UpdateIdpConfiguration(ctx context.Context, in *UpdateIDPConfigurationRequest, opts ...grpc.CallOption) (*IDPConfiguration, error)
	ListIdpConfigurations(ctx context.Context, in *ListIDPConfigurationsRequest, opts ...grpc.CallOption) (*ListIDPConfigurationsResponse, error)
	GetIdpConfiguration(ctx context.Context, in *GetIDPConfigurationRequest, opts ...grpc.CallOption) (*IDPConfiguration, error)
	CreateIdpClientConf(ctx context.Context, in *CreateIdpClientConfRequest, opts ...grpc.CallOption) (*IdpClientConf, error)
	DeleteIdpClientConf(ctx context.Context, in *DeleteIdpClientConfRequest, opts ...grpc.CallOption) (*DeleteIdpClientConfResponse, error)
	UpdateIdpClientConf(ctx context.Context, in *UpdateIdpClientConfRequest, opts ...grpc.CallOption) (*IdpClientConf, error)
	ListIdpClientConfs(ctx context.Context, in *ListIdpClientConfsRequest, opts ...grpc.CallOption) (*ListIdpClientConfsResponse, error)
	GetIdpClientConf(ctx context.Context, in *GetIdpClientConfRequest, opts ...grpc.CallOption) (*IdpClientConf, error)
	CreateAuthMapEntry(ctx context.Context, in *CreateAuthMapEntryRequest, opts ...grpc.CallOption) (*AuthMapEntry, error)
	UpdateAuthMapEntry(ctx context.Context, in *UpdateAuthMapEntryRequest, opts ...grpc.CallOption) (*AuthMapEntry, error)
	DeleteAuthMapEntry(ctx context.Context, in *DeleteAuthMapEntryRequest, opts ...grpc.CallOption) (*DeleteAuthMapEntryResponse, error)
	GetAuthMapEntry(ctx context.Context, in *GetAuthMapEntryRequest, opts ...grpc.CallOption) (*AuthMapEntry, error)
	ListAuthMapEntries(ctx context.Context, in *ListAuthMapEntriesRequest, opts ...grpc.CallOption) (*ListAuthMapEntriesResponse, error)
	EnableClusterInBandAuth(ctx context.Context, in *EnableClusterInBandAuthRequest, opts ...grpc.CallOption) (*EnableClusterInBandAuthResponse, error)
	DisableClusterInBandAuth(ctx context.Context, in *DisableClusterInBandAuthRequest, opts ...grpc.CallOption) (*DisableClusterInBandAuthResponse, error)
	CreateTrustedHost(ctx context.Context, in *CreateTrustedHostRequest, opts ...grpc.CallOption) (*TrustedHost, error)
	DeleteTrustedHost(ctx context.Context, in *DeleteTrustedHostRequest, opts ...grpc.CallOption) (*DeleteTrustedHostResponse, error)
	GetTrustedHost(ctx context.Context, in *GetTrustedHostRequest, opts ...grpc.CallOption) (*TrustedHost, error)
	ListTrustedHosts(ctx context.Context, in *ListTrustedHostsRequest, opts ...grpc.CallOption) (*ListTrustedHostsResponse, error)
	UpdateTrustedHost(ctx context.Context, in *UpdateTrustedHostRequest, opts ...grpc.CallOption) (*TrustedHost, error)
	SetTrustedHostSecret(ctx context.Context, in *SetTrustedHostSecretsRequest, opts ...grpc.CallOption) (*SetTrustedHostSecretsResponse, error)
	GetTrustedHostSecret(ctx context.Context, in *GetTrustedHostSecretsRequest, opts ...grpc.CallOption) (*GetTrustedHostSecretsResponse, error)
	EnableFederatedAuthentication(ctx context.Context, in *EnableFederatedAuthenticationRequest, opts ...grpc.CallOption) (*EnableFederatedAuthenticationResponse, error)
	DisableFederatedAuthentication(ctx context.Context, in *DisableFederatedAuthenticationRequest, opts ...grpc.CallOption) (*DisableFederatedAuthenticationResponse, error)
}

type durosAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDurosAPIClient(cc grpc.ClientConnInterface) DurosAPIClient {
	return &durosAPIClient{cc}
}

func (c *durosAPIClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*Version, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Version)
	err := c.cc.Invoke(ctx, DurosAPI_GetVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*Volume, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Volume)
	err := c.cc.Invoke(ctx, DurosAPI_CreateVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVolumeResponse)
	err := c.cc.Invoke(ctx, DurosAPI_DeleteVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListVolumes(ctx context.Context, in *ListVolumeRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVolumesResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListVolumes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetHost(ctx context.Context, in *GetHostRequest, opts ...grpc.CallOption) (*ConnectedHost, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectedHost)
	err := c.cc.Invoke(ctx, DurosAPI_GetHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListHosts(ctx context.Context, in *ListHostsRequest, opts ...grpc.CallOption) (*ListHostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHostsResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListHosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetVolume(ctx context.Context, in *GetVolumeRequest, opts ...grpc.CallOption) (*Volume, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Volume)
	err := c.cc.Invoke(ctx, DurosAPI_GetVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListNodes(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*DurosNodeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DurosNodeInfo)
	err := c.cc.Invoke(ctx, DurosAPI_GetNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListNvmeDevices(ctx context.Context, in *ListNvmeDevicesRequest, opts ...grpc.CallOption) (*ListNvmeDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNvmeDevicesResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListNvmeDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetNvmeDevice(ctx context.Context, in *GetNvmeDeviceRequest, opts ...grpc.CallOption) (*UserNvmeDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserNvmeDevicesResponse)
	err := c.cc.Invoke(ctx, DurosAPI_GetNvmeDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) FetchLogs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[httpbody.HttpBody], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DurosAPI_ServiceDesc.Streams[0], DurosAPI_FetchLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogRequest, httpbody.HttpBody]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DurosAPI_FetchLogsClient = grpc.ServerStreamingClient[httpbody.HttpBody]

func (c *durosAPIClient) GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*ClusterInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterInfo)
	err := c.cc.Invoke(ctx, DurosAPI_GetCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetClusterInfo(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*ClusterInfoV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterInfoV2)
	err := c.cc.Invoke(ctx, DurosAPI_GetClusterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpdateNvmeDevice(ctx context.Context, in *UpdateNvmeDeviceRequest, opts ...grpc.CallOption) (*UpdateNvmeDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNvmeDeviceResponse)
	err := c.cc.Invoke(ctx, DurosAPI_UpdateNvmeDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) AddNvmeDevice(ctx context.Context, in *AddNvmeDeviceRequest, opts ...grpc.CallOption) (*AddNvmeDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddNvmeDeviceResponse)
	err := c.cc.Invoke(ctx, DurosAPI_AddNvmeDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpdateVolume(ctx context.Context, in *UpdateVolumeRequest, opts ...grpc.CallOption) (*UpdateVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVolumeResponse)
	err := c.cc.Invoke(ctx, DurosAPI_UpdateVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*Server, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Server)
	err := c.cc.Invoke(ctx, DurosAPI_GetServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServersResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpgradeServer(ctx context.Context, in *UpgradeServerRequest, opts ...grpc.CallOption) (*UpgradeServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeServerResponse)
	err := c.cc.Invoke(ctx, DurosAPI_UpgradeServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpgradeCluster(ctx context.Context, in *UpgradeClusterRequest, opts ...grpc.CallOption) (*UpgradeClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeClusterResponse)
	err := c.cc.Invoke(ctx, DurosAPI_UpgradeCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) EnableClusterEncryption(ctx context.Context, in *EnableClusterEncryptionRequest, opts ...grpc.CallOption) (*EnableClusterEncryptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableClusterEncryptionResponse)
	err := c.cc.Invoke(ctx, DurosAPI_EnableClusterEncryption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*Server, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Server)
	err := c.cc.Invoke(ctx, DurosAPI_CreateServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ReplaceNode(ctx context.Context, in *ReplaceNodeRequest, opts ...grpc.CallOption) (*ReplaceNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceNodeResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ReplaceNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteServerResponse)
	err := c.cc.Invoke(ctx, DurosAPI_DeleteServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) EnableServer(ctx context.Context, in *EnableServerRequest, opts ...grpc.CallOption) (*Server, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Server)
	err := c.cc.Invoke(ctx, DurosAPI_EnableServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DisableServer(ctx context.Context, in *DisableServerRequest, opts ...grpc.CallOption) (*DisableServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableServerResponse)
	err := c.cc.Invoke(ctx, DurosAPI_DisableServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Project)
	err := c.cc.Invoke(ctx, DurosAPI_CreateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, DurosAPI_UpdateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, DurosAPI_DeleteProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Project)
	err := c.cc.Invoke(ctx, DurosAPI_GetProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*Credential, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Credential)
	err := c.cc.Invoke(ctx, DurosAPI_CreateCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*DeleteCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCredentialResponse)
	err := c.cc.Invoke(ctx, DurosAPI_DeleteCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCredentialsResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*Credential, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Credential)
	err := c.cc.Invoke(ctx, DurosAPI_GetCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, DurosAPI_GetRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateAdminEndpoint(ctx context.Context, in *CreateAdminEndpointRequest, opts ...grpc.CallOption) (*AdminEndpoint, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminEndpoint)
	err := c.cc.Invoke(ctx, DurosAPI_CreateAdminEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteAdminEndpoint(ctx context.Context, in *DeleteAdminEndpointRequest, opts ...grpc.CallOption) (*DeleteAdminEndpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAdminEndpointResponse)
	err := c.cc.Invoke(ctx, DurosAPI_DeleteAdminEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListAdminEndpoints(ctx context.Context, in *ListAdminEndpointsRequest, opts ...grpc.CallOption) (*ListAdminEndpointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAdminEndpointsResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListAdminEndpoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpdateAdminEndpoint(ctx context.Context, in *UpdateAdminEndpointRequest, opts ...grpc.CallOption) (*AdminEndpoint, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminEndpoint)
	err := c.cc.Invoke(ctx, DurosAPI_UpdateAdminEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetAdminEndpoint(ctx context.Context, in *GetAdminEndpointRequest, opts ...grpc.CallOption) (*AdminEndpoint, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminEndpoint)
	err := c.cc.Invoke(ctx, DurosAPI_GetAdminEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateResourcePolicy(ctx context.Context, in *CreateResourcePolicyRequest, opts ...grpc.CallOption) (*ResourcePolicy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourcePolicy)
	err := c.cc.Invoke(ctx, DurosAPI_CreateResourcePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*Policy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Policy)
	err := c.cc.Invoke(ctx, DurosAPI_CreatePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePolicyResponse)
	err := c.cc.Invoke(ctx, DurosAPI_UpdatePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpdateResourcePolicy(ctx context.Context, in *UpdateResourcePolicyRequest, opts ...grpc.CallOption) (*UpdateResourcePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResourcePolicyResponse)
	err := c.cc.Invoke(ctx, DurosAPI_UpdateResourcePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*Policy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Policy)
	err := c.cc.Invoke(ctx, DurosAPI_GetPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPoliciesResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListResourcePolicies(ctx context.Context, in *ListResourcePoliciesRequest, opts ...grpc.CallOption) (*ListResourcePoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResourcePoliciesResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListResourcePolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetResourcePolicy(ctx context.Context, in *GetResourcePolicyRequest, opts ...grpc.CallOption) (*ResourcePolicy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourcePolicy)
	err := c.cc.Invoke(ctx, DurosAPI_GetResourcePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteResourcePolicy(ctx context.Context, in *DeleteResourcePolicyRequest, opts ...grpc.CallOption) (*DeleteResourcePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResourcePolicyResponse)
	err := c.cc.Invoke(ctx, DurosAPI_DeleteResourcePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePolicyResponse)
	err := c.cc.Invoke(ctx, DurosAPI_DeletePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*Snapshot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Snapshot)
	err := c.cc.Invoke(ctx, DurosAPI_CreateSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*Snapshot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Snapshot)
	err := c.cc.Invoke(ctx, DurosAPI_GetSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListSnapshots(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSnapshotsResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListSnapshots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*DeleteSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSnapshotResponse)
	err := c.cc.Invoke(ctx, DurosAPI_DeleteSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetFeatureFlag(ctx context.Context, in *GetFeatureFlagRequest, opts ...grpc.CallOption) (*FeatureFlagStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeatureFlagStatus)
	err := c.cc.Invoke(ctx, DurosAPI_GetFeatureFlag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) EnableFeatureFlag(ctx context.Context, in *EnableFeatureFlagRequest, opts ...grpc.CallOption) (*SetFeatureFlagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetFeatureFlagResponse)
	err := c.cc.Invoke(ctx, DurosAPI_EnableFeatureFlag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DisableFeatureFlag(ctx context.Context, in *DisableFeatureFlagRequest, opts ...grpc.CallOption) (*SetFeatureFlagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetFeatureFlagResponse)
	err := c.cc.Invoke(ctx, DurosAPI_DisableFeatureFlag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListFeatureFlags(ctx context.Context, in *ListFeatureFlagsRequest, opts ...grpc.CallOption) (*ListFeatureFlagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeatureFlagsResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListFeatureFlags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetClusterConfigParam(ctx context.Context, in *GetClusterConfigParamRequest, opts ...grpc.CallOption) (*ClusterConfigParam, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterConfigParam)
	err := c.cc.Invoke(ctx, DurosAPI_GetClusterConfigParam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpdateClusterConfigParam(ctx context.Context, in *UpdateClusterConfigParamRequest, opts ...grpc.CallOption) (*UpdateClusterConfigParamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateClusterConfigParamResponse)
	err := c.cc.Invoke(ctx, DurosAPI_UpdateClusterConfigParam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListClusterConfigParams(ctx context.Context, in *ListClusterConfigParamsRequest, opts ...grpc.CallOption) (*ListClusterConfigParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClusterConfigParamsResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListClusterConfigParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) RollbackVolume(ctx context.Context, in *RollbackVolumeRequest, opts ...grpc.CallOption) (*RollbackVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollbackVolumeResponse)
	err := c.cc.Invoke(ctx, DurosAPI_RollbackVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListChangedBlocks(ctx context.Context, in *ListChangedBlocksRequest, opts ...grpc.CallOption) (*ListChangedBlocksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChangedBlocksResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListChangedBlocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) RotateClusterRootKey(ctx context.Context, in *RotateClusterRootKeyRequest, opts ...grpc.CallOption) (*RotateClusterRootKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RotateClusterRootKeyResponse)
	err := c.cc.Invoke(ctx, DurosAPI_RotateClusterRootKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetClusterRootKey(ctx context.Context, in *GetClusterRootKeyRequest, opts ...grpc.CallOption) (*GetClusterRootKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterRootKeyResponse)
	err := c.cc.Invoke(ctx, DurosAPI_GetClusterRootKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateIdpConfiguration(ctx context.Context, in *CreateIDPConfigurationRequest, opts ...grpc.CallOption) (*IDPConfiguration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IDPConfiguration)
	err := c.cc.Invoke(ctx, DurosAPI_CreateIdpConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteIdpConfiguration(ctx context.Context, in *DeleteIDPConfigurationRequest, opts ...grpc.CallOption) (*DeleteIDPConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteIDPConfigurationResponse)
	err := c.cc.Invoke(ctx, DurosAPI_DeleteIdpConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpdateIdpConfiguration(ctx context.Context, in *UpdateIDPConfigurationRequest, opts ...grpc.CallOption) (*IDPConfiguration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IDPConfiguration)
	err := c.cc.Invoke(ctx, DurosAPI_UpdateIdpConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListIdpConfigurations(ctx context.Context, in *ListIDPConfigurationsRequest, opts ...grpc.CallOption) (*ListIDPConfigurationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIDPConfigurationsResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListIdpConfigurations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetIdpConfiguration(ctx context.Context, in *GetIDPConfigurationRequest, opts ...grpc.CallOption) (*IDPConfiguration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IDPConfiguration)
	err := c.cc.Invoke(ctx, DurosAPI_GetIdpConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateIdpClientConf(ctx context.Context, in *CreateIdpClientConfRequest, opts ...grpc.CallOption) (*IdpClientConf, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdpClientConf)
	err := c.cc.Invoke(ctx, DurosAPI_CreateIdpClientConf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteIdpClientConf(ctx context.Context, in *DeleteIdpClientConfRequest, opts ...grpc.CallOption) (*DeleteIdpClientConfResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteIdpClientConfResponse)
	err := c.cc.Invoke(ctx, DurosAPI_DeleteIdpClientConf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpdateIdpClientConf(ctx context.Context, in *UpdateIdpClientConfRequest, opts ...grpc.CallOption) (*IdpClientConf, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdpClientConf)
	err := c.cc.Invoke(ctx, DurosAPI_UpdateIdpClientConf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListIdpClientConfs(ctx context.Context, in *ListIdpClientConfsRequest, opts ...grpc.CallOption) (*ListIdpClientConfsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIdpClientConfsResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListIdpClientConfs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetIdpClientConf(ctx context.Context, in *GetIdpClientConfRequest, opts ...grpc.CallOption) (*IdpClientConf, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdpClientConf)
	err := c.cc.Invoke(ctx, DurosAPI_GetIdpClientConf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateAuthMapEntry(ctx context.Context, in *CreateAuthMapEntryRequest, opts ...grpc.CallOption) (*AuthMapEntry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthMapEntry)
	err := c.cc.Invoke(ctx, DurosAPI_CreateAuthMapEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpdateAuthMapEntry(ctx context.Context, in *UpdateAuthMapEntryRequest, opts ...grpc.CallOption) (*AuthMapEntry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthMapEntry)
	err := c.cc.Invoke(ctx, DurosAPI_UpdateAuthMapEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteAuthMapEntry(ctx context.Context, in *DeleteAuthMapEntryRequest, opts ...grpc.CallOption) (*DeleteAuthMapEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAuthMapEntryResponse)
	err := c.cc.Invoke(ctx, DurosAPI_DeleteAuthMapEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetAuthMapEntry(ctx context.Context, in *GetAuthMapEntryRequest, opts ...grpc.CallOption) (*AuthMapEntry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthMapEntry)
	err := c.cc.Invoke(ctx, DurosAPI_GetAuthMapEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListAuthMapEntries(ctx context.Context, in *ListAuthMapEntriesRequest, opts ...grpc.CallOption) (*ListAuthMapEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAuthMapEntriesResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListAuthMapEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) EnableClusterInBandAuth(ctx context.Context, in *EnableClusterInBandAuthRequest, opts ...grpc.CallOption) (*EnableClusterInBandAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableClusterInBandAuthResponse)
	err := c.cc.Invoke(ctx, DurosAPI_EnableClusterInBandAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DisableClusterInBandAuth(ctx context.Context, in *DisableClusterInBandAuthRequest, opts ...grpc.CallOption) (*DisableClusterInBandAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableClusterInBandAuthResponse)
	err := c.cc.Invoke(ctx, DurosAPI_DisableClusterInBandAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateTrustedHost(ctx context.Context, in *CreateTrustedHostRequest, opts ...grpc.CallOption) (*TrustedHost, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrustedHost)
	err := c.cc.Invoke(ctx, DurosAPI_CreateTrustedHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteTrustedHost(ctx context.Context, in *DeleteTrustedHostRequest, opts ...grpc.CallOption) (*DeleteTrustedHostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTrustedHostResponse)
	err := c.cc.Invoke(ctx, DurosAPI_DeleteTrustedHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetTrustedHost(ctx context.Context, in *GetTrustedHostRequest, opts ...grpc.CallOption) (*TrustedHost, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrustedHost)
	err := c.cc.Invoke(ctx, DurosAPI_GetTrustedHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListTrustedHosts(ctx context.Context, in *ListTrustedHostsRequest, opts ...grpc.CallOption) (*ListTrustedHostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTrustedHostsResponse)
	err := c.cc.Invoke(ctx, DurosAPI_ListTrustedHosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpdateTrustedHost(ctx context.Context, in *UpdateTrustedHostRequest, opts ...grpc.CallOption) (*TrustedHost, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrustedHost)
	err := c.cc.Invoke(ctx, DurosAPI_UpdateTrustedHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) SetTrustedHostSecret(ctx context.Context, in *SetTrustedHostSecretsRequest, opts ...grpc.CallOption) (*SetTrustedHostSecretsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTrustedHostSecretsResponse)
	err := c.cc.Invoke(ctx, DurosAPI_SetTrustedHostSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetTrustedHostSecret(ctx context.Context, in *GetTrustedHostSecretsRequest, opts ...grpc.CallOption) (*GetTrustedHostSecretsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrustedHostSecretsResponse)
	err := c.cc.Invoke(ctx, DurosAPI_GetTrustedHostSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) EnableFederatedAuthentication(ctx context.Context, in *EnableFederatedAuthenticationRequest, opts ...grpc.CallOption) (*EnableFederatedAuthenticationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableFederatedAuthenticationResponse)
	err := c.cc.Invoke(ctx, DurosAPI_EnableFederatedAuthentication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DisableFederatedAuthentication(ctx context.Context, in *DisableFederatedAuthenticationRequest, opts ...grpc.CallOption) (*DisableFederatedAuthenticationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableFederatedAuthenticationResponse)
	err := c.cc.Invoke(ctx, DurosAPI_DisableFederatedAuthentication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DurosAPIServer is the server API for DurosAPI service.
// All implementations should embed UnimplementedDurosAPIServer
// for forward compatibility.
type DurosAPIServer interface {
	GetVersion(context.Context, *GetVersionRequest) (*Version, error)
	CreateVolume(context.Context, *CreateVolumeRequest) (*Volume, error)
	DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error)
	ListVolumes(context.Context, *ListVolumeRequest) (*ListVolumesResponse, error)
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	GetHost(context.Context, *GetHostRequest) (*ConnectedHost, error)
	ListHosts(context.Context, *ListHostsRequest) (*ListHostsResponse, error)
	GetVolume(context.Context, *GetVolumeRequest) (*Volume, error)
	ListNodes(context.Context, *ListNodeRequest) (*ListNodesResponse, error)
	GetNode(context.Context, *GetNodeRequest) (*DurosNodeInfo, error)
	ListNvmeDevices(context.Context, *ListNvmeDevicesRequest) (*ListNvmeDevicesResponse, error)
	GetNvmeDevice(context.Context, *GetNvmeDeviceRequest) (*UserNvmeDevicesResponse, error)
	FetchLogs(*LogRequest, grpc.ServerStreamingServer[httpbody.HttpBody]) error
	GetCluster(context.Context, *GetClusterRequest) (*ClusterInfo, error)
	GetClusterInfo(context.Context, *GetClusterRequest) (*ClusterInfoV2, error)
	UpdateNvmeDevice(context.Context, *UpdateNvmeDeviceRequest) (*UpdateNvmeDeviceResponse, error)
	AddNvmeDevice(context.Context, *AddNvmeDeviceRequest) (*AddNvmeDeviceResponse, error)
	UpdateVolume(context.Context, *UpdateVolumeRequest) (*UpdateVolumeResponse, error)
	GetServer(context.Context, *GetServerRequest) (*Server, error)
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	UpgradeServer(context.Context, *UpgradeServerRequest) (*UpgradeServerResponse, error)
	UpgradeCluster(context.Context, *UpgradeClusterRequest) (*UpgradeClusterResponse, error)
	EnableClusterEncryption(context.Context, *EnableClusterEncryptionRequest) (*EnableClusterEncryptionResponse, error)
	CreateServer(context.Context, *CreateServerRequest) (*Server, error)
	ReplaceNode(context.Context, *ReplaceNodeRequest) (*ReplaceNodeResponse, error)
	DeleteServer(context.Context, *DeleteServerRequest) (*DeleteServerResponse, error)
	EnableServer(context.Context, *EnableServerRequest) (*Server, error)
	DisableServer(context.Context, *DisableServerRequest) (*DisableServerResponse, error)
	CreateProject(context.Context, *CreateProjectRequest) (*Project, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	GetProject(context.Context, *GetProjectRequest) (*Project, error)
	CreateCredential(context.Context, *CreateCredentialRequest) (*Credential, error)
	DeleteCredential(context.Context, *DeleteCredentialRequest) (*DeleteCredentialResponse, error)
	ListCredentials(context.Context, *ListCredentialsRequest) (*ListCredentialsResponse, error)
	GetCredential(context.Context, *GetCredentialRequest) (*Credential, error)
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	CreateAdminEndpoint(context.Context, *CreateAdminEndpointRequest) (*AdminEndpoint, error)
	DeleteAdminEndpoint(context.Context, *DeleteAdminEndpointRequest) (*DeleteAdminEndpointResponse, error)
	ListAdminEndpoints(context.Context, *ListAdminEndpointsRequest) (*ListAdminEndpointsResponse, error)
	UpdateAdminEndpoint(context.Context, *UpdateAdminEndpointRequest) (*AdminEndpoint, error)
	GetAdminEndpoint(context.Context, *GetAdminEndpointRequest) (*AdminEndpoint, error)
	CreateResourcePolicy(context.Context, *CreateResourcePolicyRequest) (*ResourcePolicy, error)
	CreatePolicy(context.Context, *CreatePolicyRequest) (*Policy, error)
	UpdatePolicy(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error)
	UpdateResourcePolicy(context.Context, *UpdateResourcePolicyRequest) (*UpdateResourcePolicyResponse, error)
	GetPolicy(context.Context, *GetPolicyRequest) (*Policy, error)
	ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error)
	ListResourcePolicies(context.Context, *ListResourcePoliciesRequest) (*ListResourcePoliciesResponse, error)
	GetResourcePolicy(context.Context, *GetResourcePolicyRequest) (*ResourcePolicy, error)
	DeleteResourcePolicy(context.Context, *DeleteResourcePolicyRequest) (*DeleteResourcePolicyResponse, error)
	DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error)
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*Snapshot, error)
	GetSnapshot(context.Context, *GetSnapshotRequest) (*Snapshot, error)
	ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error)
	DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error)
	GetFeatureFlag(context.Context, *GetFeatureFlagRequest) (*FeatureFlagStatus, error)
	EnableFeatureFlag(context.Context, *EnableFeatureFlagRequest) (*SetFeatureFlagResponse, error)
	DisableFeatureFlag(context.Context, *DisableFeatureFlagRequest) (*SetFeatureFlagResponse, error)
	ListFeatureFlags(context.Context, *ListFeatureFlagsRequest) (*ListFeatureFlagsResponse, error)
	GetClusterConfigParam(context.Context, *GetClusterConfigParamRequest) (*ClusterConfigParam, error)
	UpdateClusterConfigParam(context.Context, *UpdateClusterConfigParamRequest) (*UpdateClusterConfigParamResponse, error)
	ListClusterConfigParams(context.Context, *ListClusterConfigParamsRequest) (*ListClusterConfigParamsResponse, error)
	RollbackVolume(context.Context, *RollbackVolumeRequest) (*RollbackVolumeResponse, error)
	ListChangedBlocks(context.Context, *ListChangedBlocksRequest) (*ListChangedBlocksResponse, error)
	RotateClusterRootKey(context.Context, *RotateClusterRootKeyRequest) (*RotateClusterRootKeyResponse, error)
	GetClusterRootKey(context.Context, *GetClusterRootKeyRequest) (*GetClusterRootKeyResponse, error)
	CreateIdpConfiguration(context.Context, *CreateIDPConfigurationRequest) (*IDPConfiguration, error)
	DeleteIdpConfiguration(context.Context, *DeleteIDPConfigurationRequest) (*DeleteIDPConfigurationResponse, error)
	UpdateIdpConfiguration(context.Context, *UpdateIDPConfigurationRequest) (*IDPConfiguration, error)
	ListIdpConfigurations(context.Context, *ListIDPConfigurationsRequest) (*ListIDPConfigurationsResponse, error)
	GetIdpConfiguration(context.Context, *GetIDPConfigurationRequest) (*IDPConfiguration, error)
	CreateIdpClientConf(context.Context, *CreateIdpClientConfRequest) (*IdpClientConf, error)
	DeleteIdpClientConf(context.Context, *DeleteIdpClientConfRequest) (*DeleteIdpClientConfResponse, error)
	UpdateIdpClientConf(context.Context, *UpdateIdpClientConfRequest) (*IdpClientConf, error)
	ListIdpClientConfs(context.Context, *ListIdpClientConfsRequest) (*ListIdpClientConfsResponse, error)
	GetIdpClientConf(context.Context, *GetIdpClientConfRequest) (*IdpClientConf, error)
	CreateAuthMapEntry(context.Context, *CreateAuthMapEntryRequest) (*AuthMapEntry, error)
	UpdateAuthMapEntry(context.Context, *UpdateAuthMapEntryRequest) (*AuthMapEntry, error)
	DeleteAuthMapEntry(context.Context, *DeleteAuthMapEntryRequest) (*DeleteAuthMapEntryResponse, error)
	GetAuthMapEntry(context.Context, *GetAuthMapEntryRequest) (*AuthMapEntry, error)
	ListAuthMapEntries(context.Context, *ListAuthMapEntriesRequest) (*ListAuthMapEntriesResponse, error)
	EnableClusterInBandAuth(context.Context, *EnableClusterInBandAuthRequest) (*EnableClusterInBandAuthResponse, error)
	DisableClusterInBandAuth(context.Context, *DisableClusterInBandAuthRequest) (*DisableClusterInBandAuthResponse, error)
	CreateTrustedHost(context.Context, *CreateTrustedHostRequest) (*TrustedHost, error)
	DeleteTrustedHost(context.Context, *DeleteTrustedHostRequest) (*DeleteTrustedHostResponse, error)
	GetTrustedHost(context.Context, *GetTrustedHostRequest) (*TrustedHost, error)
	ListTrustedHosts(context.Context, *ListTrustedHostsRequest) (*ListTrustedHostsResponse, error)
	UpdateTrustedHost(context.Context, *UpdateTrustedHostRequest) (*TrustedHost, error)
	SetTrustedHostSecret(context.Context, *SetTrustedHostSecretsRequest) (*SetTrustedHostSecretsResponse, error)
	GetTrustedHostSecret(context.Context, *GetTrustedHostSecretsRequest) (*GetTrustedHostSecretsResponse, error)
	EnableFederatedAuthentication(context.Context, *EnableFederatedAuthenticationRequest) (*EnableFederatedAuthenticationResponse, error)
	DisableFederatedAuthentication(context.Context, *DisableFederatedAuthenticationRequest) (*DisableFederatedAuthenticationResponse, error)
}

// UnimplementedDurosAPIServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDurosAPIServer struct{}

func (UnimplementedDurosAPIServer) GetVersion(context.Context, *GetVersionRequest) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedDurosAPIServer) CreateVolume(context.Context, *CreateVolumeRequest) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (UnimplementedDurosAPIServer) DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolume not implemented")
}
func (UnimplementedDurosAPIServer) ListVolumes(context.Context, *ListVolumeRequest) (*ListVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVolumes not implemented")
}
func (UnimplementedDurosAPIServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedDurosAPIServer) GetHost(context.Context, *GetHostRequest) (*ConnectedHost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHost not implemented")
}
func (UnimplementedDurosAPIServer) ListHosts(context.Context, *ListHostsRequest) (*ListHostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHosts not implemented")
}
func (UnimplementedDurosAPIServer) GetVolume(context.Context, *GetVolumeRequest) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolume not implemented")
}
func (UnimplementedDurosAPIServer) ListNodes(context.Context, *ListNodeRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedDurosAPIServer) GetNode(context.Context, *GetNodeRequest) (*DurosNodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedDurosAPIServer) ListNvmeDevices(context.Context, *ListNvmeDevicesRequest) (*ListNvmeDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNvmeDevices not implemented")
}
func (UnimplementedDurosAPIServer) GetNvmeDevice(context.Context, *GetNvmeDeviceRequest) (*UserNvmeDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNvmeDevice not implemented")
}
func (UnimplementedDurosAPIServer) FetchLogs(*LogRequest, grpc.ServerStreamingServer[httpbody.HttpBody]) error {
	return status.Errorf(codes.Unimplemented, "method FetchLogs not implemented")
}
func (UnimplementedDurosAPIServer) GetCluster(context.Context, *GetClusterRequest) (*ClusterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedDurosAPIServer) GetClusterInfo(context.Context, *GetClusterRequest) (*ClusterInfoV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfo not implemented")
}
func (UnimplementedDurosAPIServer) UpdateNvmeDevice(context.Context, *UpdateNvmeDeviceRequest) (*UpdateNvmeDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNvmeDevice not implemented")
}
func (UnimplementedDurosAPIServer) AddNvmeDevice(context.Context, *AddNvmeDeviceRequest) (*AddNvmeDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNvmeDevice not implemented")
}
func (UnimplementedDurosAPIServer) UpdateVolume(context.Context, *UpdateVolumeRequest) (*UpdateVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVolume not implemented")
}
func (UnimplementedDurosAPIServer) GetServer(context.Context, *GetServerRequest) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (UnimplementedDurosAPIServer) ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServers not implemented")
}
func (UnimplementedDurosAPIServer) UpgradeServer(context.Context, *UpgradeServerRequest) (*UpgradeServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeServer not implemented")
}
func (UnimplementedDurosAPIServer) UpgradeCluster(context.Context, *UpgradeClusterRequest) (*UpgradeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeCluster not implemented")
}
func (UnimplementedDurosAPIServer) EnableClusterEncryption(context.Context, *EnableClusterEncryptionRequest) (*EnableClusterEncryptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableClusterEncryption not implemented")
}
func (UnimplementedDurosAPIServer) CreateServer(context.Context, *CreateServerRequest) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (UnimplementedDurosAPIServer) ReplaceNode(context.Context, *ReplaceNodeRequest) (*ReplaceNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceNode not implemented")
}
func (UnimplementedDurosAPIServer) DeleteServer(context.Context, *DeleteServerRequest) (*DeleteServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (UnimplementedDurosAPIServer) EnableServer(context.Context, *EnableServerRequest) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableServer not implemented")
}
func (UnimplementedDurosAPIServer) DisableServer(context.Context, *DisableServerRequest) (*DisableServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableServer not implemented")
}
func (UnimplementedDurosAPIServer) CreateProject(context.Context, *CreateProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedDurosAPIServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedDurosAPIServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedDurosAPIServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedDurosAPIServer) GetProject(context.Context, *GetProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedDurosAPIServer) CreateCredential(context.Context, *CreateCredentialRequest) (*Credential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (UnimplementedDurosAPIServer) DeleteCredential(context.Context, *DeleteCredentialRequest) (*DeleteCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedDurosAPIServer) ListCredentials(context.Context, *ListCredentialsRequest) (*ListCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentials not implemented")
}
func (UnimplementedDurosAPIServer) GetCredential(context.Context, *GetCredentialRequest) (*Credential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedDurosAPIServer) GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedDurosAPIServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedDurosAPIServer) CreateAdminEndpoint(context.Context, *CreateAdminEndpointRequest) (*AdminEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdminEndpoint not implemented")
}
func (UnimplementedDurosAPIServer) DeleteAdminEndpoint(context.Context, *DeleteAdminEndpointRequest) (*DeleteAdminEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdminEndpoint not implemented")
}
func (UnimplementedDurosAPIServer) ListAdminEndpoints(context.Context, *ListAdminEndpointsRequest) (*ListAdminEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdminEndpoints not implemented")
}
func (UnimplementedDurosAPIServer) UpdateAdminEndpoint(context.Context, *UpdateAdminEndpointRequest) (*AdminEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminEndpoint not implemented")
}
func (UnimplementedDurosAPIServer) GetAdminEndpoint(context.Context, *GetAdminEndpointRequest) (*AdminEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminEndpoint not implemented")
}
func (UnimplementedDurosAPIServer) CreateResourcePolicy(context.Context, *CreateResourcePolicyRequest) (*ResourcePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourcePolicy not implemented")
}
func (UnimplementedDurosAPIServer) CreatePolicy(context.Context, *CreatePolicyRequest) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedDurosAPIServer) UpdatePolicy(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedDurosAPIServer) UpdateResourcePolicy(context.Context, *UpdateResourcePolicyRequest) (*UpdateResourcePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourcePolicy not implemented")
}
func (UnimplementedDurosAPIServer) GetPolicy(context.Context, *GetPolicyRequest) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedDurosAPIServer) ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (UnimplementedDurosAPIServer) ListResourcePolicies(context.Context, *ListResourcePoliciesRequest) (*ListResourcePoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourcePolicies not implemented")
}
func (UnimplementedDurosAPIServer) GetResourcePolicy(context.Context, *GetResourcePolicyRequest) (*ResourcePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourcePolicy not implemented")
}
func (UnimplementedDurosAPIServer) DeleteResourcePolicy(context.Context, *DeleteResourcePolicyRequest) (*DeleteResourcePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourcePolicy not implemented")
}
func (UnimplementedDurosAPIServer) DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedDurosAPIServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*Snapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (UnimplementedDurosAPIServer) GetSnapshot(context.Context, *GetSnapshotRequest) (*Snapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshot not implemented")
}
func (UnimplementedDurosAPIServer) ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSnapshots not implemented")
}
func (UnimplementedDurosAPIServer) DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSnapshot not implemented")
}
func (UnimplementedDurosAPIServer) GetFeatureFlag(context.Context, *GetFeatureFlagRequest) (*FeatureFlagStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureFlag not implemented")
}
func (UnimplementedDurosAPIServer) EnableFeatureFlag(context.Context, *EnableFeatureFlagRequest) (*SetFeatureFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableFeatureFlag not implemented")
}
func (UnimplementedDurosAPIServer) DisableFeatureFlag(context.Context, *DisableFeatureFlagRequest) (*SetFeatureFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableFeatureFlag not implemented")
}
func (UnimplementedDurosAPIServer) ListFeatureFlags(context.Context, *ListFeatureFlagsRequest) (*ListFeatureFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatureFlags not implemented")
}
func (UnimplementedDurosAPIServer) GetClusterConfigParam(context.Context, *GetClusterConfigParamRequest) (*ClusterConfigParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterConfigParam not implemented")
}
func (UnimplementedDurosAPIServer) UpdateClusterConfigParam(context.Context, *UpdateClusterConfigParamRequest) (*UpdateClusterConfigParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterConfigParam not implemented")
}
func (UnimplementedDurosAPIServer) ListClusterConfigParams(context.Context, *ListClusterConfigParamsRequest) (*ListClusterConfigParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterConfigParams not implemented")
}
func (UnimplementedDurosAPIServer) RollbackVolume(context.Context, *RollbackVolumeRequest) (*RollbackVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackVolume not implemented")
}
func (UnimplementedDurosAPIServer) ListChangedBlocks(context.Context, *ListChangedBlocksRequest) (*ListChangedBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChangedBlocks not implemented")
}
func (UnimplementedDurosAPIServer) RotateClusterRootKey(context.Context, *RotateClusterRootKeyRequest) (*RotateClusterRootKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateClusterRootKey not implemented")
}
func (UnimplementedDurosAPIServer) GetClusterRootKey(context.Context, *GetClusterRootKeyRequest) (*GetClusterRootKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterRootKey not implemented")
}
func (UnimplementedDurosAPIServer) CreateIdpConfiguration(context.Context, *CreateIDPConfigurationRequest) (*IDPConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdpConfiguration not implemented")
}
func (UnimplementedDurosAPIServer) DeleteIdpConfiguration(context.Context, *DeleteIDPConfigurationRequest) (*DeleteIDPConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdpConfiguration not implemented")
}
func (UnimplementedDurosAPIServer) UpdateIdpConfiguration(context.Context, *UpdateIDPConfigurationRequest) (*IDPConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdpConfiguration not implemented")
}
func (UnimplementedDurosAPIServer) ListIdpConfigurations(context.Context, *ListIDPConfigurationsRequest) (*ListIDPConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIdpConfigurations not implemented")
}
func (UnimplementedDurosAPIServer) GetIdpConfiguration(context.Context, *GetIDPConfigurationRequest) (*IDPConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdpConfiguration not implemented")
}
func (UnimplementedDurosAPIServer) CreateIdpClientConf(context.Context, *CreateIdpClientConfRequest) (*IdpClientConf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdpClientConf not implemented")
}
func (UnimplementedDurosAPIServer) DeleteIdpClientConf(context.Context, *DeleteIdpClientConfRequest) (*DeleteIdpClientConfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdpClientConf not implemented")
}
func (UnimplementedDurosAPIServer) UpdateIdpClientConf(context.Context, *UpdateIdpClientConfRequest) (*IdpClientConf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdpClientConf not implemented")
}
func (UnimplementedDurosAPIServer) ListIdpClientConfs(context.Context, *ListIdpClientConfsRequest) (*ListIdpClientConfsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIdpClientConfs not implemented")
}
func (UnimplementedDurosAPIServer) GetIdpClientConf(context.Context, *GetIdpClientConfRequest) (*IdpClientConf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdpClientConf not implemented")
}
func (UnimplementedDurosAPIServer) CreateAuthMapEntry(context.Context, *CreateAuthMapEntryRequest) (*AuthMapEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthMapEntry not implemented")
}
func (UnimplementedDurosAPIServer) UpdateAuthMapEntry(context.Context, *UpdateAuthMapEntryRequest) (*AuthMapEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthMapEntry not implemented")
}
func (UnimplementedDurosAPIServer) DeleteAuthMapEntry(context.Context, *DeleteAuthMapEntryRequest) (*DeleteAuthMapEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthMapEntry not implemented")
}
func (UnimplementedDurosAPIServer) GetAuthMapEntry(context.Context, *GetAuthMapEntryRequest) (*AuthMapEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthMapEntry not implemented")
}
func (UnimplementedDurosAPIServer) ListAuthMapEntries(context.Context, *ListAuthMapEntriesRequest) (*ListAuthMapEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthMapEntries not implemented")
}
func (UnimplementedDurosAPIServer) EnableClusterInBandAuth(context.Context, *EnableClusterInBandAuthRequest) (*EnableClusterInBandAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableClusterInBandAuth not implemented")
}
func (UnimplementedDurosAPIServer) DisableClusterInBandAuth(context.Context, *DisableClusterInBandAuthRequest) (*DisableClusterInBandAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableClusterInBandAuth not implemented")
}
func (UnimplementedDurosAPIServer) CreateTrustedHost(context.Context, *CreateTrustedHostRequest) (*TrustedHost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrustedHost not implemented")
}
func (UnimplementedDurosAPIServer) DeleteTrustedHost(context.Context, *DeleteTrustedHostRequest) (*DeleteTrustedHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrustedHost not implemented")
}
func (UnimplementedDurosAPIServer) GetTrustedHost(context.Context, *GetTrustedHostRequest) (*TrustedHost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrustedHost not implemented")
}
func (UnimplementedDurosAPIServer) ListTrustedHosts(context.Context, *ListTrustedHostsRequest) (*ListTrustedHostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrustedHosts not implemented")
}
func (UnimplementedDurosAPIServer) UpdateTrustedHost(context.Context, *UpdateTrustedHostRequest) (*TrustedHost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrustedHost not implemented")
}
func (UnimplementedDurosAPIServer) SetTrustedHostSecret(context.Context, *SetTrustedHostSecretsRequest) (*SetTrustedHostSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTrustedHostSecret not implemented")
}
func (UnimplementedDurosAPIServer) GetTrustedHostSecret(context.Context, *GetTrustedHostSecretsRequest) (*GetTrustedHostSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrustedHostSecret not implemented")
}
func (UnimplementedDurosAPIServer) EnableFederatedAuthentication(context.Context, *EnableFederatedAuthenticationRequest) (*EnableFederatedAuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableFederatedAuthentication not implemented")
}
func (UnimplementedDurosAPIServer) DisableFederatedAuthentication(context.Context, *DisableFederatedAuthenticationRequest) (*DisableFederatedAuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableFederatedAuthentication not implemented")
}
func (UnimplementedDurosAPIServer) testEmbeddedByValue() {}

// UnsafeDurosAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DurosAPIServer will
// result in compilation errors.
type UnsafeDurosAPIServer interface {
	mustEmbedUnimplementedDurosAPIServer()
}

func RegisterDurosAPIServer(s grpc.ServiceRegistrar, srv DurosAPIServer) {
	// If the following call pancis, it indicates UnimplementedDurosAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DurosAPI_ServiceDesc, srv)
}

func _DurosAPI_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_CreateVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateVolume(ctx, req.(*CreateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_DeleteVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteVolume(ctx, req.(*DeleteVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListVolumes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListVolumes(ctx, req.(*ListVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetHost(ctx, req.(*GetHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListHosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListHosts(ctx, req.(*ListHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetVolume(ctx, req.(*GetVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListNodes(ctx, req.(*ListNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListNvmeDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNvmeDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListNvmeDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListNvmeDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListNvmeDevices(ctx, req.(*ListNvmeDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetNvmeDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNvmeDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetNvmeDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetNvmeDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetNvmeDevice(ctx, req.(*GetNvmeDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_FetchLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DurosAPIServer).FetchLogs(m, &grpc.GenericServerStream[LogRequest, httpbody.HttpBody]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DurosAPI_FetchLogsServer = grpc.ServerStreamingServer[httpbody.HttpBody]

func _DurosAPI_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetCluster(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetClusterInfo(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpdateNvmeDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNvmeDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpdateNvmeDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_UpdateNvmeDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpdateNvmeDevice(ctx, req.(*UpdateNvmeDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_AddNvmeDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNvmeDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).AddNvmeDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_AddNvmeDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).AddNvmeDevice(ctx, req.(*AddNvmeDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpdateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpdateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_UpdateVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpdateVolume(ctx, req.(*UpdateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetServer(ctx, req.(*GetServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpgradeServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpgradeServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_UpgradeServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpgradeServer(ctx, req.(*UpgradeServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpgradeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpgradeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_UpgradeCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpgradeCluster(ctx, req.(*UpgradeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_EnableClusterEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableClusterEncryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).EnableClusterEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_EnableClusterEncryption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).EnableClusterEncryption(ctx, req.(*EnableClusterEncryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_CreateServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ReplaceNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ReplaceNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ReplaceNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ReplaceNode(ctx, req.(*ReplaceNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_DeleteServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteServer(ctx, req.(*DeleteServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_EnableServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).EnableServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_EnableServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).EnableServer(ctx, req.(*EnableServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DisableServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DisableServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_DisableServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DisableServer(ctx, req.(*DisableServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_CreateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateCredential(ctx, req.(*CreateCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_DeleteCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteCredential(ctx, req.(*DeleteCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListCredentials(ctx, req.(*ListCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetCredential(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateAdminEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateAdminEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_CreateAdminEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateAdminEndpoint(ctx, req.(*CreateAdminEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteAdminEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteAdminEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_DeleteAdminEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteAdminEndpoint(ctx, req.(*DeleteAdminEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListAdminEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdminEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListAdminEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListAdminEndpoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListAdminEndpoints(ctx, req.(*ListAdminEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpdateAdminEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpdateAdminEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_UpdateAdminEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpdateAdminEndpoint(ctx, req.(*UpdateAdminEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetAdminEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetAdminEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetAdminEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetAdminEndpoint(ctx, req.(*GetAdminEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateResourcePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourcePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateResourcePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_CreateResourcePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateResourcePolicy(ctx, req.(*CreateResourcePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_CreatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreatePolicy(ctx, req.(*CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_UpdatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpdatePolicy(ctx, req.(*UpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpdateResourcePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourcePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpdateResourcePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_UpdateResourcePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpdateResourcePolicy(ctx, req.(*UpdateResourcePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListPolicies(ctx, req.(*ListPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListResourcePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListResourcePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListResourcePolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListResourcePolicies(ctx, req.(*ListResourcePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetResourcePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetResourcePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetResourcePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetResourcePolicy(ctx, req.(*GetResourcePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteResourcePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourcePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteResourcePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_DeleteResourcePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteResourcePolicy(ctx, req.(*DeleteResourcePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_DeletePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeletePolicy(ctx, req.(*DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_CreateSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetSnapshot(ctx, req.(*GetSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListSnapshots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListSnapshots(ctx, req.(*ListSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_DeleteSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteSnapshot(ctx, req.(*DeleteSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetFeatureFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetFeatureFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetFeatureFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetFeatureFlag(ctx, req.(*GetFeatureFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_EnableFeatureFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableFeatureFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).EnableFeatureFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_EnableFeatureFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).EnableFeatureFlag(ctx, req.(*EnableFeatureFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DisableFeatureFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableFeatureFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DisableFeatureFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_DisableFeatureFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DisableFeatureFlag(ctx, req.(*DisableFeatureFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListFeatureFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeatureFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListFeatureFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListFeatureFlags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListFeatureFlags(ctx, req.(*ListFeatureFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetClusterConfigParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterConfigParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetClusterConfigParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetClusterConfigParam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetClusterConfigParam(ctx, req.(*GetClusterConfigParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpdateClusterConfigParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterConfigParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpdateClusterConfigParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_UpdateClusterConfigParam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpdateClusterConfigParam(ctx, req.(*UpdateClusterConfigParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListClusterConfigParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterConfigParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListClusterConfigParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListClusterConfigParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListClusterConfigParams(ctx, req.(*ListClusterConfigParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_RollbackVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).RollbackVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_RollbackVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).RollbackVolume(ctx, req.(*RollbackVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListChangedBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChangedBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListChangedBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListChangedBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListChangedBlocks(ctx, req.(*ListChangedBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_RotateClusterRootKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateClusterRootKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).RotateClusterRootKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_RotateClusterRootKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).RotateClusterRootKey(ctx, req.(*RotateClusterRootKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetClusterRootKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRootKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetClusterRootKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetClusterRootKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetClusterRootKey(ctx, req.(*GetClusterRootKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateIdpConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIDPConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateIdpConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_CreateIdpConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateIdpConfiguration(ctx, req.(*CreateIDPConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteIdpConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIDPConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteIdpConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_DeleteIdpConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteIdpConfiguration(ctx, req.(*DeleteIDPConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpdateIdpConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIDPConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpdateIdpConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_UpdateIdpConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpdateIdpConfiguration(ctx, req.(*UpdateIDPConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListIdpConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIDPConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListIdpConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListIdpConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListIdpConfigurations(ctx, req.(*ListIDPConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetIdpConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIDPConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetIdpConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetIdpConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetIdpConfiguration(ctx, req.(*GetIDPConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateIdpClientConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdpClientConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateIdpClientConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_CreateIdpClientConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateIdpClientConf(ctx, req.(*CreateIdpClientConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteIdpClientConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdpClientConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteIdpClientConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_DeleteIdpClientConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteIdpClientConf(ctx, req.(*DeleteIdpClientConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpdateIdpClientConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIdpClientConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpdateIdpClientConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_UpdateIdpClientConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpdateIdpClientConf(ctx, req.(*UpdateIdpClientConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListIdpClientConfs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIdpClientConfsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListIdpClientConfs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListIdpClientConfs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListIdpClientConfs(ctx, req.(*ListIdpClientConfsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetIdpClientConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdpClientConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetIdpClientConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetIdpClientConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetIdpClientConf(ctx, req.(*GetIdpClientConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateAuthMapEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthMapEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateAuthMapEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_CreateAuthMapEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateAuthMapEntry(ctx, req.(*CreateAuthMapEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpdateAuthMapEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthMapEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpdateAuthMapEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_UpdateAuthMapEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpdateAuthMapEntry(ctx, req.(*UpdateAuthMapEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteAuthMapEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthMapEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteAuthMapEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_DeleteAuthMapEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteAuthMapEntry(ctx, req.(*DeleteAuthMapEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetAuthMapEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthMapEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetAuthMapEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetAuthMapEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetAuthMapEntry(ctx, req.(*GetAuthMapEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListAuthMapEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthMapEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListAuthMapEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListAuthMapEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListAuthMapEntries(ctx, req.(*ListAuthMapEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_EnableClusterInBandAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableClusterInBandAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).EnableClusterInBandAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_EnableClusterInBandAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).EnableClusterInBandAuth(ctx, req.(*EnableClusterInBandAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DisableClusterInBandAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableClusterInBandAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DisableClusterInBandAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_DisableClusterInBandAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DisableClusterInBandAuth(ctx, req.(*DisableClusterInBandAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateTrustedHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrustedHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateTrustedHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_CreateTrustedHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateTrustedHost(ctx, req.(*CreateTrustedHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteTrustedHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrustedHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteTrustedHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_DeleteTrustedHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteTrustedHost(ctx, req.(*DeleteTrustedHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetTrustedHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrustedHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetTrustedHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetTrustedHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetTrustedHost(ctx, req.(*GetTrustedHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListTrustedHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrustedHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListTrustedHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_ListTrustedHosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListTrustedHosts(ctx, req.(*ListTrustedHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpdateTrustedHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrustedHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpdateTrustedHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_UpdateTrustedHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpdateTrustedHost(ctx, req.(*UpdateTrustedHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_SetTrustedHostSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTrustedHostSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).SetTrustedHostSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_SetTrustedHostSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).SetTrustedHostSecret(ctx, req.(*SetTrustedHostSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetTrustedHostSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrustedHostSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetTrustedHostSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_GetTrustedHostSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetTrustedHostSecret(ctx, req.(*GetTrustedHostSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_EnableFederatedAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableFederatedAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).EnableFederatedAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_EnableFederatedAuthentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).EnableFederatedAuthentication(ctx, req.(*EnableFederatedAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DisableFederatedAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableFederatedAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DisableFederatedAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DurosAPI_DisableFederatedAuthentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DisableFederatedAuthentication(ctx, req.(*DisableFederatedAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DurosAPI_ServiceDesc is the grpc.ServiceDesc for DurosAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DurosAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lightbits.api.duros.v2.DurosAPI",
	HandlerType: (*DurosAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _DurosAPI_GetVersion_Handler,
		},
		{
			MethodName: "CreateVolume",
			Handler:    _DurosAPI_CreateVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _DurosAPI_DeleteVolume_Handler,
		},
		{
			MethodName: "ListVolumes",
			Handler:    _DurosAPI_ListVolumes_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _DurosAPI_ListEvents_Handler,
		},
		{
			MethodName: "GetHost",
			Handler:    _DurosAPI_GetHost_Handler,
		},
		{
			MethodName: "ListHosts",
			Handler:    _DurosAPI_ListHosts_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _DurosAPI_GetVolume_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _DurosAPI_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _DurosAPI_GetNode_Handler,
		},
		{
			MethodName: "ListNvmeDevices",
			Handler:    _DurosAPI_ListNvmeDevices_Handler,
		},
		{
			MethodName: "GetNvmeDevice",
			Handler:    _DurosAPI_GetNvmeDevice_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _DurosAPI_GetCluster_Handler,
		},
		{
			MethodName: "GetClusterInfo",
			Handler:    _DurosAPI_GetClusterInfo_Handler,
		},
		{
			MethodName: "UpdateNvmeDevice",
			Handler:    _DurosAPI_UpdateNvmeDevice_Handler,
		},
		{
			MethodName: "AddNvmeDevice",
			Handler:    _DurosAPI_AddNvmeDevice_Handler,
		},
		{
			MethodName: "UpdateVolume",
			Handler:    _DurosAPI_UpdateVolume_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _DurosAPI_GetServer_Handler,
		},
		{
			MethodName: "ListServers",
			Handler:    _DurosAPI_ListServers_Handler,
		},
		{
			MethodName: "UpgradeServer",
			Handler:    _DurosAPI_UpgradeServer_Handler,
		},
		{
			MethodName: "UpgradeCluster",
			Handler:    _DurosAPI_UpgradeCluster_Handler,
		},
		{
			MethodName: "EnableClusterEncryption",
			Handler:    _DurosAPI_EnableClusterEncryption_Handler,
		},
		{
			MethodName: "CreateServer",
			Handler:    _DurosAPI_CreateServer_Handler,
		},
		{
			MethodName: "ReplaceNode",
			Handler:    _DurosAPI_ReplaceNode_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _DurosAPI_DeleteServer_Handler,
		},
		{
			MethodName: "EnableServer",
			Handler:    _DurosAPI_EnableServer_Handler,
		},
		{
			MethodName: "DisableServer",
			Handler:    _DurosAPI_DisableServer_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _DurosAPI_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _DurosAPI_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _DurosAPI_DeleteProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _DurosAPI_ListProjects_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _DurosAPI_GetProject_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _DurosAPI_CreateCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _DurosAPI_DeleteCredential_Handler,
		},
		{
			MethodName: "ListCredentials",
			Handler:    _DurosAPI_ListCredentials_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _DurosAPI_GetCredential_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _DurosAPI_GetRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _DurosAPI_ListRoles_Handler,
		},
		{
			MethodName: "CreateAdminEndpoint",
			Handler:    _DurosAPI_CreateAdminEndpoint_Handler,
		},
		{
			MethodName: "DeleteAdminEndpoint",
			Handler:    _DurosAPI_DeleteAdminEndpoint_Handler,
		},
		{
			MethodName: "ListAdminEndpoints",
			Handler:    _DurosAPI_ListAdminEndpoints_Handler,
		},
		{
			MethodName: "UpdateAdminEndpoint",
			Handler:    _DurosAPI_UpdateAdminEndpoint_Handler,
		},
		{
			MethodName: "GetAdminEndpoint",
			Handler:    _DurosAPI_GetAdminEndpoint_Handler,
		},
		{
			MethodName: "CreateResourcePolicy",
			Handler:    _DurosAPI_CreateResourcePolicy_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _DurosAPI_CreatePolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _DurosAPI_UpdatePolicy_Handler,
		},
		{
			MethodName: "UpdateResourcePolicy",
			Handler:    _DurosAPI_UpdateResourcePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _DurosAPI_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _DurosAPI_ListPolicies_Handler,
		},
		{
			MethodName: "ListResourcePolicies",
			Handler:    _DurosAPI_ListResourcePolicies_Handler,
		},
		{
			MethodName: "GetResourcePolicy",
			Handler:    _DurosAPI_GetResourcePolicy_Handler,
		},
		{
			MethodName: "DeleteResourcePolicy",
			Handler:    _DurosAPI_DeleteResourcePolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _DurosAPI_DeletePolicy_Handler,
		},
		{
			MethodName: "CreateSnapshot",
			Handler:    _DurosAPI_CreateSnapshot_Handler,
		},
		{
			MethodName: "GetSnapshot",
			Handler:    _DurosAPI_GetSnapshot_Handler,
		},
		{
			MethodName: "ListSnapshots",
			Handler:    _DurosAPI_ListSnapshots_Handler,
		},
		{
			MethodName: "DeleteSnapshot",
			Handler:    _DurosAPI_DeleteSnapshot_Handler,
		},
		{
			MethodName: "GetFeatureFlag",
			Handler:    _DurosAPI_GetFeatureFlag_Handler,
		},
		{
			MethodName: "EnableFeatureFlag",
			Handler:    _DurosAPI_EnableFeatureFlag_Handler,
		},
		{
			MethodName: "DisableFeatureFlag",
			Handler:    _DurosAPI_DisableFeatureFlag_Handler,
		},
		{
			MethodName: "ListFeatureFlags",
			Handler:    _DurosAPI_ListFeatureFlags_Handler,
		},
		{
			MethodName: "GetClusterConfigParam",
			Handler:    _DurosAPI_GetClusterConfigParam_Handler,
		},
		{
			MethodName: "UpdateClusterConfigParam",
			Handler:    _DurosAPI_UpdateClusterConfigParam_Handler,
		},
		{
			MethodName: "ListClusterConfigParams",
			Handler:    _DurosAPI_ListClusterConfigParams_Handler,
		},
		{
			MethodName: "RollbackVolume",
			Handler:    _DurosAPI_RollbackVolume_Handler,
		},
		{
			MethodName: "ListChangedBlocks",
			Handler:    _DurosAPI_ListChangedBlocks_Handler,
		},
		{
			MethodName: "RotateClusterRootKey",
			Handler:    _DurosAPI_RotateClusterRootKey_Handler,
		},
		{
			MethodName: "GetClusterRootKey",
			Handler:    _DurosAPI_GetClusterRootKey_Handler,
		},
		{
			MethodName: "CreateIdpConfiguration",
			Handler:    _DurosAPI_CreateIdpConfiguration_Handler,
		},
		{
			MethodName: "DeleteIdpConfiguration",
			Handler:    _DurosAPI_DeleteIdpConfiguration_Handler,
		},
		{
			MethodName: "UpdateIdpConfiguration",
			Handler:    _DurosAPI_UpdateIdpConfiguration_Handler,
		},
		{
			MethodName: "ListIdpConfigurations",
			Handler:    _DurosAPI_ListIdpConfigurations_Handler,
		},
		{
			MethodName: "GetIdpConfiguration",
			Handler:    _DurosAPI_GetIdpConfiguration_Handler,
		},
		{
			MethodName: "CreateIdpClientConf",
			Handler:    _DurosAPI_CreateIdpClientConf_Handler,
		},
		{
			MethodName: "DeleteIdpClientConf",
			Handler:    _DurosAPI_DeleteIdpClientConf_Handler,
		},
		{
			MethodName: "UpdateIdpClientConf",
			Handler:    _DurosAPI_UpdateIdpClientConf_Handler,
		},
		{
			MethodName: "ListIdpClientConfs",
			Handler:    _DurosAPI_ListIdpClientConfs_Handler,
		},
		{
			MethodName: "GetIdpClientConf",
			Handler:    _DurosAPI_GetIdpClientConf_Handler,
		},
		{
			MethodName: "CreateAuthMapEntry",
			Handler:    _DurosAPI_CreateAuthMapEntry_Handler,
		},
		{
			MethodName: "UpdateAuthMapEntry",
			Handler:    _DurosAPI_UpdateAuthMapEntry_Handler,
		},
		{
			MethodName: "DeleteAuthMapEntry",
			Handler:    _DurosAPI_DeleteAuthMapEntry_Handler,
		},
		{
			MethodName: "GetAuthMapEntry",
			Handler:    _DurosAPI_GetAuthMapEntry_Handler,
		},
		{
			MethodName: "ListAuthMapEntries",
			Handler:    _DurosAPI_ListAuthMapEntries_Handler,
		},
		{
			MethodName: "EnableClusterInBandAuth",
			Handler:    _DurosAPI_EnableClusterInBandAuth_Handler,
		},
		{
			MethodName: "DisableClusterInBandAuth",
			Handler:    _DurosAPI_DisableClusterInBandAuth_Handler,
		},
		{
			MethodName: "CreateTrustedHost",
			Handler:    _DurosAPI_CreateTrustedHost_Handler,
		},
		{
			MethodName: "DeleteTrustedHost",
			Handler:    _DurosAPI_DeleteTrustedHost_Handler,
		},
		{
			MethodName: "GetTrustedHost",
			Handler:    _DurosAPI_GetTrustedHost_Handler,
		},
		{
			MethodName: "ListTrustedHosts",
			Handler:    _DurosAPI_ListTrustedHosts_Handler,
		},
		{
			MethodName: "UpdateTrustedHost",
			Handler:    _DurosAPI_UpdateTrustedHost_Handler,
		},
		{
			MethodName: "SetTrustedHostSecret",
			Handler:    _DurosAPI_SetTrustedHostSecret_Handler,
		},
		{
			MethodName: "GetTrustedHostSecret",
			Handler:    _DurosAPI_GetTrustedHostSecret_Handler,
		},
		{
			MethodName: "EnableFederatedAuthentication",
			Handler:    _DurosAPI_EnableFederatedAuthentication_Handler,
		},
		{
			MethodName: "DisableFederatedAuthentication",
			Handler:    _DurosAPI_DisableFederatedAuthentication_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchLogs",
			Handler:       _DurosAPI_FetchLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lightbits/api/duros/v2/durosapiv2.proto",
}
