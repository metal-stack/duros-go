// Code generated by mockery v2.21.1. DO NOT EDIT.

package mocks

import (
	context "context"

	v2 "github.com/metal-stack/duros-go/api/duros/v2"
	mock "github.com/stretchr/testify/mock"
)

// DurosAPIServer is an autogenerated mock type for the DurosAPIServer type
type DurosAPIServer struct {
	mock.Mock
}

// AddNvmeDevice provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) AddNvmeDevice(_a0 context.Context, _a1 *v2.AddNvmeDeviceRequest) (*v2.AddNvmeDeviceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.AddNvmeDeviceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.AddNvmeDeviceRequest) (*v2.AddNvmeDeviceResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.AddNvmeDeviceRequest) *v2.AddNvmeDeviceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.AddNvmeDeviceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.AddNvmeDeviceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAdminEndpoint provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) CreateAdminEndpoint(_a0 context.Context, _a1 *v2.CreateAdminEndpointRequest) (*v2.AdminEndpoint, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.AdminEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateAdminEndpointRequest) (*v2.AdminEndpoint, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateAdminEndpointRequest) *v2.AdminEndpoint); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.AdminEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.CreateAdminEndpointRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCredential provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) CreateCredential(_a0 context.Context, _a1 *v2.CreateCredentialRequest) (*v2.Credential, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateCredentialRequest) (*v2.Credential, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateCredentialRequest) *v2.Credential); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.CreateCredentialRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePolicy provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) CreatePolicy(_a0 context.Context, _a1 *v2.CreatePolicyRequest) (*v2.Policy, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreatePolicyRequest) (*v2.Policy, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreatePolicyRequest) *v2.Policy); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.CreatePolicyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) CreateProject(_a0 context.Context, _a1 *v2.CreateProjectRequest) (*v2.Project, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateProjectRequest) (*v2.Project, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateProjectRequest) *v2.Project); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.CreateProjectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResourcePolicy provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) CreateResourcePolicy(_a0 context.Context, _a1 *v2.CreateResourcePolicyRequest) (*v2.ResourcePolicy, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ResourcePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateResourcePolicyRequest) (*v2.ResourcePolicy, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateResourcePolicyRequest) *v2.ResourcePolicy); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ResourcePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.CreateResourcePolicyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServer provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) CreateServer(_a0 context.Context, _a1 *v2.CreateServerRequest) (*v2.Server, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.Server
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateServerRequest) (*v2.Server, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateServerRequest) *v2.Server); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.CreateServerRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshot provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) CreateSnapshot(_a0 context.Context, _a1 *v2.CreateSnapshotRequest) (*v2.Snapshot, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateSnapshotRequest) (*v2.Snapshot, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateSnapshotRequest) *v2.Snapshot); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.CreateSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVolume provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) CreateVolume(_a0 context.Context, _a1 *v2.CreateVolumeRequest) (*v2.Volume, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateVolumeRequest) (*v2.Volume, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateVolumeRequest) *v2.Volume); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Volume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.CreateVolumeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAdminEndpoint provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) DeleteAdminEndpoint(_a0 context.Context, _a1 *v2.DeleteAdminEndpointRequest) (*v2.DeleteAdminEndpointResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.DeleteAdminEndpointResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteAdminEndpointRequest) (*v2.DeleteAdminEndpointResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteAdminEndpointRequest) *v2.DeleteAdminEndpointResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DeleteAdminEndpointResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.DeleteAdminEndpointRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCredential provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) DeleteCredential(_a0 context.Context, _a1 *v2.DeleteCredentialRequest) (*v2.DeleteCredentialResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.DeleteCredentialResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteCredentialRequest) (*v2.DeleteCredentialResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteCredentialRequest) *v2.DeleteCredentialResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DeleteCredentialResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.DeleteCredentialRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePolicy provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) DeletePolicy(_a0 context.Context, _a1 *v2.DeletePolicyRequest) (*v2.DeletePolicyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.DeletePolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeletePolicyRequest) (*v2.DeletePolicyResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeletePolicyRequest) *v2.DeletePolicyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DeletePolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.DeletePolicyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) DeleteProject(_a0 context.Context, _a1 *v2.DeleteProjectRequest) (*v2.DeleteProjectResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.DeleteProjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteProjectRequest) (*v2.DeleteProjectResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteProjectRequest) *v2.DeleteProjectResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DeleteProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.DeleteProjectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourcePolicy provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) DeleteResourcePolicy(_a0 context.Context, _a1 *v2.DeleteResourcePolicyRequest) (*v2.DeleteResourcePolicyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.DeleteResourcePolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteResourcePolicyRequest) (*v2.DeleteResourcePolicyResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteResourcePolicyRequest) *v2.DeleteResourcePolicyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DeleteResourcePolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.DeleteResourcePolicyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServer provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) DeleteServer(_a0 context.Context, _a1 *v2.DeleteServerRequest) (*v2.DeleteServerResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.DeleteServerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteServerRequest) (*v2.DeleteServerResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteServerRequest) *v2.DeleteServerResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DeleteServerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.DeleteServerRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSnapshot provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) DeleteSnapshot(_a0 context.Context, _a1 *v2.DeleteSnapshotRequest) (*v2.DeleteSnapshotResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.DeleteSnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteSnapshotRequest) (*v2.DeleteSnapshotResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteSnapshotRequest) *v2.DeleteSnapshotResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DeleteSnapshotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.DeleteSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVolume provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) DeleteVolume(_a0 context.Context, _a1 *v2.DeleteVolumeRequest) (*v2.DeleteVolumeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.DeleteVolumeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteVolumeRequest) (*v2.DeleteVolumeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteVolumeRequest) *v2.DeleteVolumeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DeleteVolumeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.DeleteVolumeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableFeatureFlag provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) DisableFeatureFlag(_a0 context.Context, _a1 *v2.DisableFeatureFlagRequest) (*v2.SetFeatureFlagResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.SetFeatureFlagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DisableFeatureFlagRequest) (*v2.SetFeatureFlagResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DisableFeatureFlagRequest) *v2.SetFeatureFlagResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.SetFeatureFlagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.DisableFeatureFlagRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableServer provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) DisableServer(_a0 context.Context, _a1 *v2.DisableServerRequest) (*v2.DisableServerResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.DisableServerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DisableServerRequest) (*v2.DisableServerResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DisableServerRequest) *v2.DisableServerResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DisableServerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.DisableServerRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableFeatureFlag provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) EnableFeatureFlag(_a0 context.Context, _a1 *v2.EnableFeatureFlagRequest) (*v2.SetFeatureFlagResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.SetFeatureFlagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.EnableFeatureFlagRequest) (*v2.SetFeatureFlagResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.EnableFeatureFlagRequest) *v2.SetFeatureFlagResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.SetFeatureFlagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.EnableFeatureFlagRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableNLE provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) EnableNLE(_a0 context.Context, _a1 *v2.EnableNLERequest) (*v2.EnableNLEResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.EnableNLEResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.EnableNLERequest) (*v2.EnableNLEResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.EnableNLERequest) *v2.EnableNLEResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.EnableNLEResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.EnableNLERequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableServer provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) EnableServer(_a0 context.Context, _a1 *v2.EnableServerRequest) (*v2.Server, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.Server
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.EnableServerRequest) (*v2.Server, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.EnableServerRequest) *v2.Server); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.EnableServerRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchLogs provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) FetchLogs(_a0 *v2.LogRequest, _a1 v2.DurosAPI_FetchLogsServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v2.LogRequest, v2.DurosAPI_FetchLogsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAdminEndpoint provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) GetAdminEndpoint(_a0 context.Context, _a1 *v2.GetAdminEndpointRequest) (*v2.AdminEndpoint, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.AdminEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetAdminEndpointRequest) (*v2.AdminEndpoint, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetAdminEndpointRequest) *v2.AdminEndpoint); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.AdminEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetAdminEndpointRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCluster provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) GetCluster(_a0 context.Context, _a1 *v2.GetClusterRequest) (*v2.ClusterInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ClusterInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetClusterRequest) (*v2.ClusterInfo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetClusterRequest) *v2.ClusterInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ClusterInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetClusterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterConfigParam provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) GetClusterConfigParam(_a0 context.Context, _a1 *v2.GetClusterConfigParamRequest) (*v2.ClusterConfigParam, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ClusterConfigParam
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetClusterConfigParamRequest) (*v2.ClusterConfigParam, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetClusterConfigParamRequest) *v2.ClusterConfigParam); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ClusterConfigParam)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetClusterConfigParamRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterInfo provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) GetClusterInfo(_a0 context.Context, _a1 *v2.GetClusterRequest) (*v2.ClusterInfoV2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ClusterInfoV2
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetClusterRequest) (*v2.ClusterInfoV2, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetClusterRequest) *v2.ClusterInfoV2); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ClusterInfoV2)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetClusterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCredential provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) GetCredential(_a0 context.Context, _a1 *v2.GetCredentialRequest) (*v2.Credential, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetCredentialRequest) (*v2.Credential, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetCredentialRequest) *v2.Credential); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetCredentialRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFeatureFlag provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) GetFeatureFlag(_a0 context.Context, _a1 *v2.GetFeatureFlagRequest) (*v2.FeatureFlagStatus, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.FeatureFlagStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetFeatureFlagRequest) (*v2.FeatureFlagStatus, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetFeatureFlagRequest) *v2.FeatureFlagStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.FeatureFlagStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetFeatureFlagRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHost provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) GetHost(_a0 context.Context, _a1 *v2.GetHostRequest) (*v2.ConnectedHost, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ConnectedHost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetHostRequest) (*v2.ConnectedHost, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetHostRequest) *v2.ConnectedHost); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ConnectedHost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetHostRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNode provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) GetNode(_a0 context.Context, _a1 *v2.GetNodeRequest) (*v2.DurosNodeInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.DurosNodeInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetNodeRequest) (*v2.DurosNodeInfo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetNodeRequest) *v2.DurosNodeInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DurosNodeInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNvmeDevice provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) GetNvmeDevice(_a0 context.Context, _a1 *v2.GetNvmeDeviceRequest) (*v2.UserNvmeDevicesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.UserNvmeDevicesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetNvmeDeviceRequest) (*v2.UserNvmeDevicesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetNvmeDeviceRequest) *v2.UserNvmeDevicesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UserNvmeDevicesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetNvmeDeviceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicy provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) GetPolicy(_a0 context.Context, _a1 *v2.GetPolicyRequest) (*v2.Policy, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetPolicyRequest) (*v2.Policy, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetPolicyRequest) *v2.Policy); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetPolicyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) GetProject(_a0 context.Context, _a1 *v2.GetProjectRequest) (*v2.Project, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetProjectRequest) (*v2.Project, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetProjectRequest) *v2.Project); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetProjectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicy provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) GetResourcePolicy(_a0 context.Context, _a1 *v2.GetResourcePolicyRequest) (*v2.ResourcePolicy, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ResourcePolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetResourcePolicyRequest) (*v2.ResourcePolicy, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetResourcePolicyRequest) *v2.ResourcePolicy); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ResourcePolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetResourcePolicyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRole provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) GetRole(_a0 context.Context, _a1 *v2.GetRoleRequest) (*v2.GetRoleResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.GetRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetRoleRequest) (*v2.GetRoleResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetRoleRequest) *v2.GetRoleResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.GetRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetRoleRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServer provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) GetServer(_a0 context.Context, _a1 *v2.GetServerRequest) (*v2.Server, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.Server
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetServerRequest) (*v2.Server, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetServerRequest) *v2.Server); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetServerRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshot provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) GetSnapshot(_a0 context.Context, _a1 *v2.GetSnapshotRequest) (*v2.Snapshot, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetSnapshotRequest) (*v2.Snapshot, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetSnapshotRequest) *v2.Snapshot); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersion provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) GetVersion(_a0 context.Context, _a1 *v2.GetVersionRequest) (*v2.Version, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetVersionRequest) (*v2.Version, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetVersionRequest) *v2.Version); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Version)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetVersionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolume provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) GetVolume(_a0 context.Context, _a1 *v2.GetVolumeRequest) (*v2.Volume, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetVolumeRequest) (*v2.Volume, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetVolumeRequest) *v2.Volume); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Volume)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetVolumeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAdminEndpoints provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) ListAdminEndpoints(_a0 context.Context, _a1 *v2.ListAdminEndpointsRequest) (*v2.ListAdminEndpointsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ListAdminEndpointsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListAdminEndpointsRequest) (*v2.ListAdminEndpointsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListAdminEndpointsRequest) *v2.ListAdminEndpointsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListAdminEndpointsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListAdminEndpointsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusterConfigParams provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) ListClusterConfigParams(_a0 context.Context, _a1 *v2.ListClusterConfigParamsRequest) (*v2.ListClusterConfigParamsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ListClusterConfigParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListClusterConfigParamsRequest) (*v2.ListClusterConfigParamsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListClusterConfigParamsRequest) *v2.ListClusterConfigParamsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListClusterConfigParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListClusterConfigParamsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCredentials provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) ListCredentials(_a0 context.Context, _a1 *v2.ListCredentialsRequest) (*v2.ListCredentialsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ListCredentialsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListCredentialsRequest) (*v2.ListCredentialsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListCredentialsRequest) *v2.ListCredentialsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListCredentialsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListCredentialsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEvents provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) ListEvents(_a0 context.Context, _a1 *v2.ListEventsRequest) (*v2.ListEventsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ListEventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListEventsRequest) (*v2.ListEventsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListEventsRequest) *v2.ListEventsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListEventsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListEventsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFeatureFlags provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) ListFeatureFlags(_a0 context.Context, _a1 *v2.ListFeatureFlagsRequest) (*v2.ListFeatureFlagsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ListFeatureFlagsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListFeatureFlagsRequest) (*v2.ListFeatureFlagsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListFeatureFlagsRequest) *v2.ListFeatureFlagsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListFeatureFlagsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListFeatureFlagsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHosts provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) ListHosts(_a0 context.Context, _a1 *v2.ListHostsRequest) (*v2.ListHostsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ListHostsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListHostsRequest) (*v2.ListHostsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListHostsRequest) *v2.ListHostsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListHostsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListHostsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodes provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) ListNodes(_a0 context.Context, _a1 *v2.ListNodeRequest) (*v2.ListNodesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ListNodesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListNodeRequest) (*v2.ListNodesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListNodeRequest) *v2.ListNodesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListNodesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNvmeDevices provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) ListNvmeDevices(_a0 context.Context, _a1 *v2.ListNvmeDevicesRequest) (*v2.ListNvmeDevicesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ListNvmeDevicesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListNvmeDevicesRequest) (*v2.ListNvmeDevicesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListNvmeDevicesRequest) *v2.ListNvmeDevicesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListNvmeDevicesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListNvmeDevicesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPolicies provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) ListPolicies(_a0 context.Context, _a1 *v2.ListPoliciesRequest) (*v2.ListPoliciesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ListPoliciesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListPoliciesRequest) (*v2.ListPoliciesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListPoliciesRequest) *v2.ListPoliciesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListPoliciesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListPoliciesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) ListProjects(_a0 context.Context, _a1 *v2.ListProjectsRequest) (*v2.ListProjectsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ListProjectsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListProjectsRequest) (*v2.ListProjectsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListProjectsRequest) *v2.ListProjectsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListProjectsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListProjectsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourcePolicies provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) ListResourcePolicies(_a0 context.Context, _a1 *v2.ListResourcePoliciesRequest) (*v2.ListResourcePoliciesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ListResourcePoliciesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListResourcePoliciesRequest) (*v2.ListResourcePoliciesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListResourcePoliciesRequest) *v2.ListResourcePoliciesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListResourcePoliciesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListResourcePoliciesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoles provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) ListRoles(_a0 context.Context, _a1 *v2.ListRolesRequest) (*v2.ListRolesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ListRolesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListRolesRequest) (*v2.ListRolesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListRolesRequest) *v2.ListRolesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListRolesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListRolesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServers provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) ListServers(_a0 context.Context, _a1 *v2.ListServersRequest) (*v2.ListServersResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ListServersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListServersRequest) (*v2.ListServersResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListServersRequest) *v2.ListServersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListServersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListServersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSnapshots provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) ListSnapshots(_a0 context.Context, _a1 *v2.ListSnapshotsRequest) (*v2.ListSnapshotsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ListSnapshotsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListSnapshotsRequest) (*v2.ListSnapshotsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListSnapshotsRequest) *v2.ListSnapshotsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListSnapshotsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListSnapshotsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVolumes provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) ListVolumes(_a0 context.Context, _a1 *v2.ListVolumeRequest) (*v2.ListVolumesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ListVolumesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListVolumeRequest) (*v2.ListVolumesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListVolumeRequest) *v2.ListVolumesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListVolumesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListVolumeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceNode provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) ReplaceNode(_a0 context.Context, _a1 *v2.ReplaceNodeRequest) (*v2.ReplaceNodeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.ReplaceNodeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ReplaceNodeRequest) (*v2.ReplaceNodeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ReplaceNodeRequest) *v2.ReplaceNodeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ReplaceNodeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.ReplaceNodeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackVolume provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) RollbackVolume(_a0 context.Context, _a1 *v2.RollbackVolumeRequest) (*v2.RollbackVolumeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.RollbackVolumeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.RollbackVolumeRequest) (*v2.RollbackVolumeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.RollbackVolumeRequest) *v2.RollbackVolumeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.RollbackVolumeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.RollbackVolumeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdminEndpoint provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) UpdateAdminEndpoint(_a0 context.Context, _a1 *v2.UpdateAdminEndpointRequest) (*v2.AdminEndpoint, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.AdminEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateAdminEndpointRequest) (*v2.AdminEndpoint, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateAdminEndpointRequest) *v2.AdminEndpoint); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.AdminEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpdateAdminEndpointRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterConfigParam provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) UpdateClusterConfigParam(_a0 context.Context, _a1 *v2.UpdateClusterConfigParamRequest) (*v2.UpdateClusterConfigParamResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.UpdateClusterConfigParamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateClusterConfigParamRequest) (*v2.UpdateClusterConfigParamResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateClusterConfigParamRequest) *v2.UpdateClusterConfigParamResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UpdateClusterConfigParamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpdateClusterConfigParamRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNvmeDevice provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) UpdateNvmeDevice(_a0 context.Context, _a1 *v2.UpdateNvmeDeviceRequest) (*v2.UpdateNvmeDeviceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.UpdateNvmeDeviceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateNvmeDeviceRequest) (*v2.UpdateNvmeDeviceResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateNvmeDeviceRequest) *v2.UpdateNvmeDeviceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UpdateNvmeDeviceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpdateNvmeDeviceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePolicy provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) UpdatePolicy(_a0 context.Context, _a1 *v2.UpdatePolicyRequest) (*v2.UpdatePolicyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.UpdatePolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdatePolicyRequest) (*v2.UpdatePolicyResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdatePolicyRequest) *v2.UpdatePolicyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UpdatePolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpdatePolicyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProject provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) UpdateProject(_a0 context.Context, _a1 *v2.UpdateProjectRequest) (*v2.UpdateProjectResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.UpdateProjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateProjectRequest) (*v2.UpdateProjectResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateProjectRequest) *v2.UpdateProjectResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UpdateProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpdateProjectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResourcePolicy provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) UpdateResourcePolicy(_a0 context.Context, _a1 *v2.UpdateResourcePolicyRequest) (*v2.UpdateResourcePolicyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.UpdateResourcePolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateResourcePolicyRequest) (*v2.UpdateResourcePolicyResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateResourcePolicyRequest) *v2.UpdateResourcePolicyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UpdateResourcePolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpdateResourcePolicyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVolume provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) UpdateVolume(_a0 context.Context, _a1 *v2.UpdateVolumeRequest) (*v2.UpdateVolumeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.UpdateVolumeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateVolumeRequest) (*v2.UpdateVolumeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateVolumeRequest) *v2.UpdateVolumeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UpdateVolumeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpdateVolumeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpgradeCluster provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) UpgradeCluster(_a0 context.Context, _a1 *v2.UpgradeClusterRequest) (*v2.UpgradeClusterResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.UpgradeClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpgradeClusterRequest) (*v2.UpgradeClusterResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpgradeClusterRequest) *v2.UpgradeClusterResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UpgradeClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpgradeClusterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpgradeServer provides a mock function with given fields: _a0, _a1
func (_m *DurosAPIServer) UpgradeServer(_a0 context.Context, _a1 *v2.UpgradeServerRequest) (*v2.UpgradeServerResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v2.UpgradeServerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpgradeServerRequest) (*v2.UpgradeServerResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpgradeServerRequest) *v2.UpgradeServerResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UpgradeServerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpgradeServerRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDurosAPIServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewDurosAPIServer creates a new instance of DurosAPIServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDurosAPIServer(t mockConstructorTestingTNewDurosAPIServer) *DurosAPIServer {
	mock := &DurosAPIServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
