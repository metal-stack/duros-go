// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v2 "github.com/metal-stack/duros-go/api/duros/v2"
)

// DurosAPIClient is an autogenerated mock type for the DurosAPIClient type
type DurosAPIClient struct {
	mock.Mock
}

// AddNvmeDevice provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) AddNvmeDevice(ctx context.Context, in *v2.AddNvmeDeviceRequest, opts ...grpc.CallOption) (*v2.AddNvmeDeviceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.AddNvmeDeviceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.AddNvmeDeviceRequest, ...grpc.CallOption) *v2.AddNvmeDeviceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.AddNvmeDeviceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.AddNvmeDeviceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAdminEndpoint provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) CreateAdminEndpoint(ctx context.Context, in *v2.CreateAdminEndpointRequest, opts ...grpc.CallOption) (*v2.AdminEndpoint, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.AdminEndpoint
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateAdminEndpointRequest, ...grpc.CallOption) *v2.AdminEndpoint); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.AdminEndpoint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.CreateAdminEndpointRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCredential provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) CreateCredential(ctx context.Context, in *v2.CreateCredentialRequest, opts ...grpc.CallOption) (*v2.Credential, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.Credential
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateCredentialRequest, ...grpc.CallOption) *v2.Credential); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Credential)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.CreateCredentialRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePolicy provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) CreatePolicy(ctx context.Context, in *v2.CreatePolicyRequest, opts ...grpc.CallOption) (*v2.Policy, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.Policy
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreatePolicyRequest, ...grpc.CallOption) *v2.Policy); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.CreatePolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) CreateProject(ctx context.Context, in *v2.CreateProjectRequest, opts ...grpc.CallOption) (*v2.Project, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.Project
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateProjectRequest, ...grpc.CallOption) *v2.Project); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.CreateProjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResourcePolicy provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) CreateResourcePolicy(ctx context.Context, in *v2.CreateResourcePolicyRequest, opts ...grpc.CallOption) (*v2.ResourcePolicy, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ResourcePolicy
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateResourcePolicyRequest, ...grpc.CallOption) *v2.ResourcePolicy); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ResourcePolicy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.CreateResourcePolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServer provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) CreateServer(ctx context.Context, in *v2.CreateServerRequest, opts ...grpc.CallOption) (*v2.Server, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.Server
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateServerRequest, ...grpc.CallOption) *v2.Server); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Server)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.CreateServerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshot provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) CreateSnapshot(ctx context.Context, in *v2.CreateSnapshotRequest, opts ...grpc.CallOption) (*v2.Snapshot, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.Snapshot
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateSnapshotRequest, ...grpc.CallOption) *v2.Snapshot); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Snapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.CreateSnapshotRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVolume provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) CreateVolume(ctx context.Context, in *v2.CreateVolumeRequest, opts ...grpc.CallOption) (*v2.Volume, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.Volume
	if rf, ok := ret.Get(0).(func(context.Context, *v2.CreateVolumeRequest, ...grpc.CallOption) *v2.Volume); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Volume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.CreateVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAdminEndpoint provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) DeleteAdminEndpoint(ctx context.Context, in *v2.DeleteAdminEndpointRequest, opts ...grpc.CallOption) (*v2.DeleteAdminEndpointResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.DeleteAdminEndpointResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteAdminEndpointRequest, ...grpc.CallOption) *v2.DeleteAdminEndpointResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DeleteAdminEndpointResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.DeleteAdminEndpointRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCredential provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) DeleteCredential(ctx context.Context, in *v2.DeleteCredentialRequest, opts ...grpc.CallOption) (*v2.DeleteCredentialResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.DeleteCredentialResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteCredentialRequest, ...grpc.CallOption) *v2.DeleteCredentialResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DeleteCredentialResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.DeleteCredentialRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePolicy provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) DeletePolicy(ctx context.Context, in *v2.DeletePolicyRequest, opts ...grpc.CallOption) (*v2.DeletePolicyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.DeletePolicyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeletePolicyRequest, ...grpc.CallOption) *v2.DeletePolicyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DeletePolicyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.DeletePolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) DeleteProject(ctx context.Context, in *v2.DeleteProjectRequest, opts ...grpc.CallOption) (*v2.DeleteProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.DeleteProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteProjectRequest, ...grpc.CallOption) *v2.DeleteProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DeleteProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.DeleteProjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourcePolicy provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) DeleteResourcePolicy(ctx context.Context, in *v2.DeleteResourcePolicyRequest, opts ...grpc.CallOption) (*v2.DeleteResourcePolicyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.DeleteResourcePolicyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteResourcePolicyRequest, ...grpc.CallOption) *v2.DeleteResourcePolicyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DeleteResourcePolicyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.DeleteResourcePolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServer provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) DeleteServer(ctx context.Context, in *v2.DeleteServerRequest, opts ...grpc.CallOption) (*v2.DeleteServerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.DeleteServerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteServerRequest, ...grpc.CallOption) *v2.DeleteServerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DeleteServerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.DeleteServerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSnapshot provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) DeleteSnapshot(ctx context.Context, in *v2.DeleteSnapshotRequest, opts ...grpc.CallOption) (*v2.DeleteSnapshotResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.DeleteSnapshotResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteSnapshotRequest, ...grpc.CallOption) *v2.DeleteSnapshotResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DeleteSnapshotResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.DeleteSnapshotRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVolume provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) DeleteVolume(ctx context.Context, in *v2.DeleteVolumeRequest, opts ...grpc.CallOption) (*v2.DeleteVolumeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.DeleteVolumeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DeleteVolumeRequest, ...grpc.CallOption) *v2.DeleteVolumeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DeleteVolumeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.DeleteVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableFeatureFlag provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) DisableFeatureFlag(ctx context.Context, in *v2.DisableFeatureFlagRequest, opts ...grpc.CallOption) (*v2.SetFeatureFlagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.SetFeatureFlagResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DisableFeatureFlagRequest, ...grpc.CallOption) *v2.SetFeatureFlagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.SetFeatureFlagResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.DisableFeatureFlagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableServer provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) DisableServer(ctx context.Context, in *v2.DisableServerRequest, opts ...grpc.CallOption) (*v2.DisableServerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.DisableServerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.DisableServerRequest, ...grpc.CallOption) *v2.DisableServerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DisableServerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.DisableServerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableFeatureFlag provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) EnableFeatureFlag(ctx context.Context, in *v2.EnableFeatureFlagRequest, opts ...grpc.CallOption) (*v2.SetFeatureFlagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.SetFeatureFlagResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.EnableFeatureFlagRequest, ...grpc.CallOption) *v2.SetFeatureFlagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.SetFeatureFlagResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.EnableFeatureFlagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableNLE provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) EnableNLE(ctx context.Context, in *v2.EnableNLERequest, opts ...grpc.CallOption) (*v2.EnableNLEResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.EnableNLEResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.EnableNLERequest, ...grpc.CallOption) *v2.EnableNLEResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.EnableNLEResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.EnableNLERequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableServer provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) EnableServer(ctx context.Context, in *v2.EnableServerRequest, opts ...grpc.CallOption) (*v2.Server, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.Server
	if rf, ok := ret.Get(0).(func(context.Context, *v2.EnableServerRequest, ...grpc.CallOption) *v2.Server); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Server)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.EnableServerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchLogs provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) FetchLogs(ctx context.Context, in *v2.LogRequest, opts ...grpc.CallOption) (v2.DurosAPI_FetchLogsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 v2.DurosAPI_FetchLogsClient
	if rf, ok := ret.Get(0).(func(context.Context, *v2.LogRequest, ...grpc.CallOption) v2.DurosAPI_FetchLogsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2.DurosAPI_FetchLogsClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.LogRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdminEndpoint provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) GetAdminEndpoint(ctx context.Context, in *v2.GetAdminEndpointRequest, opts ...grpc.CallOption) (*v2.AdminEndpoint, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.AdminEndpoint
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetAdminEndpointRequest, ...grpc.CallOption) *v2.AdminEndpoint); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.AdminEndpoint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetAdminEndpointRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCluster provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) GetCluster(ctx context.Context, in *v2.GetClusterRequest, opts ...grpc.CallOption) (*v2.ClusterInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ClusterInfo
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetClusterRequest, ...grpc.CallOption) *v2.ClusterInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ClusterInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetClusterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterConfigParam provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) GetClusterConfigParam(ctx context.Context, in *v2.GetClusterConfigParamRequest, opts ...grpc.CallOption) (*v2.ClusterConfigParam, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ClusterConfigParam
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetClusterConfigParamRequest, ...grpc.CallOption) *v2.ClusterConfigParam); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ClusterConfigParam)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetClusterConfigParamRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterInfo provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) GetClusterInfo(ctx context.Context, in *v2.GetClusterRequest, opts ...grpc.CallOption) (*v2.ClusterInfoV2, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ClusterInfoV2
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetClusterRequest, ...grpc.CallOption) *v2.ClusterInfoV2); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ClusterInfoV2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetClusterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCredential provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) GetCredential(ctx context.Context, in *v2.GetCredentialRequest, opts ...grpc.CallOption) (*v2.Credential, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.Credential
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetCredentialRequest, ...grpc.CallOption) *v2.Credential); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Credential)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetCredentialRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFeatureFlag provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) GetFeatureFlag(ctx context.Context, in *v2.GetFeatureFlagRequest, opts ...grpc.CallOption) (*v2.FeatureFlagStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.FeatureFlagStatus
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetFeatureFlagRequest, ...grpc.CallOption) *v2.FeatureFlagStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.FeatureFlagStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetFeatureFlagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHost provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) GetHost(ctx context.Context, in *v2.GetHostRequest, opts ...grpc.CallOption) (*v2.ConnectedHost, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ConnectedHost
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetHostRequest, ...grpc.CallOption) *v2.ConnectedHost); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ConnectedHost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetHostRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNode provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) GetNode(ctx context.Context, in *v2.GetNodeRequest, opts ...grpc.CallOption) (*v2.DurosNodeInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.DurosNodeInfo
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetNodeRequest, ...grpc.CallOption) *v2.DurosNodeInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.DurosNodeInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetNodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNvmeDevice provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) GetNvmeDevice(ctx context.Context, in *v2.GetNvmeDeviceRequest, opts ...grpc.CallOption) (*v2.UserNvmeDevicesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.UserNvmeDevicesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetNvmeDeviceRequest, ...grpc.CallOption) *v2.UserNvmeDevicesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UserNvmeDevicesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetNvmeDeviceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicy provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) GetPolicy(ctx context.Context, in *v2.GetPolicyRequest, opts ...grpc.CallOption) (*v2.Policy, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.Policy
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetPolicyRequest, ...grpc.CallOption) *v2.Policy); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetPolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) GetProject(ctx context.Context, in *v2.GetProjectRequest, opts ...grpc.CallOption) (*v2.Project, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.Project
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetProjectRequest, ...grpc.CallOption) *v2.Project); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetProjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicy provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) GetResourcePolicy(ctx context.Context, in *v2.GetResourcePolicyRequest, opts ...grpc.CallOption) (*v2.ResourcePolicy, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ResourcePolicy
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetResourcePolicyRequest, ...grpc.CallOption) *v2.ResourcePolicy); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ResourcePolicy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetResourcePolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRole provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) GetRole(ctx context.Context, in *v2.GetRoleRequest, opts ...grpc.CallOption) (*v2.GetRoleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.GetRoleResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetRoleRequest, ...grpc.CallOption) *v2.GetRoleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.GetRoleResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetRoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServer provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) GetServer(ctx context.Context, in *v2.GetServerRequest, opts ...grpc.CallOption) (*v2.Server, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.Server
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetServerRequest, ...grpc.CallOption) *v2.Server); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Server)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetServerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshot provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) GetSnapshot(ctx context.Context, in *v2.GetSnapshotRequest, opts ...grpc.CallOption) (*v2.Snapshot, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.Snapshot
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetSnapshotRequest, ...grpc.CallOption) *v2.Snapshot); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Snapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetSnapshotRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersion provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) GetVersion(ctx context.Context, in *v2.GetVersionRequest, opts ...grpc.CallOption) (*v2.Version, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.Version
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetVersionRequest, ...grpc.CallOption) *v2.Version); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetVersionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolume provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) GetVolume(ctx context.Context, in *v2.GetVolumeRequest, opts ...grpc.CallOption) (*v2.Volume, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.Volume
	if rf, ok := ret.Get(0).(func(context.Context, *v2.GetVolumeRequest, ...grpc.CallOption) *v2.Volume); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Volume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.GetVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAdminEndpoints provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) ListAdminEndpoints(ctx context.Context, in *v2.ListAdminEndpointsRequest, opts ...grpc.CallOption) (*v2.ListAdminEndpointsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ListAdminEndpointsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListAdminEndpointsRequest, ...grpc.CallOption) *v2.ListAdminEndpointsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListAdminEndpointsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListAdminEndpointsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusterConfigParams provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) ListClusterConfigParams(ctx context.Context, in *v2.ListClusterConfigParamsRequest, opts ...grpc.CallOption) (*v2.ListClusterConfigParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ListClusterConfigParamsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListClusterConfigParamsRequest, ...grpc.CallOption) *v2.ListClusterConfigParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListClusterConfigParamsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListClusterConfigParamsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCredentials provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) ListCredentials(ctx context.Context, in *v2.ListCredentialsRequest, opts ...grpc.CallOption) (*v2.ListCredentialsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ListCredentialsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListCredentialsRequest, ...grpc.CallOption) *v2.ListCredentialsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListCredentialsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListCredentialsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEvents provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) ListEvents(ctx context.Context, in *v2.ListEventsRequest, opts ...grpc.CallOption) (*v2.ListEventsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ListEventsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListEventsRequest, ...grpc.CallOption) *v2.ListEventsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListEventsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListEventsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFeatureFlags provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) ListFeatureFlags(ctx context.Context, in *v2.ListFeatureFlagsRequest, opts ...grpc.CallOption) (*v2.ListFeatureFlagsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ListFeatureFlagsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListFeatureFlagsRequest, ...grpc.CallOption) *v2.ListFeatureFlagsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListFeatureFlagsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListFeatureFlagsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHosts provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) ListHosts(ctx context.Context, in *v2.ListHostsRequest, opts ...grpc.CallOption) (*v2.ListHostsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ListHostsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListHostsRequest, ...grpc.CallOption) *v2.ListHostsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListHostsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListHostsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodes provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) ListNodes(ctx context.Context, in *v2.ListNodeRequest, opts ...grpc.CallOption) (*v2.ListNodesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ListNodesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListNodeRequest, ...grpc.CallOption) *v2.ListNodesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListNodesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListNodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNvmeDevices provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) ListNvmeDevices(ctx context.Context, in *v2.ListNvmeDevicesRequest, opts ...grpc.CallOption) (*v2.ListNvmeDevicesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ListNvmeDevicesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListNvmeDevicesRequest, ...grpc.CallOption) *v2.ListNvmeDevicesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListNvmeDevicesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListNvmeDevicesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPolicies provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) ListPolicies(ctx context.Context, in *v2.ListPoliciesRequest, opts ...grpc.CallOption) (*v2.ListPoliciesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ListPoliciesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListPoliciesRequest, ...grpc.CallOption) *v2.ListPoliciesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListPoliciesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListPoliciesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) ListProjects(ctx context.Context, in *v2.ListProjectsRequest, opts ...grpc.CallOption) (*v2.ListProjectsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ListProjectsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListProjectsRequest, ...grpc.CallOption) *v2.ListProjectsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListProjectsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListProjectsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourcePolicies provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) ListResourcePolicies(ctx context.Context, in *v2.ListResourcePoliciesRequest, opts ...grpc.CallOption) (*v2.ListResourcePoliciesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ListResourcePoliciesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListResourcePoliciesRequest, ...grpc.CallOption) *v2.ListResourcePoliciesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListResourcePoliciesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListResourcePoliciesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoles provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) ListRoles(ctx context.Context, in *v2.ListRolesRequest, opts ...grpc.CallOption) (*v2.ListRolesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ListRolesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListRolesRequest, ...grpc.CallOption) *v2.ListRolesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListRolesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListRolesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServers provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) ListServers(ctx context.Context, in *v2.ListServersRequest, opts ...grpc.CallOption) (*v2.ListServersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ListServersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListServersRequest, ...grpc.CallOption) *v2.ListServersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListServersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListServersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSnapshots provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) ListSnapshots(ctx context.Context, in *v2.ListSnapshotsRequest, opts ...grpc.CallOption) (*v2.ListSnapshotsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ListSnapshotsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListSnapshotsRequest, ...grpc.CallOption) *v2.ListSnapshotsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListSnapshotsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListSnapshotsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVolumes provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) ListVolumes(ctx context.Context, in *v2.ListVolumeRequest, opts ...grpc.CallOption) (*v2.ListVolumesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ListVolumesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ListVolumeRequest, ...grpc.CallOption) *v2.ListVolumesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ListVolumesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.ListVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceNode provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) ReplaceNode(ctx context.Context, in *v2.ReplaceNodeRequest, opts ...grpc.CallOption) (*v2.ReplaceNodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.ReplaceNodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.ReplaceNodeRequest, ...grpc.CallOption) *v2.ReplaceNodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.ReplaceNodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.ReplaceNodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackVolume provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) RollbackVolume(ctx context.Context, in *v2.RollbackVolumeRequest, opts ...grpc.CallOption) (*v2.RollbackVolumeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.RollbackVolumeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.RollbackVolumeRequest, ...grpc.CallOption) *v2.RollbackVolumeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.RollbackVolumeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.RollbackVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdminEndpoint provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) UpdateAdminEndpoint(ctx context.Context, in *v2.UpdateAdminEndpointRequest, opts ...grpc.CallOption) (*v2.AdminEndpoint, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.AdminEndpoint
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateAdminEndpointRequest, ...grpc.CallOption) *v2.AdminEndpoint); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.AdminEndpoint)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpdateAdminEndpointRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterConfigParam provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) UpdateClusterConfigParam(ctx context.Context, in *v2.UpdateClusterConfigParamRequest, opts ...grpc.CallOption) (*v2.UpdateClusterConfigParamResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.UpdateClusterConfigParamResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateClusterConfigParamRequest, ...grpc.CallOption) *v2.UpdateClusterConfigParamResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UpdateClusterConfigParamResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpdateClusterConfigParamRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNvmeDevice provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) UpdateNvmeDevice(ctx context.Context, in *v2.UpdateNvmeDeviceRequest, opts ...grpc.CallOption) (*v2.UpdateNvmeDeviceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.UpdateNvmeDeviceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateNvmeDeviceRequest, ...grpc.CallOption) *v2.UpdateNvmeDeviceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UpdateNvmeDeviceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpdateNvmeDeviceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePolicy provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) UpdatePolicy(ctx context.Context, in *v2.UpdatePolicyRequest, opts ...grpc.CallOption) (*v2.UpdatePolicyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.UpdatePolicyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdatePolicyRequest, ...grpc.CallOption) *v2.UpdatePolicyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UpdatePolicyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpdatePolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProject provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) UpdateProject(ctx context.Context, in *v2.UpdateProjectRequest, opts ...grpc.CallOption) (*v2.UpdateProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.UpdateProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateProjectRequest, ...grpc.CallOption) *v2.UpdateProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UpdateProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpdateProjectRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResourcePolicy provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) UpdateResourcePolicy(ctx context.Context, in *v2.UpdateResourcePolicyRequest, opts ...grpc.CallOption) (*v2.UpdateResourcePolicyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.UpdateResourcePolicyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateResourcePolicyRequest, ...grpc.CallOption) *v2.UpdateResourcePolicyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UpdateResourcePolicyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpdateResourcePolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVolume provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) UpdateVolume(ctx context.Context, in *v2.UpdateVolumeRequest, opts ...grpc.CallOption) (*v2.UpdateVolumeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.UpdateVolumeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpdateVolumeRequest, ...grpc.CallOption) *v2.UpdateVolumeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UpdateVolumeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpdateVolumeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpgradeCluster provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) UpgradeCluster(ctx context.Context, in *v2.UpgradeClusterRequest, opts ...grpc.CallOption) (*v2.UpgradeClusterResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.UpgradeClusterResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpgradeClusterRequest, ...grpc.CallOption) *v2.UpgradeClusterResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UpgradeClusterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpgradeClusterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpgradeServer provides a mock function with given fields: ctx, in, opts
func (_m *DurosAPIClient) UpgradeServer(ctx context.Context, in *v2.UpgradeServerRequest, opts ...grpc.CallOption) (*v2.UpgradeServerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v2.UpgradeServerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v2.UpgradeServerRequest, ...grpc.CallOption) *v2.UpgradeServerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.UpgradeServerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v2.UpgradeServerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDurosAPIClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewDurosAPIClient creates a new instance of DurosAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDurosAPIClient(t mockConstructorTestingTNewDurosAPIClient) *DurosAPIClient {
	mock := &DurosAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
