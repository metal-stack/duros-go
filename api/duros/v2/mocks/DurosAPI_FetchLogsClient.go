// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	metadata "google.golang.org/grpc/metadata"

	mock "github.com/stretchr/testify/mock"
)

// DurosAPI_FetchLogsClient is an autogenerated mock type for the DurosAPI_FetchLogsClient type
type DurosAPI_FetchLogsClient struct {
	mock.Mock
}

// CloseSend provides a mock function with given fields:
func (_m *DurosAPI_FetchLogsClient) CloseSend() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Context provides a mock function with given fields:
func (_m *DurosAPI_FetchLogsClient) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Header provides a mock function with given fields:
func (_m *DurosAPI_FetchLogsClient) Header() (metadata.MD, error) {
	ret := _m.Called()

	var r0 metadata.MD
	if rf, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Recv provides a mock function with given fields:
func (_m *DurosAPI_FetchLogsClient) Recv() (*httpbody.HttpBody, error) {
	ret := _m.Called()

	var r0 *httpbody.HttpBody
	if rf, ok := ret.Get(0).(func() *httpbody.HttpBody); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*httpbody.HttpBody)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecvMsg provides a mock function with given fields: m
func (_m *DurosAPI_FetchLogsClient) RecvMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMsg provides a mock function with given fields: m
func (_m *DurosAPI_FetchLogsClient) SendMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Trailer provides a mock function with given fields:
func (_m *DurosAPI_FetchLogsClient) Trailer() metadata.MD {
	ret := _m.Called()

	var r0 metadata.MD
	if rf, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}

	return r0
}

type mockConstructorTestingTNewDurosAPI_FetchLogsClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewDurosAPI_FetchLogsClient creates a new instance of DurosAPI_FetchLogsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDurosAPI_FetchLogsClient(t mockConstructorTestingTNewDurosAPI_FetchLogsClient) *DurosAPI_FetchLogsClient {
	mock := &DurosAPI_FetchLogsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
