// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: lightbits/api/duros/v2/durosapiv2.proto

package v2

import (
	context "context"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CredsType int32

const (
	CredsType_UnknownType     CredsType = 0
	CredsType_RS256PubKey     CredsType = 1
	CredsType_TlsCertChainPem CredsType = 2
	CredsType_TlsPrivKeyPem   CredsType = 3
)

// Enum value maps for CredsType.
var (
	CredsType_name = map[int32]string{
		0: "UnknownType",
		1: "RS256PubKey",
		2: "TlsCertChainPem",
		3: "TlsPrivKeyPem",
	}
	CredsType_value = map[string]int32{
		"UnknownType":     0,
		"RS256PubKey":     1,
		"TlsCertChainPem": 2,
		"TlsPrivKeyPem":   3,
	}
)

func (x CredsType) Enum() *CredsType {
	p := new(CredsType)
	*p = x
	return p
}

func (x CredsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CredsType) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[0].Descriptor()
}

func (CredsType) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[0]
}

func (x CredsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CredsType.Descriptor instead.
func (CredsType) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{0}
}

type ProtectionStateEnum int32

const (
	ProtectionStateEnum_Unknown        ProtectionStateEnum = 0
	ProtectionStateEnum_FullyProtected ProtectionStateEnum = 1
	ProtectionStateEnum_Degraded       ProtectionStateEnum = 2
	ProtectionStateEnum_ReadOnly       ProtectionStateEnum = 3
	ProtectionStateEnum_NotAvailable   ProtectionStateEnum = 4
)

// Enum value maps for ProtectionStateEnum.
var (
	ProtectionStateEnum_name = map[int32]string{
		0: "Unknown",
		1: "FullyProtected",
		2: "Degraded",
		3: "ReadOnly",
		4: "NotAvailable",
	}
	ProtectionStateEnum_value = map[string]int32{
		"Unknown":        0,
		"FullyProtected": 1,
		"Degraded":       2,
		"ReadOnly":       3,
		"NotAvailable":   4,
	}
)

func (x ProtectionStateEnum) Enum() *ProtectionStateEnum {
	p := new(ProtectionStateEnum)
	*p = x
	return p
}

func (x ProtectionStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtectionStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[1].Descriptor()
}

func (ProtectionStateEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[1]
}

func (x ProtectionStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtectionStateEnum.Descriptor instead.
func (ProtectionStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{1}
}

type AdminEndpoint_StateEnum int32

const (
	AdminEndpoint_Unknown  AdminEndpoint_StateEnum = 0
	AdminEndpoint_Creating AdminEndpoint_StateEnum = 1
	AdminEndpoint_Updating AdminEndpoint_StateEnum = 2
	AdminEndpoint_Deleting AdminEndpoint_StateEnum = 3
	AdminEndpoint_Ok       AdminEndpoint_StateEnum = 4
)

// Enum value maps for AdminEndpoint_StateEnum.
var (
	AdminEndpoint_StateEnum_name = map[int32]string{
		0: "Unknown",
		1: "Creating",
		2: "Updating",
		3: "Deleting",
		4: "Ok",
	}
	AdminEndpoint_StateEnum_value = map[string]int32{
		"Unknown":  0,
		"Creating": 1,
		"Updating": 2,
		"Deleting": 3,
		"Ok":       4,
	}
)

func (x AdminEndpoint_StateEnum) Enum() *AdminEndpoint_StateEnum {
	p := new(AdminEndpoint_StateEnum)
	*p = x
	return p
}

func (x AdminEndpoint_StateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdminEndpoint_StateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[2].Descriptor()
}

func (AdminEndpoint_StateEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[2]
}

func (x AdminEndpoint_StateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdminEndpoint_StateEnum.Descriptor instead.
func (AdminEndpoint_StateEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{0, 0}
}

type CreateVolumeRequest_SectorSizeEnum int32

const (
	CreateVolumeRequest_sectorSize_Default CreateVolumeRequest_SectorSizeEnum = 0
	CreateVolumeRequest_sectorSize_512B    CreateVolumeRequest_SectorSizeEnum = 512
	CreateVolumeRequest_sectorSize_4K      CreateVolumeRequest_SectorSizeEnum = 4096
)

// Enum value maps for CreateVolumeRequest_SectorSizeEnum.
var (
	CreateVolumeRequest_SectorSizeEnum_name = map[int32]string{
		0:    "sectorSize_Default",
		512:  "sectorSize_512B",
		4096: "sectorSize_4K",
	}
	CreateVolumeRequest_SectorSizeEnum_value = map[string]int32{
		"sectorSize_Default": 0,
		"sectorSize_512B":    512,
		"sectorSize_4K":      4096,
	}
)

func (x CreateVolumeRequest_SectorSizeEnum) Enum() *CreateVolumeRequest_SectorSizeEnum {
	p := new(CreateVolumeRequest_SectorSizeEnum)
	*p = x
	return p
}

func (x CreateVolumeRequest_SectorSizeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateVolumeRequest_SectorSizeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[3].Descriptor()
}

func (CreateVolumeRequest_SectorSizeEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[3]
}

func (x CreateVolumeRequest_SectorSizeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateVolumeRequest_SectorSizeEnum.Descriptor instead.
func (CreateVolumeRequest_SectorSizeEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{24, 0}
}

type UserNvmeDevicesResponse_StateEnum int32

const (
	UserNvmeDevicesResponse_None       UserNvmeDevicesResponse_StateEnum = 0
	UserNvmeDevicesResponse_Healthy    UserNvmeDevicesResponse_StateEnum = 1
	UserNvmeDevicesResponse_Adding     UserNvmeDevicesResponse_StateEnum = 2
	UserNvmeDevicesResponse_Rebuilding UserNvmeDevicesResponse_StateEnum = 3
	UserNvmeDevicesResponse_Failed     UserNvmeDevicesResponse_StateEnum = 4
)

// Enum value maps for UserNvmeDevicesResponse_StateEnum.
var (
	UserNvmeDevicesResponse_StateEnum_name = map[int32]string{
		0: "None",
		1: "Healthy",
		2: "Adding",
		3: "Rebuilding",
		4: "Failed",
	}
	UserNvmeDevicesResponse_StateEnum_value = map[string]int32{
		"None":       0,
		"Healthy":    1,
		"Adding":     2,
		"Rebuilding": 3,
		"Failed":     4,
	}
)

func (x UserNvmeDevicesResponse_StateEnum) Enum() *UserNvmeDevicesResponse_StateEnum {
	p := new(UserNvmeDevicesResponse_StateEnum)
	*p = x
	return p
}

func (x UserNvmeDevicesResponse_StateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserNvmeDevicesResponse_StateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[4].Descriptor()
}

func (UserNvmeDevicesResponse_StateEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[4]
}

func (x UserNvmeDevicesResponse_StateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserNvmeDevicesResponse_StateEnum.Descriptor instead.
func (UserNvmeDevicesResponse_StateEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{49, 0}
}

type DurosNodeInfo_State int32

const (
	// reserved value, default should return error, rather than a true  state that is incorrect
	DurosNodeInfo_Unknown DurosNodeInfo_State = 0
	// node is completed join cluster flow
	DurosNodeInfo_Active DurosNodeInfo_State = 1
	// node is is the process of coming up (startign required services) and joining cluster
	DurosNodeInfo_Activating DurosNodeInfo_State = 2
	// node is is Inactive (this includes internal states Removing and failed)
	DurosNodeInfo_Inactive DurosNodeInfo_State = 3
	// node is not attched to cluster (none of cluster pgs contain this pg)
	DurosNodeInfo_Unattached DurosNodeInfo_State = 4
	// Attaching node to cluster ongoing (replacing old node in pgs with this node)
	DurosNodeInfo_Attaching DurosNodeInfo_State = 6
	// Detaching node from cluster ongoing (replacing this node in pgs with this a new node)
	DurosNodeInfo_Detaching DurosNodeInfo_State = 7
)

// Enum value maps for DurosNodeInfo_State.
var (
	DurosNodeInfo_State_name = map[int32]string{
		0: "Unknown",
		1: "Active",
		2: "Activating",
		3: "Inactive",
		4: "Unattached",
		6: "Attaching",
		7: "Detaching",
	}
	DurosNodeInfo_State_value = map[string]int32{
		"Unknown":    0,
		"Active":     1,
		"Activating": 2,
		"Inactive":   3,
		"Unattached": 4,
		"Attaching":  6,
		"Detaching":  7,
	}
)

func (x DurosNodeInfo_State) Enum() *DurosNodeInfo_State {
	p := new(DurosNodeInfo_State)
	*p = x
	return p
}

func (x DurosNodeInfo_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DurosNodeInfo_State) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[5].Descriptor()
}

func (DurosNodeInfo_State) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[5]
}

func (x DurosNodeInfo_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DurosNodeInfo_State.Descriptor instead.
func (DurosNodeInfo_State) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{50, 0}
}

// machine readable internal state of the node we want to report to the cluster.
type DurosNodeInfo_StatusEnum int32

const (
	DurosNodeInfo_NoStatus DurosNodeInfo_StatusEnum = 0
	// reported during NodeStateEnum==Adding
	DurosNodeInfo_ConnectivityOK      DurosNodeInfo_StatusEnum = 1
	DurosNodeInfo_ConnectivityProblem DurosNodeInfo_StatusEnum = 2
	// reported during NodeStateEnum==Removing
	DurosNodeInfo_IssuedDeletePeer DurosNodeInfo_StatusEnum = 3
)

// Enum value maps for DurosNodeInfo_StatusEnum.
var (
	DurosNodeInfo_StatusEnum_name = map[int32]string{
		0: "NoStatus",
		1: "ConnectivityOK",
		2: "ConnectivityProblem",
		3: "IssuedDeletePeer",
	}
	DurosNodeInfo_StatusEnum_value = map[string]int32{
		"NoStatus":            0,
		"ConnectivityOK":      1,
		"ConnectivityProblem": 2,
		"IssuedDeletePeer":    3,
	}
)

func (x DurosNodeInfo_StatusEnum) Enum() *DurosNodeInfo_StatusEnum {
	p := new(DurosNodeInfo_StatusEnum)
	*p = x
	return p
}

func (x DurosNodeInfo_StatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DurosNodeInfo_StatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[6].Descriptor()
}

func (DurosNodeInfo_StatusEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[6]
}

func (x DurosNodeInfo_StatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DurosNodeInfo_StatusEnum.Descriptor instead.
func (DurosNodeInfo_StatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{50, 1}
}

type ClusterHealth_State int32

const (
	ClusterHealth_None    ClusterHealth_State = 0
	ClusterHealth_OK      ClusterHealth_State = 1
	ClusterHealth_Warning ClusterHealth_State = 2
	ClusterHealth_Error   ClusterHealth_State = 3
)

// Enum value maps for ClusterHealth_State.
var (
	ClusterHealth_State_name = map[int32]string{
		0: "None",
		1: "OK",
		2: "Warning",
		3: "Error",
	}
	ClusterHealth_State_value = map[string]int32{
		"None":    0,
		"OK":      1,
		"Warning": 2,
		"Error":   3,
	}
)

func (x ClusterHealth_State) Enum() *ClusterHealth_State {
	p := new(ClusterHealth_State)
	*p = x
	return p
}

func (x ClusterHealth_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterHealth_State) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[7].Descriptor()
}

func (ClusterHealth_State) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[7]
}

func (x ClusterHealth_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterHealth_State.Descriptor instead.
func (ClusterHealth_State) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{67, 0}
}

type Volume_StateEnum int32

const (
	Volume_Unknown   Volume_StateEnum = 0
	Volume_Creating  Volume_StateEnum = 1
	Volume_Available Volume_StateEnum = 2
	Volume_Deleting  Volume_StateEnum = 3
	Volume_Deleted   Volume_StateEnum = 4
	Volume_Failed    Volume_StateEnum = 7
	Volume_Updating  Volume_StateEnum = 8
)

// Enum value maps for Volume_StateEnum.
var (
	Volume_StateEnum_name = map[int32]string{
		0: "Unknown",
		1: "Creating",
		2: "Available",
		3: "Deleting",
		4: "Deleted",
		7: "Failed",
		8: "Updating",
	}
	Volume_StateEnum_value = map[string]int32{
		"Unknown":   0,
		"Creating":  1,
		"Available": 2,
		"Deleting":  3,
		"Deleted":   4,
		"Failed":    7,
		"Updating":  8,
	}
)

func (x Volume_StateEnum) Enum() *Volume_StateEnum {
	p := new(Volume_StateEnum)
	*p = x
	return p
}

func (x Volume_StateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Volume_StateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[8].Descriptor()
}

func (Volume_StateEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[8]
}

func (x Volume_StateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Volume_StateEnum.Descriptor instead.
func (Volume_StateEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{68, 0}
}

type Volume_ProtocolEnum int32

const (
	Volume_ProtocolTCP Volume_ProtocolEnum = 0
)

// Enum value maps for Volume_ProtocolEnum.
var (
	Volume_ProtocolEnum_name = map[int32]string{
		0: "ProtocolTCP",
	}
	Volume_ProtocolEnum_value = map[string]int32{
		"ProtocolTCP": 0,
	}
)

func (x Volume_ProtocolEnum) Enum() *Volume_ProtocolEnum {
	p := new(Volume_ProtocolEnum)
	*p = x
	return p
}

func (x Volume_ProtocolEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Volume_ProtocolEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[9].Descriptor()
}

func (Volume_ProtocolEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[9]
}

func (x Volume_ProtocolEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Volume_ProtocolEnum.Descriptor instead.
func (Volume_ProtocolEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{68, 1}
}

type Server_UpgradeStatusEnum int32

const (
	Server_Unknown       Server_UpgradeStatusEnum = 0
	Server_None          Server_UpgradeStatusEnum = 1
	Server_UpgradeFailed Server_UpgradeStatusEnum = 2
	Server_Upgrading     Server_UpgradeStatusEnum = 3
	Server_Rebooting     Server_UpgradeStatusEnum = 4
)

// Enum value maps for Server_UpgradeStatusEnum.
var (
	Server_UpgradeStatusEnum_name = map[int32]string{
		0: "Unknown",
		1: "None",
		2: "UpgradeFailed",
		3: "Upgrading",
		4: "Rebooting",
	}
	Server_UpgradeStatusEnum_value = map[string]int32{
		"Unknown":       0,
		"None":          1,
		"UpgradeFailed": 2,
		"Upgrading":     3,
		"Rebooting":     4,
	}
)

func (x Server_UpgradeStatusEnum) Enum() *Server_UpgradeStatusEnum {
	p := new(Server_UpgradeStatusEnum)
	*p = x
	return p
}

func (x Server_UpgradeStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Server_UpgradeStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[10].Descriptor()
}

func (Server_UpgradeStatusEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[10]
}

func (x Server_UpgradeStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Server_UpgradeStatusEnum.Descriptor instead.
func (Server_UpgradeStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{69, 0}
}

type Server_RiskOfServiceLossEnum int32

const (
	Server_UnknownRiskOfServiceLoss  Server_RiskOfServiceLossEnum = 0
	Server_NoRiskOfServiceLoss       Server_RiskOfServiceLossEnum = 1
	Server_InRiskOfServiceLoss       Server_RiskOfServiceLossEnum = 2
	Server_SourceOfRiskOfServiceLoss Server_RiskOfServiceLossEnum = 3
)

// Enum value maps for Server_RiskOfServiceLossEnum.
var (
	Server_RiskOfServiceLossEnum_name = map[int32]string{
		0: "UnknownRiskOfServiceLoss",
		1: "NoRiskOfServiceLoss",
		2: "InRiskOfServiceLoss",
		3: "SourceOfRiskOfServiceLoss",
	}
	Server_RiskOfServiceLossEnum_value = map[string]int32{
		"UnknownRiskOfServiceLoss":  0,
		"NoRiskOfServiceLoss":       1,
		"InRiskOfServiceLoss":       2,
		"SourceOfRiskOfServiceLoss": 3,
	}
)

func (x Server_RiskOfServiceLossEnum) Enum() *Server_RiskOfServiceLossEnum {
	p := new(Server_RiskOfServiceLossEnum)
	*p = x
	return p
}

func (x Server_RiskOfServiceLossEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Server_RiskOfServiceLossEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[11].Descriptor()
}

func (Server_RiskOfServiceLossEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[11]
}

func (x Server_RiskOfServiceLossEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Server_RiskOfServiceLossEnum.Descriptor instead.
func (Server_RiskOfServiceLossEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{69, 1}
}

type Server_ServerStateEnum int32

const (
	Server_UnknownState Server_ServerStateEnum = 0
	Server_Creating     Server_ServerStateEnum = 1
	Server_Enabled      Server_ServerStateEnum = 2
	Server_Deleting     Server_ServerStateEnum = 3
	Server_Failed       Server_ServerStateEnum = 4
	Server_Disabled     Server_ServerStateEnum = 5
	Server_Enabling     Server_ServerStateEnum = 6
	Server_Disabling    Server_ServerStateEnum = 7
)

// Enum value maps for Server_ServerStateEnum.
var (
	Server_ServerStateEnum_name = map[int32]string{
		0: "UnknownState",
		1: "Creating",
		2: "Enabled",
		3: "Deleting",
		4: "Failed",
		5: "Disabled",
		6: "Enabling",
		7: "Disabling",
	}
	Server_ServerStateEnum_value = map[string]int32{
		"UnknownState": 0,
		"Creating":     1,
		"Enabled":      2,
		"Deleting":     3,
		"Failed":       4,
		"Disabled":     5,
		"Enabling":     6,
		"Disabling":    7,
	}
)

func (x Server_ServerStateEnum) Enum() *Server_ServerStateEnum {
	p := new(Server_ServerStateEnum)
	*p = x
	return p
}

func (x Server_ServerStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Server_ServerStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[12].Descriptor()
}

func (Server_ServerStateEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[12]
}

func (x Server_ServerStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Server_ServerStateEnum.Descriptor instead.
func (Server_ServerStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{69, 2}
}

type AdminEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32   `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Ips  []string `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *AdminEndpoint) Reset() {
	*x = AdminEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminEndpoint) ProtoMessage() {}

func (x *AdminEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminEndpoint.ProtoReflect.Descriptor instead.
func (*AdminEndpoint) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{0}
}

func (x *AdminEndpoint) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AdminEndpoint) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type GetAdminEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *GetAdminEndpointRequest) Reset() {
	*x = GetAdminEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdminEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminEndpointRequest) ProtoMessage() {}

func (x *GetAdminEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminEndpointRequest.ProtoReflect.Descriptor instead.
func (*GetAdminEndpointRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{1}
}

func (x *GetAdminEndpointRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type ListAdminEndpointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminEndpoints []*AdminEndpoint `protobuf:"bytes,1,rep,name=adminEndpoints,proto3" json:"adminEndpoints,omitempty"`
}

func (x *ListAdminEndpointsResponse) Reset() {
	*x = ListAdminEndpointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAdminEndpointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdminEndpointsResponse) ProtoMessage() {}

func (x *ListAdminEndpointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdminEndpointsResponse.ProtoReflect.Descriptor instead.
func (*ListAdminEndpointsResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{2}
}

func (x *ListAdminEndpointsResponse) GetAdminEndpoints() []*AdminEndpoint {
	if x != nil {
		return x.AdminEndpoints
	}
	return nil
}

type ListAdminEndpointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ListAdminEndpointsRequest) Reset() {
	*x = ListAdminEndpointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAdminEndpointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdminEndpointsRequest) ProtoMessage() {}

func (x *ListAdminEndpointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdminEndpointsRequest.ProtoReflect.Descriptor instead.
func (*ListAdminEndpointsRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{3}
}

func (x *ListAdminEndpointsRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type CreateAdminEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32   `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Ips  []string `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *CreateAdminEndpointRequest) Reset() {
	*x = CreateAdminEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAdminEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdminEndpointRequest) ProtoMessage() {}

func (x *CreateAdminEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdminEndpointRequest.ProtoReflect.Descriptor instead.
func (*CreateAdminEndpointRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{4}
}

func (x *CreateAdminEndpointRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *CreateAdminEndpointRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type UpdateAdminEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32   `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Ips  []string `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *UpdateAdminEndpointRequest) Reset() {
	*x = UpdateAdminEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAdminEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdminEndpointRequest) ProtoMessage() {}

func (x *UpdateAdminEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdminEndpointRequest.ProtoReflect.Descriptor instead.
func (*UpdateAdminEndpointRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateAdminEndpointRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *UpdateAdminEndpointRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type DeleteAdminEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *DeleteAdminEndpointRequest) Reset() {
	*x = DeleteAdminEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdminEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdminEndpointRequest) ProtoMessage() {}

func (x *DeleteAdminEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdminEndpointRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdminEndpointRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteAdminEndpointRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type DeleteAdminEndpointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAdminEndpointResponse) Reset() {
	*x = DeleteAdminEndpointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdminEndpointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdminEndpointResponse) ProtoMessage() {}

func (x *DeleteAdminEndpointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdminEndpointResponse.ProtoReflect.Descriptor instead.
func (*DeleteAdminEndpointResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{7}
}

type CreateCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName string    `protobuf:"bytes,1,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ID          string    `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Type        CredsType `protobuf:"varint,3,opt,name=type,proto3,enum=lightbits.api.duros.v2.CredsType" json:"type,omitempty"`
	Payload     []byte    `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CreateCredentialRequest) Reset() {
	*x = CreateCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCredentialRequest) ProtoMessage() {}

func (x *CreateCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCredentialRequest.ProtoReflect.Descriptor instead.
func (*CreateCredentialRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{8}
}

func (x *CreateCredentialRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *CreateCredentialRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CreateCredentialRequest) GetType() CredsType {
	if x != nil {
		return x.Type
	}
	return CredsType_UnknownType
}

func (x *CreateCredentialRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Credential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName string    `protobuf:"bytes,1,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ID          string    `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Type        CredsType `protobuf:"varint,3,opt,name=type,proto3,enum=lightbits.api.duros.v2.CredsType" json:"type,omitempty"`
	Payload     []byte    `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Credential) Reset() {
	*x = Credential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{9}
}

func (x *Credential) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *Credential) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Credential) GetType() CredsType {
	if x != nil {
		return x.Type
	}
	return CredsType_UnknownType
}

func (x *Credential) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type DeleteCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *DeleteCredentialRequest) Reset() {
	*x = DeleteCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCredentialRequest) ProtoMessage() {}

func (x *DeleteCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCredentialRequest.ProtoReflect.Descriptor instead.
func (*DeleteCredentialRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteCredentialRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DeleteCredentialRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type DeleteCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCredentialResponse) Reset() {
	*x = DeleteCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCredentialResponse) ProtoMessage() {}

func (x *DeleteCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCredentialResponse.ProtoReflect.Descriptor instead.
func (*DeleteCredentialResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{11}
}

type ListCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName string `protobuf:"bytes,1,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *ListCredentialsRequest) Reset() {
	*x = ListCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCredentialsRequest) ProtoMessage() {}

func (x *ListCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCredentialsRequest.ProtoReflect.Descriptor instead.
func (*ListCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{12}
}

func (x *ListCredentialsRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type ListCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credentials []*Credential `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *ListCredentialsResponse) Reset() {
	*x = ListCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCredentialsResponse) ProtoMessage() {}

func (x *ListCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCredentialsResponse.ProtoReflect.Descriptor instead.
func (*ListCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{13}
}

func (x *ListCredentialsResponse) GetCredentials() []*Credential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type GetCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *GetCredentialRequest) Reset() {
	*x = GetCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialRequest) ProtoMessage() {}

func (x *GetCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialRequest.ProtoReflect.Descriptor instead.
func (*GetCredentialRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{14}
}

func (x *GetCredentialRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GetCredentialRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type CreateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateProjectRequest) Reset() {
	*x = CreateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectRequest) ProtoMessage() {}

func (x *CreateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{15}
}

func (x *CreateProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProjectRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{16}
}

func (x *Project) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type DeleteProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteProjectRequest) Reset() {
	*x = DeleteProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectRequest) ProtoMessage() {}

func (x *DeleteProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteProjectResponse) Reset() {
	*x = DeleteProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectResponse) ProtoMessage() {}

func (x *DeleteProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectResponse.ProtoReflect.Descriptor instead.
func (*DeleteProjectResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{18}
}

type ListProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListProjectsRequest) Reset() {
	*x = ListProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsRequest) ProtoMessage() {}

func (x *ListProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListProjectsRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{19}
}

type ListProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects []*Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *ListProjectsResponse) Reset() {
	*x = ListProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsResponse) ProtoMessage() {}

func (x *ListProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsResponse.ProtoReflect.Descriptor instead.
func (*ListProjectsResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{20}
}

func (x *ListProjectsResponse) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

type GetProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{21}
}

func (x *GetProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StringList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StringList) Reset() {
	*x = StringList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringList) ProtoMessage() {}

func (x *StringList) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringList.ProtoReflect.Descriptor instead.
func (*StringList) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{22}
}

func (x *StringList) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type GetVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetVersionRequest) Reset() {
	*x = GetVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionRequest) ProtoMessage() {}

func (x *GetVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionRequest.ProtoReflect.Descriptor instead.
func (*GetVersionRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{23}
}

type CreateVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size string `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	// acl
	//
	// Access control list of strings (host NQN). Valid values: list of strings/ALLOW_ANY/ALLOW_NONE
	Acl *StringList `protobuf:"bytes,3,opt,name=acl,proto3" json:"acl,omitempty"`
	// compression
	//
	// valid values: true/enable/enabled or false/disable/disabled
	Compression string `protobuf:"bytes,4,opt,name=compression,proto3" json:"compression,omitempty"`
	//
	ReplicaCount uint32 `protobuf:"varint,5,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	// IPAcl
	//
	// Access control list of IP addresses. Valid values: list of valid IP addresses/ALLOW_ANY/ALLOW_NONE (optional, default: ALLOW_ANY)
	IPAcl *StringList `protobuf:"bytes,6,opt,name=IPAcl,proto3" json:"IPAcl,omitempty"`
	// minReplicas
	//
	// not used
	MinReplicas uint32 `protobuf:"varint,7,opt,name=minReplicas,proto3" json:"minReplicas,omitempty"`
	//
	// volume sector size. Valid values: 4K (default), 512B
	SectorSize CreateVolumeRequest_SectorSizeEnum `protobuf:"varint,8,opt,name=sectorSize,proto3,enum=lightbits.api.duros.v2.CreateVolumeRequest_SectorSizeEnum" json:"sectorSize,omitempty"`
	//
	// project name
	ProjectName string `protobuf:"bytes,9,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *CreateVolumeRequest) Reset() {
	*x = CreateVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVolumeRequest) ProtoMessage() {}

func (x *CreateVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVolumeRequest.ProtoReflect.Descriptor instead.
func (*CreateVolumeRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{24}
}

func (x *CreateVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVolumeRequest) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *CreateVolumeRequest) GetAcl() *StringList {
	if x != nil {
		return x.Acl
	}
	return nil
}

func (x *CreateVolumeRequest) GetCompression() string {
	if x != nil {
		return x.Compression
	}
	return ""
}

func (x *CreateVolumeRequest) GetReplicaCount() uint32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

func (x *CreateVolumeRequest) GetIPAcl() *StringList {
	if x != nil {
		return x.IPAcl
	}
	return nil
}

func (x *CreateVolumeRequest) GetMinReplicas() uint32 {
	if x != nil {
		return x.MinReplicas
	}
	return 0
}

func (x *CreateVolumeRequest) GetSectorSize() CreateVolumeRequest_SectorSizeEnum {
	if x != nil {
		return x.SectorSize
	}
	return CreateVolumeRequest_sectorSize_Default
}

func (x *CreateVolumeRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type DeleteVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectName string `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *DeleteVolumeRequest) Reset() {
	*x = DeleteVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVolumeRequest) ProtoMessage() {}

func (x *DeleteVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVolumeRequest.ProtoReflect.Descriptor instead.
func (*DeleteVolumeRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteVolumeRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *DeleteVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteVolumeRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type DeleteVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteVolumeResponse) Reset() {
	*x = DeleteVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVolumeResponse) ProtoMessage() {}

func (x *DeleteVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVolumeResponse.ProtoReflect.Descriptor instead.
func (*DeleteVolumeResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{26}
}

type EnableServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *EnableServerRequest) Reset() {
	*x = EnableServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableServerRequest) ProtoMessage() {}

func (x *EnableServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableServerRequest.ProtoReflect.Descriptor instead.
func (*EnableServerRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{27}
}

func (x *EnableServerRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type DisableServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// ForceRemove
	//
	// When 'true' bypasses upgradeability (loss of service) check when disabling server
	ForceDisable bool `protobuf:"varint,2,opt,name=ForceDisable,proto3" json:"ForceDisable,omitempty"`
}

func (x *DisableServerRequest) Reset() {
	*x = DisableServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableServerRequest) ProtoMessage() {}

func (x *DisableServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableServerRequest.ProtoReflect.Descriptor instead.
func (*DisableServerRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{28}
}

func (x *DisableServerRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *DisableServerRequest) GetForceDisable() bool {
	if x != nil {
		return x.ForceDisable
	}
	return false
}

type DeleteServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *DeleteServerRequest) Reset() {
	*x = DeleteServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServerRequest) ProtoMessage() {}

func (x *DeleteServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServerRequest.ProtoReflect.Descriptor instead.
func (*DeleteServerRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteServerRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type ReplaceNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcNodeUUID    string `protobuf:"bytes,1,opt,name=SrcNodeUUID,proto3" json:"SrcNodeUUID,omitempty"`
	TargetNodeUUID string `protobuf:"bytes,2,opt,name=TargetNodeUUID,proto3" json:"TargetNodeUUID,omitempty"`
}

func (x *ReplaceNodeRequest) Reset() {
	*x = ReplaceNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceNodeRequest) ProtoMessage() {}

func (x *ReplaceNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceNodeRequest.ProtoReflect.Descriptor instead.
func (*ReplaceNodeRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{30}
}

func (x *ReplaceNodeRequest) GetSrcNodeUUID() string {
	if x != nil {
		return x.SrcNodeUUID
	}
	return ""
}

func (x *ReplaceNodeRequest) GetTargetNodeUUID() string {
	if x != nil {
		return x.TargetNodeUUID
	}
	return ""
}

type CreateServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// serverEndpoints
	//
	// Etcd member endpoint. In current version, only a single point is allowed.
	ServerEndpoints []string `protobuf:"bytes,1,rep,name=serverEndpoints,proto3" json:"serverEndpoints,omitempty"`
	ServerUUID      string   `protobuf:"bytes,2,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	// reuseIP
	//
	// Optional. When true, bypasses validation if given endpoint is used by another server
	ReuseIP bool `protobuf:"varint,3,opt,name=reuseIP,proto3" json:"reuseIP,omitempty"`
}

func (x *CreateServerRequest) Reset() {
	*x = CreateServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServerRequest) ProtoMessage() {}

func (x *CreateServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServerRequest.ProtoReflect.Descriptor instead.
func (*CreateServerRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{31}
}

func (x *CreateServerRequest) GetServerEndpoints() []string {
	if x != nil {
		return x.ServerEndpoints
	}
	return nil
}

func (x *CreateServerRequest) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *CreateServerRequest) GetReuseIP() bool {
	if x != nil {
		return x.ReuseIP
	}
	return false
}

type UpdateVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// acl
	//
	// Access control list of strings (host NQN). Valid values: list of strings/ALLOW_ANY/ALLOW_NONE
	Acl *StringList `protobuf:"bytes,2,opt,name=acl,proto3" json:"acl,omitempty"`
	// IPAcl
	//
	// Access control list of IP addresses. Valid values: list of valid IP addresses/ALLOW_ANY/ALLOW_NONE
	IPAcl *StringList `protobuf:"bytes,3,opt,name=IPAcl,proto3" json:"IPAcl,omitempty"`
	Size  string      `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	// compression
	//
	// valid values: true/enable/enabled or false/disable/disabled
	Compression string `protobuf:"bytes,5,opt,name=compression,proto3" json:"compression,omitempty"`
	// project name
	//
	ProjectName string `protobuf:"bytes,6,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *UpdateVolumeRequest) Reset() {
	*x = UpdateVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVolumeRequest) ProtoMessage() {}

func (x *UpdateVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVolumeRequest.ProtoReflect.Descriptor instead.
func (*UpdateVolumeRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateVolumeRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *UpdateVolumeRequest) GetAcl() *StringList {
	if x != nil {
		return x.Acl
	}
	return nil
}

func (x *UpdateVolumeRequest) GetIPAcl() *StringList {
	if x != nil {
		return x.IPAcl
	}
	return nil
}

func (x *UpdateVolumeRequest) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *UpdateVolumeRequest) GetCompression() string {
	if x != nil {
		return x.Compression
	}
	return ""
}

func (x *UpdateVolumeRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type UpgradeServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// InstallPkgUri
	//
	// URI of LightOS package to install
	InstallPkgUri string `protobuf:"bytes,2,opt,name=InstallPkgUri,proto3" json:"InstallPkgUri,omitempty"`
	// ForceUpgrade
	//
	// Optional. When true, bypasses the upgradrability (loss of service) check.
	ForceUpgrade bool `protobuf:"varint,3,opt,name=ForceUpgrade,proto3" json:"ForceUpgrade,omitempty"`
}

func (x *UpgradeServerRequest) Reset() {
	*x = UpgradeServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeServerRequest) ProtoMessage() {}

func (x *UpgradeServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeServerRequest.ProtoReflect.Descriptor instead.
func (*UpgradeServerRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{33}
}

func (x *UpgradeServerRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *UpgradeServerRequest) GetInstallPkgUri() string {
	if x != nil {
		return x.InstallPkgUri
	}
	return ""
}

func (x *UpgradeServerRequest) GetForceUpgrade() bool {
	if x != nil {
		return x.ForceUpgrade
	}
	return false
}

type UpgradeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InstallPkgUri
	//
	// URI of LightOS package to install
	InstallPkgUri string `protobuf:"bytes,1,opt,name=InstallPkgUri,proto3" json:"InstallPkgUri,omitempty"`
	// UUIDs
	//
	// Optional. Servers with given UUIDs are upgraded. If not given, all servers in the cluster are upgraded according to upgradeablity (loss of service) check.
	UUIDs []string `protobuf:"bytes,2,rep,name=UUIDs,proto3" json:"UUIDs,omitempty"`
}

func (x *UpgradeClusterRequest) Reset() {
	*x = UpgradeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeClusterRequest) ProtoMessage() {}

func (x *UpgradeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeClusterRequest.ProtoReflect.Descriptor instead.
func (*UpgradeClusterRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{34}
}

func (x *UpgradeClusterRequest) GetInstallPkgUri() string {
	if x != nil {
		return x.InstallPkgUri
	}
	return ""
}

func (x *UpgradeClusterRequest) GetUUIDs() []string {
	if x != nil {
		return x.UUIDs
	}
	return nil
}

type GetClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{35}
}

type UpdateNvmeDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUUID   string `protobuf:"bytes,1,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	SerialNumber string `protobuf:"bytes,2,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	LedPattern   string `protobuf:"bytes,3,opt,name=ledPattern,proto3" json:"ledPattern,omitempty"`
}

func (x *UpdateNvmeDeviceRequest) Reset() {
	*x = UpdateNvmeDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNvmeDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNvmeDeviceRequest) ProtoMessage() {}

func (x *UpdateNvmeDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNvmeDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateNvmeDeviceRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateNvmeDeviceRequest) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *UpdateNvmeDeviceRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *UpdateNvmeDeviceRequest) GetLedPattern() string {
	if x != nil {
		return x.LedPattern
	}
	return ""
}

type AddNvmeDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber string `protobuf:"bytes,1,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	NodeUUID     string `protobuf:"bytes,2,opt,name=nodeUUID,proto3" json:"nodeUUID,omitempty"`
}

func (x *AddNvmeDeviceRequest) Reset() {
	*x = AddNvmeDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNvmeDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNvmeDeviceRequest) ProtoMessage() {}

func (x *AddNvmeDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNvmeDeviceRequest.ProtoReflect.Descriptor instead.
func (*AddNvmeDeviceRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{37}
}

func (x *AddNvmeDeviceRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *AddNvmeDeviceRequest) GetNodeUUID() string {
	if x != nil {
		return x.NodeUUID
	}
	return ""
}

type GetHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostNQN string `protobuf:"bytes,1,opt,name=hostNQN,proto3" json:"hostNQN,omitempty"`
}

func (x *GetHostRequest) Reset() {
	*x = GetHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostRequest) ProtoMessage() {}

func (x *GetHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostRequest.ProtoReflect.Descriptor instead.
func (*GetHostRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{38}
}

func (x *GetHostRequest) GetHostNQN() string {
	if x != nil {
		return x.HostNQN
	}
	return ""
}

type ListHostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostNQN    string `protobuf:"bytes,1,opt,name=hostNQN,proto3" json:"hostNQN,omitempty"`
	VolumeUUID string `protobuf:"bytes,2,opt,name=volumeUUID,proto3" json:"volumeUUID,omitempty"`
}

func (x *ListHostsRequest) Reset() {
	*x = ListHostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostsRequest) ProtoMessage() {}

func (x *ListHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostsRequest.ProtoReflect.Descriptor instead.
func (*ListHostsRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{39}
}

func (x *ListHostsRequest) GetHostNQN() string {
	if x != nil {
		return x.HostNQN
	}
	return ""
}

func (x *ListHostsRequest) GetVolumeUUID() string {
	if x != nil {
		return x.VolumeUUID
	}
	return ""
}

type ListHostsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectedHosts []*ConnectedHost `protobuf:"bytes,1,rep,name=connectedHosts,proto3" json:"connectedHosts,omitempty"`
}

func (x *ListHostsResponse) Reset() {
	*x = ListHostsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostsResponse) ProtoMessage() {}

func (x *ListHostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostsResponse.ProtoReflect.Descriptor instead.
func (*ListHostsResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{40}
}

func (x *ListHostsResponse) GetConnectedHosts() []*ConnectedHost {
	if x != nil {
		return x.ConnectedHosts
	}
	return nil
}

type ListNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UUID          string `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	FailureDomain string `protobuf:"bytes,3,opt,name=failureDomain,proto3" json:"failureDomain,omitempty"`
}

func (x *ListNodeRequest) Reset() {
	*x = ListNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeRequest) ProtoMessage() {}

func (x *ListNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeRequest.ProtoReflect.Descriptor instead.
func (*ListNodeRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{41}
}

func (x *ListNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListNodeRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ListNodeRequest) GetFailureDomain() string {
	if x != nil {
		return x.FailureDomain
	}
	return ""
}

type GetVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectName string `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *GetVolumeRequest) Reset() {
	*x = GetVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVolumeRequest) ProtoMessage() {}

func (x *GetVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVolumeRequest.ProtoReflect.Descriptor instead.
func (*GetVolumeRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{42}
}

func (x *GetVolumeRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *GetVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetVolumeRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type GetNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *GetNodeRequest) Reset() {
	*x = GetNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeRequest) ProtoMessage() {}

func (x *GetNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeRequest.ProtoReflect.Descriptor instead.
func (*GetNodeRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{43}
}

func (x *GetNodeRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type ListVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID          string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FailureDomain string `protobuf:"bytes,3,opt,name=failureDomain,proto3" json:"failureDomain,omitempty"`
	// offsetUUID
	//
	// Optional. When provided, returned list starts with next to offsetUUID volume.
	OffsetUUID string `protobuf:"bytes,4,opt,name=offsetUUID,proto3" json:"offsetUUID,omitempty"`
	// limit
	//
	// Optional. Limits the number of volumes in the response.
	Limit int64 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	//
	ProjectName string `protobuf:"bytes,6,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *ListVolumeRequest) Reset() {
	*x = ListVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVolumeRequest) ProtoMessage() {}

func (x *ListVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVolumeRequest.ProtoReflect.Descriptor instead.
func (*ListVolumeRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{44}
}

func (x *ListVolumeRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ListVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListVolumeRequest) GetFailureDomain() string {
	if x != nil {
		return x.FailureDomain
	}
	return ""
}

func (x *ListVolumeRequest) GetOffsetUUID() string {
	if x != nil {
		return x.OffsetUUID
	}
	return ""
}

func (x *ListVolumeRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListVolumeRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type ListNvmeDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeUUID   string `protobuf:"bytes,1,opt,name=nodeUUID,proto3" json:"nodeUUID,omitempty"`
	ServerUUID string `protobuf:"bytes,2,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
}

func (x *ListNvmeDevicesRequest) Reset() {
	*x = ListNvmeDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmeDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmeDevicesRequest) ProtoMessage() {}

func (x *ListNvmeDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmeDevicesRequest.ProtoReflect.Descriptor instead.
func (*ListNvmeDevicesRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{45}
}

func (x *ListNvmeDevicesRequest) GetNodeUUID() string {
	if x != nil {
		return x.NodeUUID
	}
	return ""
}

func (x *ListNvmeDevicesRequest) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

type GetNvmeDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serial string `protobuf:"bytes,1,opt,name=Serial,proto3" json:"Serial,omitempty"`
}

func (x *GetNvmeDeviceRequest) Reset() {
	*x = GetNvmeDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNvmeDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNvmeDeviceRequest) ProtoMessage() {}

func (x *GetNvmeDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNvmeDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetNvmeDeviceRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{46}
}

func (x *GetNvmeDeviceRequest) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

type ListNvmeDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NvmeDevices []*UserNvmeDevicesResponse `protobuf:"bytes,1,rep,name=NvmeDevices,proto3" json:"NvmeDevices,omitempty"`
}

func (x *ListNvmeDevicesResponse) Reset() {
	*x = ListNvmeDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmeDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmeDevicesResponse) ProtoMessage() {}

func (x *ListNvmeDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmeDevicesResponse.ProtoReflect.Descriptor instead.
func (*ListNvmeDevicesResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{47}
}

func (x *ListNvmeDevicesResponse) GetNvmeDevices() []*UserNvmeDevicesResponse {
	if x != nil {
		return x.NvmeDevices
	}
	return nil
}

type ConnectedHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostNQN   string `protobuf:"bytes,1,opt,name=hostNQN,proto3" json:"hostNQN,omitempty"`
	IPAddress string `protobuf:"bytes,2,opt,name=iPAddress,proto3" json:"iPAddress,omitempty"`
	Hostname  string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	//volumeUUIDs
	//
	// list of volumes to which this host connects to
	VolumeUUIDs []string `protobuf:"bytes,4,rep,name=volumeUUIDs,proto3" json:"volumeUUIDs,omitempty"`
}

func (x *ConnectedHost) Reset() {
	*x = ConnectedHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectedHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectedHost) ProtoMessage() {}

func (x *ConnectedHost) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectedHost.ProtoReflect.Descriptor instead.
func (*ConnectedHost) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{48}
}

func (x *ConnectedHost) GetHostNQN() string {
	if x != nil {
		return x.HostNQN
	}
	return ""
}

func (x *ConnectedHost) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *ConnectedHost) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ConnectedHost) GetVolumeUUIDs() []string {
	if x != nil {
		return x.VolumeUUIDs
	}
	return nil
}

type UserNvmeDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total capacity of the device in bytes
	Size uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// The numa node ID this device is associated with
	NumaNodeID uint64 `protobuf:"varint,2,opt,name=numaNodeID,proto3" json:"numaNodeID,omitempty"`
	// model
	//
	// Model string of the device, if exists
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// serial
	//
	// Serial of the block device, if exists
	Serial string `protobuf:"bytes,4,opt,name=serial,proto3" json:"serial,omitempty"`
	// server uuid
	//
	// The UUID of the server to which the block device is installed
	ServerUUID string `protobuf:"bytes,5,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	// device state
	//
	// Describes the state of the device, unmanaged device state will be None
	State UserNvmeDevicesResponse_StateEnum `protobuf:"varint,6,opt,name=state,proto3,enum=lightbits.api.duros.v2.UserNvmeDevicesResponse_StateEnum" json:"state,omitempty"`
	// device time of failure
	//
	// Timestamp that will be updated in case the device have failed
	FailureTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=failureTime,proto3" json:"failureTime,omitempty"`
	// device rebuild completion time
	//
	// Timestamp that will be updated once gftl have completed
	// to rebuild all the data that the device had, and we are safe
	// for second failure
	RebuildCompletionTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=rebuildCompletionTime,proto3" json:"rebuildCompletionTime,omitempty"`
	// name
	//
	// Device name or address
	Name string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// node uuid that manages the device
	//
	// The UUID of the node that manages the device, empty string if the device is not managed
	NodeUUID string `protobuf:"bytes,12,opt,name=nodeUUID,proto3" json:"nodeUUID,omitempty"`
	// Etag
	//
	// identifier for a specific version of a resource
	ETag string `protobuf:"bytes,13,opt,name=ETag,proto3" json:"ETag,omitempty"`
}

func (x *UserNvmeDevicesResponse) Reset() {
	*x = UserNvmeDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNvmeDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNvmeDevicesResponse) ProtoMessage() {}

func (x *UserNvmeDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNvmeDevicesResponse.ProtoReflect.Descriptor instead.
func (*UserNvmeDevicesResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{49}
}

func (x *UserNvmeDevicesResponse) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *UserNvmeDevicesResponse) GetNumaNodeID() uint64 {
	if x != nil {
		return x.NumaNodeID
	}
	return 0
}

func (x *UserNvmeDevicesResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *UserNvmeDevicesResponse) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *UserNvmeDevicesResponse) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *UserNvmeDevicesResponse) GetState() UserNvmeDevicesResponse_StateEnum {
	if x != nil {
		return x.State
	}
	return UserNvmeDevicesResponse_None
}

func (x *UserNvmeDevicesResponse) GetFailureTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FailureTime
	}
	return nil
}

func (x *UserNvmeDevicesResponse) GetRebuildCompletionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RebuildCompletionTime
	}
	return nil
}

func (x *UserNvmeDevicesResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserNvmeDevicesResponse) GetNodeUUID() string {
	if x != nil {
		return x.NodeUUID
	}
	return ""
}

func (x *UserNvmeDevicesResponse) GetETag() string {
	if x != nil {
		return x.ETag
	}
	return ""
}

type DurosNodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UUID   string                   `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	State  DurosNodeInfo_State      `protobuf:"varint,3,opt,name=state,proto3,enum=lightbits.api.duros.v2.DurosNodeInfo_State" json:"state,omitempty"`
	Status DurosNodeInfo_StatusEnum `protobuf:"varint,4,opt,name=status,proto3,enum=lightbits.api.duros.v2.DurosNodeInfo_StatusEnum" json:"status,omitempty"`
	// peer <ip>:<port> service datapath IP
	NvmeEndpoint         string             `protobuf:"bytes,5,opt,name=nvmeEndpoint,proto3" json:"nvmeEndpoint,omitempty"`
	FailureDomains       []string           `protobuf:"bytes,6,rep,name=failureDomains,proto3" json:"failureDomains,omitempty"`
	FailureInfo          string             `protobuf:"bytes,7,opt,name=failureInfo,proto3" json:"failureInfo,omitempty"`
	Hostname             string             `protobuf:"bytes,9,opt,name=hostname,proto3" json:"hostname,omitempty"`
	InLocalRebuild       bool               `protobuf:"varint,10,opt,name=inLocalRebuild,proto3" json:"inLocalRebuild,omitempty"`
	LocalRebuildProgress uint32             `protobuf:"varint,11,opt,name=localRebuildProgress,proto3" json:"localRebuildProgress,omitempty"`
	NumManagedDevices    int32              `protobuf:"varint,12,opt,name=numManagedDevices,proto3" json:"numManagedDevices,omitempty"`
	MaxNvmeDevices       uint32             `protobuf:"varint,13,opt,name=maxNvmeDevices,proto3" json:"maxNvmeDevices,omitempty"`
	Ec                   bool               `protobuf:"varint,14,opt,name=ec,proto3" json:"ec,omitempty"`
	Statistics           *NodeStatisticsApi `protobuf:"bytes,15,opt,name=statistics,proto3" json:"statistics,omitempty"`
	ServerUUID           string             `protobuf:"bytes,16,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	// Etag
	//
	// identifier for a specific version of a resource
	ETag            string `protobuf:"bytes,17,opt,name=ETag,proto3" json:"ETag,omitempty"`
	ReadOnly        bool   `protobuf:"varint,18,opt,name=readOnly,proto3" json:"readOnly,omitempty"`
	PowerupProgress uint32 `protobuf:"varint,19,opt,name=powerupProgress,proto3" json:"powerupProgress,omitempty"`
}

func (x *DurosNodeInfo) Reset() {
	*x = DurosNodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DurosNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurosNodeInfo) ProtoMessage() {}

func (x *DurosNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurosNodeInfo.ProtoReflect.Descriptor instead.
func (*DurosNodeInfo) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{50}
}

func (x *DurosNodeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DurosNodeInfo) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *DurosNodeInfo) GetState() DurosNodeInfo_State {
	if x != nil {
		return x.State
	}
	return DurosNodeInfo_Unknown
}

func (x *DurosNodeInfo) GetStatus() DurosNodeInfo_StatusEnum {
	if x != nil {
		return x.Status
	}
	return DurosNodeInfo_NoStatus
}

func (x *DurosNodeInfo) GetNvmeEndpoint() string {
	if x != nil {
		return x.NvmeEndpoint
	}
	return ""
}

func (x *DurosNodeInfo) GetFailureDomains() []string {
	if x != nil {
		return x.FailureDomains
	}
	return nil
}

func (x *DurosNodeInfo) GetFailureInfo() string {
	if x != nil {
		return x.FailureInfo
	}
	return ""
}

func (x *DurosNodeInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DurosNodeInfo) GetInLocalRebuild() bool {
	if x != nil {
		return x.InLocalRebuild
	}
	return false
}

func (x *DurosNodeInfo) GetLocalRebuildProgress() uint32 {
	if x != nil {
		return x.LocalRebuildProgress
	}
	return 0
}

func (x *DurosNodeInfo) GetNumManagedDevices() int32 {
	if x != nil {
		return x.NumManagedDevices
	}
	return 0
}

func (x *DurosNodeInfo) GetMaxNvmeDevices() uint32 {
	if x != nil {
		return x.MaxNvmeDevices
	}
	return 0
}

func (x *DurosNodeInfo) GetEc() bool {
	if x != nil {
		return x.Ec
	}
	return false
}

func (x *DurosNodeInfo) GetStatistics() *NodeStatisticsApi {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *DurosNodeInfo) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *DurosNodeInfo) GetETag() string {
	if x != nil {
		return x.ETag
	}
	return ""
}

func (x *DurosNodeInfo) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *DurosNodeInfo) GetPowerupProgress() uint32 {
	if x != nil {
		return x.PowerupProgress
	}
	return 0
}

type ListNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*DurosNodeInfo `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ListNodesResponse) Reset() {
	*x = ListNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesResponse) ProtoMessage() {}

func (x *ListNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesResponse.ProtoReflect.Descriptor instead.
func (*ListNodesResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{51}
}

func (x *ListNodesResponse) GetNodes() []*DurosNodeInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type ListVolumesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volumes []*Volume `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *ListVolumesResponse) Reset() {
	*x = ListVolumesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVolumesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVolumesResponse) ProtoMessage() {}

func (x *ListVolumesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVolumesResponse.ProtoReflect.Descriptor instead.
func (*ListVolumesResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{52}
}

func (x *ListVolumesResponse) GetVolumes() []*Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type UpdateNvmeDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateNvmeDeviceResponse) Reset() {
	*x = UpdateNvmeDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNvmeDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNvmeDeviceResponse) ProtoMessage() {}

func (x *UpdateNvmeDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNvmeDeviceResponse.ProtoReflect.Descriptor instead.
func (*UpdateNvmeDeviceResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{53}
}

type AddNvmeDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddNvmeDeviceResponse) Reset() {
	*x = AddNvmeDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNvmeDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNvmeDeviceResponse) ProtoMessage() {}

func (x *AddNvmeDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNvmeDeviceResponse.ProtoReflect.Descriptor instead.
func (*AddNvmeDeviceResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{54}
}

type UpdateVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateVolumeResponse) Reset() {
	*x = UpdateVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVolumeResponse) ProtoMessage() {}

func (x *UpdateVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVolumeResponse.ProtoReflect.Descriptor instead.
func (*UpdateVolumeResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{55}
}

type UpgradeServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpgradeServerResponse) Reset() {
	*x = UpgradeServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeServerResponse) ProtoMessage() {}

func (x *UpgradeServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeServerResponse.ProtoReflect.Descriptor instead.
func (*UpgradeServerResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{56}
}

type UpgradeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpgradeClusterResponse) Reset() {
	*x = UpgradeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeClusterResponse) ProtoMessage() {}

func (x *UpgradeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeClusterResponse.ProtoReflect.Descriptor instead.
func (*UpgradeClusterResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{57}
}

type ReplaceNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplaceNodeResponse) Reset() {
	*x = ReplaceNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceNodeResponse) ProtoMessage() {}

func (x *ReplaceNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceNodeResponse.ProtoReflect.Descriptor instead.
func (*ReplaceNodeResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{58}
}

type DeleteServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteServerResponse) Reset() {
	*x = DeleteServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServerResponse) ProtoMessage() {}

func (x *DeleteServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServerResponse.ProtoReflect.Descriptor instead.
func (*DeleteServerResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{59}
}

type DisableServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableServerResponse) Reset() {
	*x = DisableServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableServerResponse) ProtoMessage() {}

func (x *DisableServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableServerResponse.ProtoReflect.Descriptor instead.
func (*DisableServerResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{60}
}

type ListServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID              string                       `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name              string                       `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	RiskOfServiceLoss Server_RiskOfServiceLossEnum `protobuf:"varint,3,opt,name=RiskOfServiceLoss,proto3,enum=lightbits.api.duros.v2.Server_RiskOfServiceLossEnum" json:"RiskOfServiceLoss,omitempty"`
}

func (x *ListServersRequest) Reset() {
	*x = ListServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServersRequest) ProtoMessage() {}

func (x *ListServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServersRequest.ProtoReflect.Descriptor instead.
func (*ListServersRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{61}
}

func (x *ListServersRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ListServersRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListServersRequest) GetRiskOfServiceLoss() Server_RiskOfServiceLossEnum {
	if x != nil {
		return x.RiskOfServiceLoss
	}
	return Server_UnknownRiskOfServiceLoss
}

type GetServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *GetServerRequest) Reset() {
	*x = GetServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerRequest) ProtoMessage() {}

func (x *GetServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerRequest.ProtoReflect.Descriptor instead.
func (*GetServerRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{62}
}

func (x *GetServerRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type ListServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *ListServersResponse) Reset() {
	*x = ListServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServersResponse) ProtoMessage() {}

func (x *ListServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServersResponse.ProtoReflect.Descriptor instead.
func (*ListServersResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{63}
}

func (x *ListServersResponse) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//latest user API version
	ApiVersion string `protobuf:"bytes,4,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{64}
}

func (x *Version) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

type ClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID                 string                `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	SubsystemNQN         string                `protobuf:"bytes,2,opt,name=subsystemNQN,proto3" json:"subsystemNQN,omitempty"`
	CurrentMaxReplicas   uint32                `protobuf:"varint,3,opt,name=currentMaxReplicas,proto3" json:"currentMaxReplicas,omitempty"`
	SupportedMaxReplicas uint32                `protobuf:"varint,4,opt,name=supportedMaxReplicas,proto3" json:"supportedMaxReplicas,omitempty"`
	Statistics           *ClusterStatisticsApi `protobuf:"bytes,5,opt,name=statistics,proto3" json:"statistics,omitempty"`
	// Etag
	//
	// identifier for a specific version of a resource
	ETag                string         `protobuf:"bytes,6,opt,name=ETag,proto3" json:"ETag,omitempty"`
	Health              *ClusterHealth `protobuf:"bytes,7,opt,name=health,proto3" json:"health,omitempty"`
	MinVersionInCluster string         `protobuf:"bytes,8,opt,name=MinVersionInCluster,proto3" json:"MinVersionInCluster,omitempty"`
	MinAllowedVersion   string         `protobuf:"bytes,9,opt,name=MinAllowedVersion,proto3" json:"MinAllowedVersion,omitempty"`
	MaxAllowedVersion   string         `protobuf:"bytes,10,opt,name=MaxAllowedVersion,proto3" json:"MaxAllowedVersion,omitempty"`
	// Addresses of the API Service
	//
	// A list of REST/gRPC endpoints - <ip>:<port> pairs that the API listen on.
	// Example entries:
	// - 192.168.16.16:80
	// - 192.168.16.17:80
	ApiEndpoints []string `protobuf:"bytes,11,rep,name=apiEndpoints,proto3" json:"apiEndpoints,omitempty"`
	// Addresses of the Discovery Service
	//
	// A list of TCP endpoints - <ip>:<port> pairs that the Discovery Service listen on
	// Example entries:
	// - 192.168.16.16:8009
	// - 192.168.16.17:8009
	DiscoveryEndpoints []string `protobuf:"bytes,12,rep,name=discoveryEndpoints,proto3" json:"discoveryEndpoints,omitempty"`
}

func (x *ClusterInfo) Reset() {
	*x = ClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfo) ProtoMessage() {}

func (x *ClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfo.ProtoReflect.Descriptor instead.
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{65}
}

func (x *ClusterInfo) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ClusterInfo) GetSubsystemNQN() string {
	if x != nil {
		return x.SubsystemNQN
	}
	return ""
}

func (x *ClusterInfo) GetCurrentMaxReplicas() uint32 {
	if x != nil {
		return x.CurrentMaxReplicas
	}
	return 0
}

func (x *ClusterInfo) GetSupportedMaxReplicas() uint32 {
	if x != nil {
		return x.SupportedMaxReplicas
	}
	return 0
}

func (x *ClusterInfo) GetStatistics() *ClusterStatisticsApi {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *ClusterInfo) GetETag() string {
	if x != nil {
		return x.ETag
	}
	return ""
}

func (x *ClusterInfo) GetHealth() *ClusterHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *ClusterInfo) GetMinVersionInCluster() string {
	if x != nil {
		return x.MinVersionInCluster
	}
	return ""
}

func (x *ClusterInfo) GetMinAllowedVersion() string {
	if x != nil {
		return x.MinAllowedVersion
	}
	return ""
}

func (x *ClusterInfo) GetMaxAllowedVersion() string {
	if x != nil {
		return x.MaxAllowedVersion
	}
	return ""
}

func (x *ClusterInfo) GetApiEndpoints() []string {
	if x != nil {
		return x.ApiEndpoints
	}
	return nil
}

func (x *ClusterInfo) GetDiscoveryEndpoints() []string {
	if x != nil {
		return x.DiscoveryEndpoints
	}
	return nil
}

type ClusterInfoV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID                 string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	SubsystemNQN         string `protobuf:"bytes,2,opt,name=subsystemNQN,proto3" json:"subsystemNQN,omitempty"`
	CurrentMaxReplicas   uint32 `protobuf:"varint,3,opt,name=currentMaxReplicas,proto3" json:"currentMaxReplicas,omitempty"`
	SupportedMaxReplicas uint32 `protobuf:"varint,4,opt,name=supportedMaxReplicas,proto3" json:"supportedMaxReplicas,omitempty"`
	// Etag
	//
	// identifier for a specific version of a resource
	ETag string `protobuf:"bytes,6,opt,name=ETag,proto3" json:"ETag,omitempty"`
	// Addresses of the API Service
	//
	// A list of REST/gRPC endpoints - <ip>:<port> pairs that the API listen on.
	// Example entries:
	// - 192.168.16.16:80
	// - 192.168.16.17:80
	ApiEndpoints []string `protobuf:"bytes,11,rep,name=apiEndpoints,proto3" json:"apiEndpoints,omitempty"`
	// Addresses of the Discovery Service
	//
	// A list of TCP endpoints - <ip>:<port> pairs that the Discovery Service listen on
	// Example entries:
	// - 192.168.16.16:8009
	// - 192.168.16.17:8009
	DiscoveryEndpoints []string `protobuf:"bytes,12,rep,name=discoveryEndpoints,proto3" json:"discoveryEndpoints,omitempty"`
	// Addresses of the NVMe endpoints
	//
	// A list of TCP endpoints - <ip>:<port> pairs that the NVMe targets listen on
	// Example entries:
	// - 192.168.16.16:8009
	// - 192.168.16.17:8009
	NvmeEndpoints []string `protobuf:"bytes,13,rep,name=nvmeEndpoints,proto3" json:"nvmeEndpoints,omitempty"`
}

func (x *ClusterInfoV2) Reset() {
	*x = ClusterInfoV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfoV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfoV2) ProtoMessage() {}

func (x *ClusterInfoV2) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfoV2.ProtoReflect.Descriptor instead.
func (*ClusterInfoV2) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{66}
}

func (x *ClusterInfoV2) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ClusterInfoV2) GetSubsystemNQN() string {
	if x != nil {
		return x.SubsystemNQN
	}
	return ""
}

func (x *ClusterInfoV2) GetCurrentMaxReplicas() uint32 {
	if x != nil {
		return x.CurrentMaxReplicas
	}
	return 0
}

func (x *ClusterInfoV2) GetSupportedMaxReplicas() uint32 {
	if x != nil {
		return x.SupportedMaxReplicas
	}
	return 0
}

func (x *ClusterInfoV2) GetETag() string {
	if x != nil {
		return x.ETag
	}
	return ""
}

func (x *ClusterInfoV2) GetApiEndpoints() []string {
	if x != nil {
		return x.ApiEndpoints
	}
	return nil
}

func (x *ClusterInfoV2) GetDiscoveryEndpoints() []string {
	if x != nil {
		return x.DiscoveryEndpoints
	}
	return nil
}

func (x *ClusterInfoV2) GetNvmeEndpoints() []string {
	if x != nil {
		return x.NvmeEndpoints
	}
	return nil
}

type ClusterHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State                  ClusterHealth_State `protobuf:"varint,1,opt,name=state,proto3,enum=lightbits.api.duros.v2.ClusterHealth_State" json:"state,omitempty"`
	NumDegradedVolumes     uint32              `protobuf:"varint,2,opt,name=numDegradedVolumes,proto3" json:"numDegradedVolumes,omitempty"`
	NumReadOnlyVolumes     uint32              `protobuf:"varint,3,opt,name=numReadOnlyVolumes,proto3" json:"numReadOnlyVolumes,omitempty"`
	NumNotAvailableVolumes uint32              `protobuf:"varint,4,opt,name=numNotAvailableVolumes,proto3" json:"numNotAvailableVolumes,omitempty"`
	NumInactiveNodes       uint32              `protobuf:"varint,5,opt,name=numInactiveNodes,proto3" json:"numInactiveNodes,omitempty"`
}

func (x *ClusterHealth) Reset() {
	*x = ClusterHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterHealth) ProtoMessage() {}

func (x *ClusterHealth) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterHealth.ProtoReflect.Descriptor instead.
func (*ClusterHealth) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{67}
}

func (x *ClusterHealth) GetState() ClusterHealth_State {
	if x != nil {
		return x.State
	}
	return ClusterHealth_None
}

func (x *ClusterHealth) GetNumDegradedVolumes() uint32 {
	if x != nil {
		return x.NumDegradedVolumes
	}
	return 0
}

func (x *ClusterHealth) GetNumReadOnlyVolumes() uint32 {
	if x != nil {
		return x.NumReadOnlyVolumes
	}
	return 0
}

func (x *ClusterHealth) GetNumNotAvailableVolumes() uint32 {
	if x != nil {
		return x.NumNotAvailableVolumes
	}
	return 0
}

func (x *ClusterHealth) GetNumInactiveNodes() uint32 {
	if x != nil {
		return x.NumInactiveNodes
	}
	return 0
}

type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State           Volume_StateEnum     `protobuf:"varint,1,opt,name=state,proto3,enum=lightbits.api.duros.v2.Volume_StateEnum" json:"state,omitempty"`
	ProtectionState ProtectionStateEnum  `protobuf:"varint,2,opt,name=protectionState,proto3,enum=lightbits.api.duros.v2.ProtectionStateEnum" json:"protectionState,omitempty"`
	ReplicaCount    uint32               `protobuf:"varint,3,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	NodeList        []string             `protobuf:"bytes,4,rep,name=nodeList,proto3" json:"nodeList,omitempty"`
	UUID            string               `protobuf:"bytes,5,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Nsid            uint32               `protobuf:"varint,6,opt,name=nsid,proto3" json:"nsid,omitempty"`
	Acl             *StringList          `protobuf:"bytes,7,opt,name=acl,proto3" json:"acl,omitempty"`
	Compression     string               `protobuf:"bytes,8,opt,name=compression,proto3" json:"compression,omitempty"`
	Size            uint64               `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	Name            string               `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	RebuildProgress string               `protobuf:"bytes,11,opt,name=rebuildProgress,proto3" json:"rebuildProgress,omitempty"`
	Statistics      *VolumeStatisticsApi `protobuf:"bytes,12,opt,name=statistics,proto3" json:"statistics,omitempty"`
	IPAcl           *StringList          `protobuf:"bytes,13,opt,name=IPAcl,proto3" json:"IPAcl,omitempty"`
	// Etag
	//
	// identifier for a specific version of a resource
	ETag           string   `protobuf:"bytes,14,opt,name=ETag,proto3" json:"ETag,omitempty"`
	ConnectedHosts []string `protobuf:"bytes,15,rep,name=connectedHosts,proto3" json:"connectedHosts,omitempty"`
	SectorSize     uint32   `protobuf:"varint,16,opt,name=sectorSize,proto3" json:"sectorSize,omitempty"`
	ProjectName    string   `protobuf:"bytes,17,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{68}
}

func (x *Volume) GetState() Volume_StateEnum {
	if x != nil {
		return x.State
	}
	return Volume_Unknown
}

func (x *Volume) GetProtectionState() ProtectionStateEnum {
	if x != nil {
		return x.ProtectionState
	}
	return ProtectionStateEnum_Unknown
}

func (x *Volume) GetReplicaCount() uint32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

func (x *Volume) GetNodeList() []string {
	if x != nil {
		return x.NodeList
	}
	return nil
}

func (x *Volume) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Volume) GetNsid() uint32 {
	if x != nil {
		return x.Nsid
	}
	return 0
}

func (x *Volume) GetAcl() *StringList {
	if x != nil {
		return x.Acl
	}
	return nil
}

func (x *Volume) GetCompression() string {
	if x != nil {
		return x.Compression
	}
	return ""
}

func (x *Volume) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Volume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Volume) GetRebuildProgress() string {
	if x != nil {
		return x.RebuildProgress
	}
	return ""
}

func (x *Volume) GetStatistics() *VolumeStatisticsApi {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Volume) GetIPAcl() *StringList {
	if x != nil {
		return x.IPAcl
	}
	return nil
}

func (x *Volume) GetETag() string {
	if x != nil {
		return x.ETag
	}
	return ""
}

func (x *Volume) GetConnectedHosts() []string {
	if x != nil {
		return x.ConnectedHosts
	}
	return nil
}

func (x *Volume) GetSectorSize() uint32 {
	if x != nil {
		return x.SectorSize
	}
	return 0
}

func (x *Volume) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// risk of service loss state
	//
	// indicates the ability to upgrade or disable a server without loss of service to cluster volumes
	RiskOfServiceLossState Server_RiskOfServiceLossEnum `protobuf:"varint,4,opt,name=RiskOfServiceLossState,proto3,enum=lightbits.api.duros.v2.Server_RiskOfServiceLossEnum" json:"RiskOfServiceLossState,omitempty"`
	NodesUUIDs             []string                     `protobuf:"bytes,5,rep,name=NodesUUIDs,proto3" json:"NodesUUIDs,omitempty"`
	State                  Server_ServerStateEnum       `protobuf:"varint,6,opt,name=state,proto3,enum=lightbits.api.duros.v2.Server_ServerStateEnum" json:"state,omitempty"`
	ServerEndpoints        []string                     `protobuf:"bytes,7,rep,name=ServerEndpoints,proto3" json:"ServerEndpoints,omitempty"`
	// Etag
	//
	// identifier for a specific version of a resource
	ETag           string `protobuf:"bytes,8,opt,name=ETag,proto3" json:"ETag,omitempty"`
	LightOSVersion string `protobuf:"bytes,9,opt,name=LightOSVersion,proto3" json:"LightOSVersion,omitempty"`
	// UpgradeStatus
	//
	// following the upgrade command this field indicates the status of the upgrade operation
	UpgradeStatus Server_UpgradeStatusEnum `protobuf:"varint,10,opt,name=UpgradeStatus,proto3,enum=lightbits.api.duros.v2.Server_UpgradeStatusEnum" json:"UpgradeStatus,omitempty"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{69}
}

func (x *Server) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Server) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Server) GetRiskOfServiceLossState() Server_RiskOfServiceLossEnum {
	if x != nil {
		return x.RiskOfServiceLossState
	}
	return Server_UnknownRiskOfServiceLoss
}

func (x *Server) GetNodesUUIDs() []string {
	if x != nil {
		return x.NodesUUIDs
	}
	return nil
}

func (x *Server) GetState() Server_ServerStateEnum {
	if x != nil {
		return x.State
	}
	return Server_UnknownState
}

func (x *Server) GetServerEndpoints() []string {
	if x != nil {
		return x.ServerEndpoints
	}
	return nil
}

func (x *Server) GetETag() string {
	if x != nil {
		return x.ETag
	}
	return ""
}

func (x *Server) GetLightOSVersion() string {
	if x != nil {
		return x.LightOSVersion
	}
	return ""
}

func (x *Server) GetUpgradeStatus() Server_UpgradeStatusEnum {
	if x != nil {
		return x.UpgradeStatus
	}
	return Server_Unknown
}

type GetRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *GetRoleRequest) Reset() {
	*x = GetRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleRequest) ProtoMessage() {}

func (x *GetRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleRequest.ProtoReflect.Descriptor instead.
func (*GetRoleRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{70}
}

func (x *GetRoleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetRoleRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type GetRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role *Role `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *GetRoleResponse) Reset() {
	*x = GetRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleResponse) ProtoMessage() {}

func (x *GetRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleResponse.ProtoReflect.Descriptor instead.
func (*GetRoleResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{71}
}

func (x *GetRoleResponse) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
	// rulesJson
	//
	// a JSON representation of the role 'rules' array, e.g.:
	//   [{"resources":["versions"],"actions":["get"]}]
	RulesJson string `protobuf:"bytes,4,opt,name=rulesJson,proto3" json:"rulesJson,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{72}
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *Role) GetRulesJson() string {
	if x != nil {
		return x.RulesJson
	}
	return ""
}

type ListRolesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName string `protobuf:"bytes,1,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *ListRolesRequest) Reset() {
	*x = ListRolesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRolesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRolesRequest) ProtoMessage() {}

func (x *ListRolesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRolesRequest.ProtoReflect.Descriptor instead.
func (*ListRolesRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{73}
}

func (x *ListRolesRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type ListRolesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roles []*Role `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *ListRolesResponse) Reset() {
	*x = ListRolesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRolesResponse) ProtoMessage() {}

func (x *ListRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRolesResponse.ProtoReflect.Descriptor instead.
func (*ListRolesResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{74}
}

func (x *ListRolesResponse) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

var File_lightbits_api_duros_v2_durosapiv2_proto protoreflect.FileDescriptor

var file_lightbits_api_duros_v2_durosapiv2_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61,
	0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a,
	0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x70, 0x73, 0x22, 0x4a, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x04,
	0x22, 0x2d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x6b, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x2f, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x42, 0x0a,
	0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70,
	0x73, 0x22, 0x42, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0x30, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x4b, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3a, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x48, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x27, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x87, 0x04, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x8a, 0x01, 0x18, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5c, 0x2e, 0x5d, 0x7b, 0x31, 0x2c,
	0x32, 0x35, 0x33, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x34, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x03, 0x61, 0x63, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x49,
	0x50, 0x41, 0x63, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05,
	0x49, 0x50, 0x41, 0x63, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x5a, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x35, 0x31,
	0x32, 0x42, 0x10, 0x80, 0x04, 0x12, 0x12, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x5f, 0x34, 0x4b, 0x10, 0x80, 0x20, 0x22, 0x5f, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x29, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x4e, 0x0a,
	0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x29, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x5e, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x22, 0x79, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x75,
	0x73, 0x65, 0x49, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x75, 0x73,
	0x65, 0x49, 0x50, 0x22, 0xf1, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12,
	0x34, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x03, 0x61, 0x63, 0x6c, 0x12, 0x38, 0x0a, 0x05, 0x49, 0x50, 0x41, 0x63, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x49, 0x50, 0x41, 0x63, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x14, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6b,
	0x67, 0x55, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x50, 0x6b, 0x67, 0x55, 0x72, 0x69, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x53, 0x0a,
	0x15, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x50, 0x6b, 0x67, 0x55, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6b, 0x67, 0x55, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x05,
	0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x55, 0x55, 0x49,
	0x44, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x64, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x56, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x4e, 0x76, 0x6d,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x22, 0x2a,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x51, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x51, 0x4e, 0x22, 0x4c, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x51, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x51, 0x4e, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x22, 0x62, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x5f, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x5c, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x22, 0xb9, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55,
	0x55, 0x49, 0x44, 0x22, 0x2e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x22, 0x6c, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x0b, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x51, 0x4e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x51, 0x4e, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x73, 0x22, 0x8c, 0x04, 0x0a, 0x17, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x75, 0x6d,
	0x61, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e,
	0x75, 0x6d, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x4f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x15, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x54, 0x61, 0x67,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x45, 0x54, 0x61, 0x67, 0x22, 0x4a, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x22, 0xa2, 0x07, 0x0a, 0x0d, 0x44, 0x75, 0x72,
	0x6f, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x75, 0x72, 0x6f, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x75, 0x72, 0x6f, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x6e, 0x76, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x76, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78,
	0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x65,
	0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x65, 0x63, 0x12, 0x49, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x70, 0x69, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x54, 0x61, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x45, 0x54, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x75,
	0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x6c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x6e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x22, 0x5d,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x10, 0x03, 0x22, 0x50, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x75, 0x72, 0x6f, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0x4f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x15,
	0x41, 0x64, 0x64, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a,
	0x15, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x17, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x52, 0x69, 0x73, 0x6b, 0x4f,
	0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x11, 0x52, 0x69, 0x73, 0x6b, 0x4f, 0x66,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x73, 0x73, 0x22, 0x26, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x22, 0x4f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x22, 0x29, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xac, 0x04, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4e, 0x51, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4e, 0x51, 0x4e, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x70, 0x69, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x54, 0x61,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x45, 0x54, 0x61, 0x67, 0x12, 0x3d, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x13,
	0x4d, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4d, 0x69, 0x6e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x69, 0x6e, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11,
	0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70,
	0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x70, 0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xb9,
	0x02, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4e, 0x51, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x51, 0x4e, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x45, 0x54, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x45, 0x54, 0x61, 0x67,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x76, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x76, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x0d, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x75, 0x6d,
	0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x75, 0x6d,
	0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x49, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x22, 0xc3, 0x06, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x55, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x73, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x70, 0x69, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x49, 0x50, 0x41, 0x63, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x49, 0x50, 0x41, 0x63,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x54, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x45, 0x54, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x6a, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x07, 0x12, 0x0c, 0x0a,
	0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x08, 0x22, 0x1f, 0x0a, 0x0c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x43, 0x50, 0x10, 0x00, 0x22, 0xae, 0x06, 0x0a,
	0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x6c, 0x0a, 0x16, 0x52, 0x69, 0x73, 0x6b, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x6f, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x69, 0x73, 0x6b, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x73,
	0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x16, 0x52, 0x69, 0x73, 0x6b, 0x4f, 0x66, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x55, 0x55, 0x49, 0x44, 0x73, 0x12, 0x44, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x45, 0x54, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x45, 0x54, 0x61,
	0x67, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0d, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0d, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x5b, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x22, 0x86,
	0x01, 0x0a, 0x15, 0x52, 0x69, 0x73, 0x6b, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x6f, 0x73, 0x73, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x6f, 0x52, 0x69, 0x73, 0x6b,
	0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x73, 0x73, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x49, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x73, 0x73, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4f, 0x66, 0x52, 0x69, 0x73, 0x6b, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x73, 0x73, 0x10, 0x03, 0x22, 0x83, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x05,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x0d,
	0x0a, 0x09, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x22, 0x46, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x5a, 0x0a, 0x04, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2a, 0x55, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x64, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x53, 0x32, 0x35, 0x36, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x50, 0x65, 0x6d, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x6c, 0x73,
	0x50, 0x72, 0x69, 0x76, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x10, 0x03, 0x2a, 0x64, 0x0a, 0x13,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x04, 0x32, 0xae, 0xb8, 0x01, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x6f, 0x73, 0x41, 0x50, 0x49,
	0x12, 0xa8, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x92, 0x41, 0x34, 0x12, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x20, 0x47, 0x65, 0x74, 0x20, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x12, 0xc9, 0x06, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2b, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xeb, 0x05, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x41, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x14, 0x22,
	0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0xa0, 0x05, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x1a, 0xb6, 0x01, 0x41, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x2d, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x28, 0x41, 0x43, 0x4c, 0x29,
	0x2e, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x49, 0x50, 0x2d, 0x41, 0x43, 0x4c, 0x20, 0x28,
	0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x29, 0x2e, 0x4a,
	0x40, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x39, 0x0a, 0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x4a, 0xfa, 0x01, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0xf2, 0x01, 0x0a, 0xe7, 0x01, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x6e,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x6d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20,
	0x69, 0x73, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x69, 0x6c, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x0a,
	0x73, 0x69, 0x7a, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2c, 0x20,
	0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69,
	0x73, 0x20, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2c, 0x20, 0x0a, 0x41, 0x43, 0x4c,
	0x20, 0x6f, 0x72, 0x20, 0x49, 0x50, 0x2d, 0x41, 0x43, 0x4c, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b,
	0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34,
	0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12, 0xe8, 0x07, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xfc, 0x06, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x2a, 0x2d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x5a, 0x18, 0x2a, 0x16, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b,
	0x55, 0x55, 0x49, 0x44, 0x7d, 0x92, 0x41, 0xa9, 0x06, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x1a, 0x8c, 0x02, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x73, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x2e, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x61, 0x6e,
	0x20, 0x62, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x47,
	0x45, 0x54, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x20, 0x41, 0x73, 0x20, 0x6c,
	0x6f, 0x6e, 0x67, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x75, 0x6e, 0x73, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x69, 0x73, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x47, 0x45, 0x54,
	0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20,
	0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x38, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x31,
	0x0a, 0x27, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x4a, 0x63, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x5c, 0x0a, 0x52, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x55, 0x55, 0x49,
	0x44, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x29, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a,
	0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x4a, 0x6a, 0x0a, 0x03, 0x35, 0x30, 0x33, 0x12, 0x63, 0x0a, 0x59, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x20, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x29, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x1f, 0x0a, 0x03, 0x34, 0x31, 0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d,
	0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x44, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x3d, 0x0a, 0x33, 0x54, 0x68, 0x65, 0x72, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a,
	0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a,
	0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x12, 0xbb, 0x06, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x12, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3, 0x05, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3b, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x5a, 0x11, 0x12, 0x0f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x92, 0x41,
	0x8e, 0x05, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2e, 0x1a, 0xc2,
	0x03, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x61,
	0x6e, 0x20, 0x62, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x69, 0x73, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x2c, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x66,
	0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x20, 0x49,
	0x66, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x69, 0x73,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x2c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6e, 0x65, 0x78, 0x74, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x55, 0x55, 0x49, 0x44, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x69, 0x73,
	0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20,
	0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x2c,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x2e,
	0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x75, 0x6e, 0x6c, 0x65, 0x73, 0x73,
	0x20, 0x79, 0x6f, 0x75, 0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24,
	0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34,
	0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x12, 0xa9, 0x03, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x22, 0xce, 0x02, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x6f,
	0x73, 0x74, 0x4e, 0x51, 0x4e, 0x7d, 0x92, 0x41, 0xa2, 0x02, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x20,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1f,
	0x47, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x68, 0x6f,
	0x73, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a,
	0x30, 0x47, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x68,
	0x6f, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x51, 0x4e,
	0x2e, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x30,
	0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x29, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x64, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x4e, 0x51, 0x4e, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c,
	0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e,
	0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12, 0xbf, 0x03, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xdc, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73,
	0x92, 0x41, 0xba, 0x02, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20,
	0x68, 0x6f, 0x73, 0x74, 0x73, 0x2e, 0x1a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x61, 0x6e,
	0x20, 0x62, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x55, 0x55, 0x49, 0x44, 0x2e, 0x4a, 0x2b, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x33, 0x0a,
	0x03, 0x34, 0x30, 0x34, 0x12, 0x2c, 0x0a, 0x22, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33,
	0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12, 0xda,
	0x03, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x28, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x82, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x12,
	0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x5a, 0x18,
	0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x92, 0x41, 0xaf, 0x02, 0x0a, 0x0a, 0x67, 0x65,
	0x74, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x47, 0x65, 0x74, 0x20, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x27, 0x47, 0x65, 0x74, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x33, 0x0a,
	0x03, 0x34, 0x30, 0x34, 0x12, 0x2c, 0x0a, 0x22, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a,
	0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12, 0x80, 0x05, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x04,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x92, 0x41, 0x85, 0x04, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x12, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x1a, 0xff, 0x01, 0x41, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x20, 0x69, 0x73, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x76,
	0x69, 0x61, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2e, 0x20, 0x41, 0x6e, 0x20,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x20, 0x69, 0x73, 0x20, 0x64, 0x6f, 0x6e, 0x65, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x2d, 0x20,
	0x65, 0x2e, 0x67, 0x2e, 0x20, 0x20, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x3f, 0x4e, 0x61, 0x6d, 0x65, 0x3d, 0x3c, 0x4e, 0x61, 0x6d, 0x65, 0x3e, 0x20, 0x32,
	0x2e, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x2d, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x20, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x3f, 0x55, 0x55, 0x49, 0x44,
	0x3d, 0x3c, 0x55, 0x55, 0x49, 0x44, 0x3e, 0x20, 0x33, 0x2e, 0x20, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x2d, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20,
	0x20, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x3f, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3d, 0x3c, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3e, 0x4a, 0x58, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x51, 0x0a, 0x47, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x20, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20,
	0x61, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33,
	0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12, 0x80,
	0x03, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x75, 0x72, 0x6f,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa5, 0x02, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x92, 0x41, 0x85, 0x02, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x15, 0x47, 0x65, 0x74, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x33, 0x47, 0x65, 0x74, 0x20, 0x6e,
	0x6f, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x55, 0x55,
	0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x4a, 0x28,
	0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x21, 0x0a, 0x17, 0x4e, 0x6f, 0x64, 0x65, 0x20, 0x55, 0x55,
	0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12,
	0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24,
	0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03,
	0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x12, 0xcc, 0x04, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd7, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12,
	0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x92, 0x41, 0xb8, 0x03, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x34,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x6e, 0x76, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0xf0, 0x01, 0x41, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6e, 0x76, 0x6d, 0x65, 0x20, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x69, 0x73, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x20, 0x76, 0x69, 0x61, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2e, 0x20, 0x54,
	0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x76, 0x6d, 0x65, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x3a, 0x20, 0x20, 0x31, 0x2e, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55,
	0x55, 0x49, 0x44, 0x20, 0x2d, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x20, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x32, 0x2f, 0x6e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x3d, 0x3c, 0x55, 0x55, 0x49, 0x44, 0x3e,
	0x20, 0x32, 0x2e, 0x20, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x20, 0x2d, 0x20, 0x65,
	0x2e, 0x67, 0x2e, 0x20, 0x20, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x76, 0x6d, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3f, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x3d, 0x3c, 0x55, 0x55, 0x49, 0x44, 0x3e, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24,
	0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34,
	0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x12, 0xed, 0x03, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x76,
	0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xfc, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x7d, 0x92, 0x41, 0xd4, 0x02, 0x0a, 0x0f, 0x67, 0x65,
	0x74, 0x20, 0x6e, 0x76, 0x6d, 0x65, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x20, 0x6e, 0x76, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x6e, 0x76,
	0x6d, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x62,
	0x79, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x20, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x6e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x31, 0x35, 0x65, 0x62,
	0x32, 0x31, 0x63, 0x30, 0x2d, 0x33, 0x35, 0x61, 0x65, 0x2d, 0x34, 0x37, 0x38, 0x64, 0x2d, 0x62,
	0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x25, 0x0a,
	0x03, 0x34, 0x30, 0x34, 0x12, 0x1e, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x69,
	0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34,
	0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x12, 0x81, 0x03, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xa2, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x92, 0x41, 0x87, 0x02, 0x0a, 0x0b, 0x67,
	0x65, 0x74, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x50, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20,
	0x65, 0x2e, 0x67, 0x2e, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x55, 0x55, 0x49,
	0x44, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e,
	0x51, 0x4e, 0x20, 0x69, 0x73, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x76, 0x69,
	0x61, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2e, 0x4a, 0x2b, 0x0a, 0x03, 0x35,
	0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12,
	0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x12, 0x97, 0x03, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x22, 0xb2, 0x02, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x92, 0x41, 0x93, 0x02, 0x0a, 0x0b, 0x67, 0x65, 0x74,
	0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x5c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2c, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x51, 0x4e, 0x20, 0x69, 0x73, 0x20,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x76, 0x69, 0x61, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x41, 0x50, 0x49, 0x2e, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33,
	0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12, 0xc2,
	0x06, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xca, 0x05, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22,
	0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x99, 0x05, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x4e, 0x56, 0x4d, 0x65, 0x20, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x1a,
	0x4b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x4e, 0x56, 0x4d, 0x65, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x20,
	0x61, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x62,
	0x79, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x55, 0x55, 0x49, 0x44, 0x2e, 0x4a, 0x2b, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x83, 0x02, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0xfb, 0x01, 0x0a, 0xf0, 0x01, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x6e, 0x6f, 0x64,
	0x65, 0x20, 0x75, 0x75, 0x69, 0x64, 0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65,
	0x20, 0x6f, 0x72, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f,
	0x64, 0x65, 0x27, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x27, 0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x6e, 0x27, 0x74, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x2f, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x28, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x75, 0x75, 0x69, 0x64, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x1f, 0x0a, 0x03, 0x34, 0x31, 0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20,
	0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x4a, 0x44, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x3d, 0x0a, 0x33, 0x54, 0x68, 0x65, 0x72,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e,
	0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23,
	0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x12, 0x8b, 0x07, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4e, 0x76, 0x6d, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x64, 0x64, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64,
	0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x9c, 0x06, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0xfa, 0x05, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x41,
	0x64, 0x64, 0x20, 0x4e, 0x56, 0x4d, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x1a, 0xae, 0x01, 0x41, 0x64, 0x64, 0x20,
	0x4e, 0x56, 0x4d, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x55,
	0x55, 0x49, 0x44, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x4e, 0x56, 0x4d, 0x65, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x75,
	0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6e,
	0x6f, 0x64, 0x65, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62,
	0x65, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30,
	0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x83, 0x02, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12,
	0xfb, 0x01, 0x0a, 0xf0, 0x01, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20,
	0x75, 0x75, 0x69, 0x64, 0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x20, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x6f,
	0x72, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x64, 0x65,
	0x27, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x27, 0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x6e, 0x27, 0x74, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2f, 0x0a,
	0x03, 0x34, 0x30, 0x34, 0x12, 0x28, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x6f,
	0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x75, 0x75, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f,
	0x0a, 0x03, 0x34, 0x31, 0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x44, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x3d, 0x0a, 0x33, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20,
	0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24,
	0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03,
	0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x12, 0xeb, 0x06, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xff, 0x05,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x1a, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b,
	0x55, 0x55, 0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x5a, 0x18, 0x1a, 0x16, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49,
	0x44, 0x7d, 0x92, 0x41, 0xa9, 0x05, 0x0a, 0x08, 0x65, 0x63, 0x68, 0x6f, 0x20, 0x72, 0x70, 0x63,
	0x12, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e,
	0x1a, 0x50, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x3a, 0x0a, 0x41,
	0x43, 0x4c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x0a, 0x49, 0x50, 0x41, 0x43, 0x4c, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x4a, 0x47, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x40, 0x0a, 0x36, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x5b, 0x0a, 0x03, 0x35,
	0x30, 0x33, 0x12, 0x54, 0x0a, 0x4a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6e, 0x6f, 0x77, 0x20, 0x28, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x29, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x65, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12,
	0x5e, 0x0a, 0x54, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20,
	0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x29, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x3e, 0x0a, 0x03,
	0x35, 0x30, 0x31, 0x12, 0x37, 0x0a, 0x2d, 0x55, 0x6e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x20, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20,
	0x28, 0x75, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x29, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03,
	0x34, 0x31, 0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x73, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x44, 0x0a,
	0x03, 0x34, 0x30, 0x39, 0x12, 0x3d, 0x0a, 0x33, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30,
	0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12,
	0x9f, 0x03, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x28, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xc7, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x92, 0x41, 0xa5, 0x02, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x2d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x55,
	0x55, 0x49, 0x44, 0x1a, 0x27, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x55, 0x55, 0x49, 0x44, 0x2e, 0x4a, 0x3a, 0x0a, 0x03,
	0x34, 0x30, 0x34, 0x12, 0x33, 0x0a, 0x29, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44,
	0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12,
	0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24,
	0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03,
	0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x12, 0xf2, 0x04, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x12, 0x2a, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x04, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x92, 0x41, 0xee, 0x03, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0xa6, 0x02, 0x41, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x20, 0x69, 0x73, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x76, 0x69,
	0x61, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x4e,
	0x61, 0x6d, 0x65, 0x20, 0x2d, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x20, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3f, 0x4e, 0x61, 0x6d, 0x65,
	0x3d, 0x3c, 0x4e, 0x61, 0x6d, 0x65, 0x3e, 0x20, 0x32, 0x2e, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20,
	0x2d, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3f, 0x55, 0x55, 0x49, 0x44, 0x3d, 0x3c, 0x55, 0x55,
	0x49, 0x44, 0x3e, 0x20, 0x33, 0x2e, 0x20, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x2d, 0x20, 0x65, 0x2e,
	0x67, 0x2e, 0x20, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x3f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3d, 0x3c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3e, 0x1a,
	0x2c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x2b, 0x0a,
	0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f,
	0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30,
	0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12, 0x8e, 0x05, 0x0a, 0x0d, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x2f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0xf2, 0x03, 0x0a, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0f,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x1a,
	0x9d, 0x01, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x20, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x55, 0x52, 0x49, 0x2e, 0x20, 0x53,
	0x69, 0x6e, 0x63, 0x65, 0x20, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x20, 0x73, 0x68, 0x61, 0x6c,
	0x6c, 0x20, 0x62, 0x65, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4a,
	0x1f, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x18, 0x0a, 0x0e, 0x55, 0x55, 0x49, 0x44, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x25, 0x0a,
	0x03, 0x34, 0x30, 0x30, 0x12, 0x1e, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20,
	0x55, 0x55, 0x49, 0x44, 0x20, 0x6f, 0x72, 0x20, 0x55, 0x52, 0x49, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03, 0x34, 0x31, 0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45,
	0x74, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x44, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x3d, 0x0a, 0x33,
	0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34,
	0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12, 0xe8, 0x04, 0x0a, 0x0e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf6, 0x03, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0xd0, 0x03, 0x0a, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x10, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x1a, 0xc9, 0x01,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20,
	0x6f, 0x6e, 0x65, 0x20, 0x62, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x2e, 0x20, 0x4f, 0x6e, 0x6c, 0x79,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6c, 0x6f, 0x73, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x2e, 0x20, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67,
	0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x20, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4a, 0x37, 0x0a, 0x03, 0x34, 0x30, 0x34,
	0x12, 0x30, 0x0a, 0x26, 0x4f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x73, 0x20, 0x69, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x25, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1e, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x6f, 0x72, 0x20, 0x55, 0x52, 0x49, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a,
	0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a,
	0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x12, 0xfb, 0x04, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x22, 0x9d, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0xff,
	0x03, 0x0a, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x1a, 0xd0, 0x01, 0x41, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x20, 0x20,
	0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62,
	0x6f, 0x64, 0x79, 0x20, 0x61, 0x72, 0x65, 0x3a, 0x20, 0x20, 0x31, 0x2e, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x2d, 0x20, 0x75,
	0x72, 0x6c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e,
	0x65, 0x77, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x69, 0x70, 0x20, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x20, 0x61, 0x73, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x61,
	0x73, 0x20, 0x65, 0x74, 0x63, 0x64, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x70, 0x65, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x65, 0x2e, 0x67, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x31, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x3a, 0x32, 0x33, 0x38, 0x30, 0x4a, 0x2b, 0x0a,
	0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f,
	0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2d, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x26, 0x0a, 0x1c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x59, 0x0a, 0x03, 0x34, 0x30, 0x39,
	0x12, 0x52, 0x0a, 0x48, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x55, 0x55, 0x49, 0x44, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x20,
	0x28, 0x72, 0x65, 0x75, 0x73, 0x65, 0x49, 0x50, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x77, 0x61,
	0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x75, 0x73, 0x65, 0x64, 0x29, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34,
	0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x12, 0xed, 0x08, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x2a, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x08, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2f, 0x7b, 0x53, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x2f,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0xd2, 0x07, 0x0a, 0x0c,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x1a, 0xf1, 0x03, 0x54, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x55,
	0x55, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x28, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x53, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49,
	0x44, 0x29, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x61, 0x72, 0x65, 0x3a, 0x0a, 0x31, 0x2e, 0x20,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x20, 0x2d,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
	0x72, 0x63, 0x20, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x66, 0x20, 0x73, 0x72, 0x63, 0x4e, 0x6f,
	0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2c, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x20, 0x69,
	0x73, 0x20, 0x55, 0x6e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x2e, 0x20, 0x53, 0x6f,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x20, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x20, 0x28, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x29,
	0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x73, 0x73, 0x75, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x55, 0x6e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x28, 0x70, 0x6f, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x79, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x6e, 0x6f,
	0x64, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x20, 0x50, 0x47, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x62, 0x79, 0x20, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x74, 0x73, 0x20, 0x50, 0x47, 0x20, 0x74,
	0x6f, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x29, 0x4a,
	0x5e, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x57, 0x0a, 0x4d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x2e, 0x20, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x38, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x31, 0x0a, 0x27, 0x4f, 0x6e, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x55, 0x55,
	0x49, 0x44, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30,
	0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03, 0x34, 0x31, 0x32, 0x12, 0x18, 0x0a,
	0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x4a, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x43,
	0x0a, 0x39, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x4a, 0x2f, 0x0a, 0x03, 0x34, 0x32, 0x39, 0x12, 0x28, 0x0a, 0x1e, 0x54, 0x6f,
	0x6f, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x20,
	0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34,
	0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x12, 0xc9, 0x05, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdd, 0x04, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x92, 0x41, 0xbb,
	0x04, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x1a, 0xc1, 0x01, 0x41, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x55, 0x55,
	0x49, 0x44, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x61, 0x72, 0x65, 0x3a, 0x20, 0x20, 0x31, 0x2e,
	0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x2d, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4a, 0x2f, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x28, 0x0a, 0x1e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20,
	0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2e, 0x0a, 0x24,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x72, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03, 0x34, 0x31, 0x32,
	0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x44, 0x0a, 0x03, 0x34, 0x30,
	0x39, 0x12, 0x3d, 0x0a, 0x33, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69,
	0x6e, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c,
	0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e,
	0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12, 0x88, 0x05, 0x0a,
	0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2b, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xaa, 0x04, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x2f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0xfe, 0x03, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x1a, 0x8c, 0x01, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x72, 0x65, 0x73,
	0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x70, 0x65, 0x65, 0x72, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x73, 0x20, 0x75, 0x70, 0x2d, 0x74, 0x6f, 0x2d, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4a,
	0x2f, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x28, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x2e, 0x0a, 0x24, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x6f, 0x72, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x55, 0x55,
	0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24,
	0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03, 0x34, 0x31, 0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45,
	0x74, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x44, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x3d, 0x0a, 0x33,
	0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34,
	0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12, 0xa1, 0x06, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb2, 0x05, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22,
	0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x85, 0x05, 0x0a, 0x08, 0x65, 0x63, 0x68, 0x6f, 0x20, 0x72, 0x70, 0x63,
	0x12, 0x0f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x1a, 0x8f, 0x02, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x63, 0x61,
	0x6e, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x6f, 0x72, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x2e, 0x4a, 0x2f, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x28, 0x0a, 0x1e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x69,
	0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2e, 0x0a, 0x24, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x72, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35,
	0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03, 0x34, 0x31, 0x32, 0x12,
	0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x44, 0x0a, 0x03, 0x34, 0x30, 0x39,
	0x12, 0x3d, 0x0a, 0x33, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e,
	0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a,
	0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12, 0x90, 0x05, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xaf, 0x04, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x90, 0x04, 0x0a, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x1a,
	0x25, 0x41, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x61,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x40, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x39, 0x0a,
	0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0xfa, 0x01, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0xf2, 0x01, 0x0a, 0xe7, 0x01, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x73, 0x3a, 0x20, 0x0a, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x2c, 0x20, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x20, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x2c, 0x20, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x20,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x2c, 0x20, 0x0a, 0x41, 0x43, 0x4c, 0x20, 0x6f, 0x72, 0x20, 0x49, 0x50, 0x2d, 0x41, 0x43,
	0x4c, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33,
	0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12, 0x92,
	0x04, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x03,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92,
	0x41, 0x80, 0x03, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x1a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x4a, 0x39, 0x0a, 0x03, 0x34, 0x30, 0x34,
	0x12, 0x32, 0x0a, 0x28, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x69,
	0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x53, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4c, 0x0a, 0x42, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20,
	0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30,
	0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03, 0x34, 0x31, 0x32, 0x12, 0x18, 0x0a,
	0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e,
	0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23,
	0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x12, 0xe7, 0x02, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xfb, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x92, 0x41, 0xdf, 0x01, 0x0a, 0x0d,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x0e, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x1a, 0x11, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12,
	0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65,
	0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12, 0x90, 0x03,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x29, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xb5, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x92, 0x02, 0x0a, 0x0b,
	0x67, 0x65, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0b, 0x47, 0x65, 0x74,
	0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x13, 0x47, 0x65, 0x74, 0x20, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x62, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x22, 0x0a,
	0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x4a, 0x34, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2d, 0x0a, 0x23, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24,
	0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34,
	0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x12, 0xbc, 0x05, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xd2, 0x04, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x99, 0x04, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x1a, 0x28, 0x41,
	0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x68, 0x61, 0x73, 0x20,
	0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x40, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x39,
	0x0a, 0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0xfa, 0x01, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0xf2, 0x01, 0x0a, 0xe7, 0x01, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x2c, 0x20, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x20, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2c, 0x20, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x2c, 0x20, 0x0a, 0x41, 0x43, 0x4c, 0x20, 0x6f, 0x72, 0x20, 0x49, 0x50, 0x2d, 0x41,
	0x43, 0x4c, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a,
	0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30,
	0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12,
	0xbe, 0x04, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x2f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc6, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31,
	0x2a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x49, 0x44,
	0x7d, 0x92, 0x41, 0x8b, 0x03, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x1a, 0x24, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x49,
	0x44, 0x2e, 0x4a, 0x3a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x33, 0x0a, 0x29, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x56,
	0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x45, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a,
	0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03, 0x34, 0x31, 0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74,
	0x61, 0x67, 0x20, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34,
	0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x12, 0x83, 0x03, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x2e, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x92, 0x41, 0xd8, 0x01, 0x0a, 0x10,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x12, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x2e, 0x1a, 0x04, 0x54, 0x4f, 0x44, 0x4f, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a,
	0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f,
	0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30,
	0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12, 0xb9, 0x03, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xd5, 0x02, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f,
	0x7b, 0x49, 0x44, 0x7d, 0x92, 0x41, 0x9a, 0x02, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x20, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x0e, 0x47, 0x65, 0x74, 0x20, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x1a, 0x14, 0x47, 0x65, 0x74, 0x20, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x4a, 0x22,
	0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2e, 0x0a, 0x24, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x20, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31,
	0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x12, 0x97, 0x03, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x26,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xba, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x83, 0x02, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x20, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x08, 0x47, 0x65, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0x10, 0x47,
	0x65, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x62, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x4a,
	0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x4a, 0x31, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2a, 0x0a, 0x20, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a,
	0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a,
	0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x28, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x21, 0x0a, 0x17, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12, 0xf5, 0x02, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x92, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x92, 0x41,
	0xe2, 0x01, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x24,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x1a, 0x04, 0x54, 0x4f, 0x44, 0x4f, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35,
	0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65,
	0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x28, 0x0a, 0x03, 0x35, 0x30,
	0x30, 0x12, 0x21, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x4f, 0x53, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x12, 0xcd, 0x03, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xda, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0xb5, 0x02, 0x0a,
	0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x34, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20,
	0x49, 0x50, 0x73, 0x4a, 0x24, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x1d, 0x0a, 0x13, 0x50, 0x6f,
	0x72, 0x74, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x20, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0x19, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35,
	0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12,
	0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x12, 0xb4, 0x05, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x72, 0x74, 0x7d, 0x92, 0x41, 0x8a,
	0x04, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a,
	0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x6f, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x70, 0x6f, 0x72, 0x74,
	0x4a, 0x20, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x19, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x20,
	0x69, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x3c, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x35, 0x0a, 0x2b, 0x50, 0x6f, 0x72,
	0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20,
	0x61, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x5b, 0x0a,
	0x03, 0x35, 0x30, 0x33, 0x12, 0x54, 0x0a, 0x4a, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x28, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x29, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03, 0x34, 0x31,
	0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x42, 0x0a, 0x03, 0x34,
	0x30, 0x39, 0x12, 0x3b, 0x0a, 0x31, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a,
	0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12, 0x96, 0x03, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x31, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x02, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x92, 0x41, 0xf6, 0x01, 0x0a, 0x13,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b,
	0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35,
	0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12,
	0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x12, 0xa2, 0x05, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xaf, 0x04, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x1a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x72, 0x74, 0x7d, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x83, 0x04, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x35, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x70, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x61,
	0x79, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x20, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x19, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x3c, 0x0a,
	0x03, 0x34, 0x30, 0x34, 0x12, 0x35, 0x0a, 0x2b, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x64, 0x6f, 0x65,
	0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x4e, 0x0a, 0x03, 0x35,
	0x30, 0x33, 0x12, 0x47, 0x0a, 0x3d, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x20, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20,
	0x62, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6e, 0x6f, 0x77, 0x20, 0x28,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x29, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35,
	0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03, 0x34, 0x31, 0x32, 0x12,
	0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x42, 0x0a, 0x03, 0x34, 0x30, 0x39,
	0x12, 0x3b, 0x0a, 0x31, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e,
	0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x12, 0xd8, 0x03, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xeb, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12,
	0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x72, 0x74, 0x7d, 0x92, 0x41,
	0xc2, 0x02, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x47, 0x65, 0x74, 0x20, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x2f, 0x47, 0x65, 0x74, 0x20,
	0x61, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x20, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x19, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x3c, 0x0a,
	0x03, 0x34, 0x30, 0x34, 0x12, 0x35, 0x0a, 0x2b, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x64, 0x6f, 0x65,
	0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35,
	0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12,
	0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x42, 0x0d, 0x5a, 0x0b, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2f, 0x76, 0x32,
	0x3b, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lightbits_api_duros_v2_durosapiv2_proto_rawDescOnce sync.Once
	file_lightbits_api_duros_v2_durosapiv2_proto_rawDescData = file_lightbits_api_duros_v2_durosapiv2_proto_rawDesc
)

func file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP() []byte {
	file_lightbits_api_duros_v2_durosapiv2_proto_rawDescOnce.Do(func() {
		file_lightbits_api_duros_v2_durosapiv2_proto_rawDescData = protoimpl.X.CompressGZIP(file_lightbits_api_duros_v2_durosapiv2_proto_rawDescData)
	})
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescData
}

var file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_lightbits_api_duros_v2_durosapiv2_proto_goTypes = []interface{}{
	(CredsType)(0),                          // 0: lightbits.api.duros.v2.CredsType
	(ProtectionStateEnum)(0),                // 1: lightbits.api.duros.v2.ProtectionStateEnum
	(AdminEndpoint_StateEnum)(0),            // 2: lightbits.api.duros.v2.AdminEndpoint.StateEnum
	(CreateVolumeRequest_SectorSizeEnum)(0), // 3: lightbits.api.duros.v2.CreateVolumeRequest.SectorSizeEnum
	(UserNvmeDevicesResponse_StateEnum)(0),  // 4: lightbits.api.duros.v2.UserNvmeDevicesResponse.StateEnum
	(DurosNodeInfo_State)(0),                // 5: lightbits.api.duros.v2.DurosNodeInfo.State
	(DurosNodeInfo_StatusEnum)(0),           // 6: lightbits.api.duros.v2.DurosNodeInfo.StatusEnum
	(ClusterHealth_State)(0),                // 7: lightbits.api.duros.v2.ClusterHealth.State
	(Volume_StateEnum)(0),                   // 8: lightbits.api.duros.v2.Volume.StateEnum
	(Volume_ProtocolEnum)(0),                // 9: lightbits.api.duros.v2.Volume.ProtocolEnum
	(Server_UpgradeStatusEnum)(0),           // 10: lightbits.api.duros.v2.Server.UpgradeStatusEnum
	(Server_RiskOfServiceLossEnum)(0),       // 11: lightbits.api.duros.v2.Server.RiskOfServiceLossEnum
	(Server_ServerStateEnum)(0),             // 12: lightbits.api.duros.v2.Server.ServerStateEnum
	(*AdminEndpoint)(nil),                   // 13: lightbits.api.duros.v2.AdminEndpoint
	(*GetAdminEndpointRequest)(nil),         // 14: lightbits.api.duros.v2.GetAdminEndpointRequest
	(*ListAdminEndpointsResponse)(nil),      // 15: lightbits.api.duros.v2.ListAdminEndpointsResponse
	(*ListAdminEndpointsRequest)(nil),       // 16: lightbits.api.duros.v2.ListAdminEndpointsRequest
	(*CreateAdminEndpointRequest)(nil),      // 17: lightbits.api.duros.v2.CreateAdminEndpointRequest
	(*UpdateAdminEndpointRequest)(nil),      // 18: lightbits.api.duros.v2.UpdateAdminEndpointRequest
	(*DeleteAdminEndpointRequest)(nil),      // 19: lightbits.api.duros.v2.DeleteAdminEndpointRequest
	(*DeleteAdminEndpointResponse)(nil),     // 20: lightbits.api.duros.v2.DeleteAdminEndpointResponse
	(*CreateCredentialRequest)(nil),         // 21: lightbits.api.duros.v2.CreateCredentialRequest
	(*Credential)(nil),                      // 22: lightbits.api.duros.v2.Credential
	(*DeleteCredentialRequest)(nil),         // 23: lightbits.api.duros.v2.DeleteCredentialRequest
	(*DeleteCredentialResponse)(nil),        // 24: lightbits.api.duros.v2.DeleteCredentialResponse
	(*ListCredentialsRequest)(nil),          // 25: lightbits.api.duros.v2.ListCredentialsRequest
	(*ListCredentialsResponse)(nil),         // 26: lightbits.api.duros.v2.ListCredentialsResponse
	(*GetCredentialRequest)(nil),            // 27: lightbits.api.duros.v2.GetCredentialRequest
	(*CreateProjectRequest)(nil),            // 28: lightbits.api.duros.v2.CreateProjectRequest
	(*Project)(nil),                         // 29: lightbits.api.duros.v2.Project
	(*DeleteProjectRequest)(nil),            // 30: lightbits.api.duros.v2.DeleteProjectRequest
	(*DeleteProjectResponse)(nil),           // 31: lightbits.api.duros.v2.DeleteProjectResponse
	(*ListProjectsRequest)(nil),             // 32: lightbits.api.duros.v2.ListProjectsRequest
	(*ListProjectsResponse)(nil),            // 33: lightbits.api.duros.v2.ListProjectsResponse
	(*GetProjectRequest)(nil),               // 34: lightbits.api.duros.v2.GetProjectRequest
	(*StringList)(nil),                      // 35: lightbits.api.duros.v2.StringList
	(*GetVersionRequest)(nil),               // 36: lightbits.api.duros.v2.GetVersionRequest
	(*CreateVolumeRequest)(nil),             // 37: lightbits.api.duros.v2.CreateVolumeRequest
	(*DeleteVolumeRequest)(nil),             // 38: lightbits.api.duros.v2.DeleteVolumeRequest
	(*DeleteVolumeResponse)(nil),            // 39: lightbits.api.duros.v2.DeleteVolumeResponse
	(*EnableServerRequest)(nil),             // 40: lightbits.api.duros.v2.EnableServerRequest
	(*DisableServerRequest)(nil),            // 41: lightbits.api.duros.v2.DisableServerRequest
	(*DeleteServerRequest)(nil),             // 42: lightbits.api.duros.v2.DeleteServerRequest
	(*ReplaceNodeRequest)(nil),              // 43: lightbits.api.duros.v2.ReplaceNodeRequest
	(*CreateServerRequest)(nil),             // 44: lightbits.api.duros.v2.CreateServerRequest
	(*UpdateVolumeRequest)(nil),             // 45: lightbits.api.duros.v2.UpdateVolumeRequest
	(*UpgradeServerRequest)(nil),            // 46: lightbits.api.duros.v2.UpgradeServerRequest
	(*UpgradeClusterRequest)(nil),           // 47: lightbits.api.duros.v2.UpgradeClusterRequest
	(*GetClusterRequest)(nil),               // 48: lightbits.api.duros.v2.GetClusterRequest
	(*UpdateNvmeDeviceRequest)(nil),         // 49: lightbits.api.duros.v2.UpdateNvmeDeviceRequest
	(*AddNvmeDeviceRequest)(nil),            // 50: lightbits.api.duros.v2.AddNvmeDeviceRequest
	(*GetHostRequest)(nil),                  // 51: lightbits.api.duros.v2.GetHostRequest
	(*ListHostsRequest)(nil),                // 52: lightbits.api.duros.v2.ListHostsRequest
	(*ListHostsResponse)(nil),               // 53: lightbits.api.duros.v2.ListHostsResponse
	(*ListNodeRequest)(nil),                 // 54: lightbits.api.duros.v2.ListNodeRequest
	(*GetVolumeRequest)(nil),                // 55: lightbits.api.duros.v2.GetVolumeRequest
	(*GetNodeRequest)(nil),                  // 56: lightbits.api.duros.v2.GetNodeRequest
	(*ListVolumeRequest)(nil),               // 57: lightbits.api.duros.v2.ListVolumeRequest
	(*ListNvmeDevicesRequest)(nil),          // 58: lightbits.api.duros.v2.ListNvmeDevicesRequest
	(*GetNvmeDeviceRequest)(nil),            // 59: lightbits.api.duros.v2.GetNvmeDeviceRequest
	(*ListNvmeDevicesResponse)(nil),         // 60: lightbits.api.duros.v2.ListNvmeDevicesResponse
	(*ConnectedHost)(nil),                   // 61: lightbits.api.duros.v2.ConnectedHost
	(*UserNvmeDevicesResponse)(nil),         // 62: lightbits.api.duros.v2.UserNvmeDevicesResponse
	(*DurosNodeInfo)(nil),                   // 63: lightbits.api.duros.v2.DurosNodeInfo
	(*ListNodesResponse)(nil),               // 64: lightbits.api.duros.v2.ListNodesResponse
	(*ListVolumesResponse)(nil),             // 65: lightbits.api.duros.v2.ListVolumesResponse
	(*UpdateNvmeDeviceResponse)(nil),        // 66: lightbits.api.duros.v2.UpdateNvmeDeviceResponse
	(*AddNvmeDeviceResponse)(nil),           // 67: lightbits.api.duros.v2.AddNvmeDeviceResponse
	(*UpdateVolumeResponse)(nil),            // 68: lightbits.api.duros.v2.UpdateVolumeResponse
	(*UpgradeServerResponse)(nil),           // 69: lightbits.api.duros.v2.UpgradeServerResponse
	(*UpgradeClusterResponse)(nil),          // 70: lightbits.api.duros.v2.UpgradeClusterResponse
	(*ReplaceNodeResponse)(nil),             // 71: lightbits.api.duros.v2.ReplaceNodeResponse
	(*DeleteServerResponse)(nil),            // 72: lightbits.api.duros.v2.DeleteServerResponse
	(*DisableServerResponse)(nil),           // 73: lightbits.api.duros.v2.DisableServerResponse
	(*ListServersRequest)(nil),              // 74: lightbits.api.duros.v2.ListServersRequest
	(*GetServerRequest)(nil),                // 75: lightbits.api.duros.v2.GetServerRequest
	(*ListServersResponse)(nil),             // 76: lightbits.api.duros.v2.ListServersResponse
	(*Version)(nil),                         // 77: lightbits.api.duros.v2.Version
	(*ClusterInfo)(nil),                     // 78: lightbits.api.duros.v2.ClusterInfo
	(*ClusterInfoV2)(nil),                   // 79: lightbits.api.duros.v2.ClusterInfoV2
	(*ClusterHealth)(nil),                   // 80: lightbits.api.duros.v2.ClusterHealth
	(*Volume)(nil),                          // 81: lightbits.api.duros.v2.Volume
	(*Server)(nil),                          // 82: lightbits.api.duros.v2.Server
	(*GetRoleRequest)(nil),                  // 83: lightbits.api.duros.v2.GetRoleRequest
	(*GetRoleResponse)(nil),                 // 84: lightbits.api.duros.v2.GetRoleResponse
	(*Role)(nil),                            // 85: lightbits.api.duros.v2.Role
	(*ListRolesRequest)(nil),                // 86: lightbits.api.duros.v2.ListRolesRequest
	(*ListRolesResponse)(nil),               // 87: lightbits.api.duros.v2.ListRolesResponse
	(*timestamppb.Timestamp)(nil),           // 88: google.protobuf.Timestamp
	(*NodeStatisticsApi)(nil),               // 89: lightbits.api.duros.v2.NodeStatisticsApi
	(*ClusterStatisticsApi)(nil),            // 90: lightbits.api.duros.v2.ClusterStatisticsApi
	(*VolumeStatisticsApi)(nil),             // 91: lightbits.api.duros.v2.VolumeStatisticsApi
}
var file_lightbits_api_duros_v2_durosapiv2_proto_depIdxs = []int32{
	13, // 0: lightbits.api.duros.v2.ListAdminEndpointsResponse.adminEndpoints:type_name -> lightbits.api.duros.v2.AdminEndpoint
	0,  // 1: lightbits.api.duros.v2.CreateCredentialRequest.type:type_name -> lightbits.api.duros.v2.CredsType
	0,  // 2: lightbits.api.duros.v2.Credential.type:type_name -> lightbits.api.duros.v2.CredsType
	22, // 3: lightbits.api.duros.v2.ListCredentialsResponse.credentials:type_name -> lightbits.api.duros.v2.Credential
	29, // 4: lightbits.api.duros.v2.ListProjectsResponse.projects:type_name -> lightbits.api.duros.v2.Project
	35, // 5: lightbits.api.duros.v2.CreateVolumeRequest.acl:type_name -> lightbits.api.duros.v2.StringList
	35, // 6: lightbits.api.duros.v2.CreateVolumeRequest.IPAcl:type_name -> lightbits.api.duros.v2.StringList
	3,  // 7: lightbits.api.duros.v2.CreateVolumeRequest.sectorSize:type_name -> lightbits.api.duros.v2.CreateVolumeRequest.SectorSizeEnum
	35, // 8: lightbits.api.duros.v2.UpdateVolumeRequest.acl:type_name -> lightbits.api.duros.v2.StringList
	35, // 9: lightbits.api.duros.v2.UpdateVolumeRequest.IPAcl:type_name -> lightbits.api.duros.v2.StringList
	61, // 10: lightbits.api.duros.v2.ListHostsResponse.connectedHosts:type_name -> lightbits.api.duros.v2.ConnectedHost
	62, // 11: lightbits.api.duros.v2.ListNvmeDevicesResponse.NvmeDevices:type_name -> lightbits.api.duros.v2.UserNvmeDevicesResponse
	4,  // 12: lightbits.api.duros.v2.UserNvmeDevicesResponse.state:type_name -> lightbits.api.duros.v2.UserNvmeDevicesResponse.StateEnum
	88, // 13: lightbits.api.duros.v2.UserNvmeDevicesResponse.failureTime:type_name -> google.protobuf.Timestamp
	88, // 14: lightbits.api.duros.v2.UserNvmeDevicesResponse.rebuildCompletionTime:type_name -> google.protobuf.Timestamp
	5,  // 15: lightbits.api.duros.v2.DurosNodeInfo.state:type_name -> lightbits.api.duros.v2.DurosNodeInfo.State
	6,  // 16: lightbits.api.duros.v2.DurosNodeInfo.status:type_name -> lightbits.api.duros.v2.DurosNodeInfo.StatusEnum
	89, // 17: lightbits.api.duros.v2.DurosNodeInfo.statistics:type_name -> lightbits.api.duros.v2.NodeStatisticsApi
	63, // 18: lightbits.api.duros.v2.ListNodesResponse.nodes:type_name -> lightbits.api.duros.v2.DurosNodeInfo
	81, // 19: lightbits.api.duros.v2.ListVolumesResponse.volumes:type_name -> lightbits.api.duros.v2.Volume
	11, // 20: lightbits.api.duros.v2.ListServersRequest.RiskOfServiceLoss:type_name -> lightbits.api.duros.v2.Server.RiskOfServiceLossEnum
	82, // 21: lightbits.api.duros.v2.ListServersResponse.servers:type_name -> lightbits.api.duros.v2.Server
	90, // 22: lightbits.api.duros.v2.ClusterInfo.statistics:type_name -> lightbits.api.duros.v2.ClusterStatisticsApi
	80, // 23: lightbits.api.duros.v2.ClusterInfo.health:type_name -> lightbits.api.duros.v2.ClusterHealth
	7,  // 24: lightbits.api.duros.v2.ClusterHealth.state:type_name -> lightbits.api.duros.v2.ClusterHealth.State
	8,  // 25: lightbits.api.duros.v2.Volume.state:type_name -> lightbits.api.duros.v2.Volume.StateEnum
	1,  // 26: lightbits.api.duros.v2.Volume.protectionState:type_name -> lightbits.api.duros.v2.ProtectionStateEnum
	35, // 27: lightbits.api.duros.v2.Volume.acl:type_name -> lightbits.api.duros.v2.StringList
	91, // 28: lightbits.api.duros.v2.Volume.statistics:type_name -> lightbits.api.duros.v2.VolumeStatisticsApi
	35, // 29: lightbits.api.duros.v2.Volume.IPAcl:type_name -> lightbits.api.duros.v2.StringList
	11, // 30: lightbits.api.duros.v2.Server.RiskOfServiceLossState:type_name -> lightbits.api.duros.v2.Server.RiskOfServiceLossEnum
	12, // 31: lightbits.api.duros.v2.Server.state:type_name -> lightbits.api.duros.v2.Server.ServerStateEnum
	10, // 32: lightbits.api.duros.v2.Server.UpgradeStatus:type_name -> lightbits.api.duros.v2.Server.UpgradeStatusEnum
	85, // 33: lightbits.api.duros.v2.GetRoleResponse.role:type_name -> lightbits.api.duros.v2.Role
	85, // 34: lightbits.api.duros.v2.ListRolesResponse.roles:type_name -> lightbits.api.duros.v2.Role
	36, // 35: lightbits.api.duros.v2.DurosAPI.GetVersion:input_type -> lightbits.api.duros.v2.GetVersionRequest
	37, // 36: lightbits.api.duros.v2.DurosAPI.CreateVolume:input_type -> lightbits.api.duros.v2.CreateVolumeRequest
	38, // 37: lightbits.api.duros.v2.DurosAPI.DeleteVolume:input_type -> lightbits.api.duros.v2.DeleteVolumeRequest
	57, // 38: lightbits.api.duros.v2.DurosAPI.ListVolumes:input_type -> lightbits.api.duros.v2.ListVolumeRequest
	51, // 39: lightbits.api.duros.v2.DurosAPI.GetHost:input_type -> lightbits.api.duros.v2.GetHostRequest
	52, // 40: lightbits.api.duros.v2.DurosAPI.ListHosts:input_type -> lightbits.api.duros.v2.ListHostsRequest
	55, // 41: lightbits.api.duros.v2.DurosAPI.GetVolume:input_type -> lightbits.api.duros.v2.GetVolumeRequest
	54, // 42: lightbits.api.duros.v2.DurosAPI.ListNodes:input_type -> lightbits.api.duros.v2.ListNodeRequest
	56, // 43: lightbits.api.duros.v2.DurosAPI.GetNode:input_type -> lightbits.api.duros.v2.GetNodeRequest
	58, // 44: lightbits.api.duros.v2.DurosAPI.ListNvmeDevices:input_type -> lightbits.api.duros.v2.ListNvmeDevicesRequest
	59, // 45: lightbits.api.duros.v2.DurosAPI.GetNvmeDevice:input_type -> lightbits.api.duros.v2.GetNvmeDeviceRequest
	48, // 46: lightbits.api.duros.v2.DurosAPI.GetCluster:input_type -> lightbits.api.duros.v2.GetClusterRequest
	48, // 47: lightbits.api.duros.v2.DurosAPI.GetClusterInfo:input_type -> lightbits.api.duros.v2.GetClusterRequest
	49, // 48: lightbits.api.duros.v2.DurosAPI.UpdateNvmeDevice:input_type -> lightbits.api.duros.v2.UpdateNvmeDeviceRequest
	50, // 49: lightbits.api.duros.v2.DurosAPI.AddNvmeDevice:input_type -> lightbits.api.duros.v2.AddNvmeDeviceRequest
	45, // 50: lightbits.api.duros.v2.DurosAPI.UpdateVolume:input_type -> lightbits.api.duros.v2.UpdateVolumeRequest
	75, // 51: lightbits.api.duros.v2.DurosAPI.GetServer:input_type -> lightbits.api.duros.v2.GetServerRequest
	74, // 52: lightbits.api.duros.v2.DurosAPI.ListServers:input_type -> lightbits.api.duros.v2.ListServersRequest
	46, // 53: lightbits.api.duros.v2.DurosAPI.UpgradeServer:input_type -> lightbits.api.duros.v2.UpgradeServerRequest
	47, // 54: lightbits.api.duros.v2.DurosAPI.UpgradeCluster:input_type -> lightbits.api.duros.v2.UpgradeClusterRequest
	44, // 55: lightbits.api.duros.v2.DurosAPI.CreateServer:input_type -> lightbits.api.duros.v2.CreateServerRequest
	43, // 56: lightbits.api.duros.v2.DurosAPI.ReplaceNode:input_type -> lightbits.api.duros.v2.ReplaceNodeRequest
	42, // 57: lightbits.api.duros.v2.DurosAPI.DeleteServer:input_type -> lightbits.api.duros.v2.DeleteServerRequest
	40, // 58: lightbits.api.duros.v2.DurosAPI.EnableServer:input_type -> lightbits.api.duros.v2.EnableServerRequest
	41, // 59: lightbits.api.duros.v2.DurosAPI.DisableServer:input_type -> lightbits.api.duros.v2.DisableServerRequest
	28, // 60: lightbits.api.duros.v2.DurosAPI.CreateProject:input_type -> lightbits.api.duros.v2.CreateProjectRequest
	30, // 61: lightbits.api.duros.v2.DurosAPI.DeleteProject:input_type -> lightbits.api.duros.v2.DeleteProjectRequest
	32, // 62: lightbits.api.duros.v2.DurosAPI.ListProjects:input_type -> lightbits.api.duros.v2.ListProjectsRequest
	34, // 63: lightbits.api.duros.v2.DurosAPI.GetProject:input_type -> lightbits.api.duros.v2.GetProjectRequest
	21, // 64: lightbits.api.duros.v2.DurosAPI.CreateCredential:input_type -> lightbits.api.duros.v2.CreateCredentialRequest
	23, // 65: lightbits.api.duros.v2.DurosAPI.DeleteCredential:input_type -> lightbits.api.duros.v2.DeleteCredentialRequest
	25, // 66: lightbits.api.duros.v2.DurosAPI.ListCredentials:input_type -> lightbits.api.duros.v2.ListCredentialsRequest
	27, // 67: lightbits.api.duros.v2.DurosAPI.GetCredential:input_type -> lightbits.api.duros.v2.GetCredentialRequest
	83, // 68: lightbits.api.duros.v2.DurosAPI.GetRole:input_type -> lightbits.api.duros.v2.GetRoleRequest
	86, // 69: lightbits.api.duros.v2.DurosAPI.ListRoles:input_type -> lightbits.api.duros.v2.ListRolesRequest
	17, // 70: lightbits.api.duros.v2.DurosAPI.CreateAdminEndpoint:input_type -> lightbits.api.duros.v2.CreateAdminEndpointRequest
	19, // 71: lightbits.api.duros.v2.DurosAPI.DeleteAdminEndpoint:input_type -> lightbits.api.duros.v2.DeleteAdminEndpointRequest
	16, // 72: lightbits.api.duros.v2.DurosAPI.ListAdminEndpoints:input_type -> lightbits.api.duros.v2.ListAdminEndpointsRequest
	18, // 73: lightbits.api.duros.v2.DurosAPI.UpdateAdminEndpoint:input_type -> lightbits.api.duros.v2.UpdateAdminEndpointRequest
	14, // 74: lightbits.api.duros.v2.DurosAPI.GetAdminEndpoint:input_type -> lightbits.api.duros.v2.GetAdminEndpointRequest
	77, // 75: lightbits.api.duros.v2.DurosAPI.GetVersion:output_type -> lightbits.api.duros.v2.Version
	81, // 76: lightbits.api.duros.v2.DurosAPI.CreateVolume:output_type -> lightbits.api.duros.v2.Volume
	39, // 77: lightbits.api.duros.v2.DurosAPI.DeleteVolume:output_type -> lightbits.api.duros.v2.DeleteVolumeResponse
	65, // 78: lightbits.api.duros.v2.DurosAPI.ListVolumes:output_type -> lightbits.api.duros.v2.ListVolumesResponse
	61, // 79: lightbits.api.duros.v2.DurosAPI.GetHost:output_type -> lightbits.api.duros.v2.ConnectedHost
	53, // 80: lightbits.api.duros.v2.DurosAPI.ListHosts:output_type -> lightbits.api.duros.v2.ListHostsResponse
	81, // 81: lightbits.api.duros.v2.DurosAPI.GetVolume:output_type -> lightbits.api.duros.v2.Volume
	64, // 82: lightbits.api.duros.v2.DurosAPI.ListNodes:output_type -> lightbits.api.duros.v2.ListNodesResponse
	63, // 83: lightbits.api.duros.v2.DurosAPI.GetNode:output_type -> lightbits.api.duros.v2.DurosNodeInfo
	60, // 84: lightbits.api.duros.v2.DurosAPI.ListNvmeDevices:output_type -> lightbits.api.duros.v2.ListNvmeDevicesResponse
	62, // 85: lightbits.api.duros.v2.DurosAPI.GetNvmeDevice:output_type -> lightbits.api.duros.v2.UserNvmeDevicesResponse
	78, // 86: lightbits.api.duros.v2.DurosAPI.GetCluster:output_type -> lightbits.api.duros.v2.ClusterInfo
	79, // 87: lightbits.api.duros.v2.DurosAPI.GetClusterInfo:output_type -> lightbits.api.duros.v2.ClusterInfoV2
	66, // 88: lightbits.api.duros.v2.DurosAPI.UpdateNvmeDevice:output_type -> lightbits.api.duros.v2.UpdateNvmeDeviceResponse
	67, // 89: lightbits.api.duros.v2.DurosAPI.AddNvmeDevice:output_type -> lightbits.api.duros.v2.AddNvmeDeviceResponse
	68, // 90: lightbits.api.duros.v2.DurosAPI.UpdateVolume:output_type -> lightbits.api.duros.v2.UpdateVolumeResponse
	82, // 91: lightbits.api.duros.v2.DurosAPI.GetServer:output_type -> lightbits.api.duros.v2.Server
	76, // 92: lightbits.api.duros.v2.DurosAPI.ListServers:output_type -> lightbits.api.duros.v2.ListServersResponse
	69, // 93: lightbits.api.duros.v2.DurosAPI.UpgradeServer:output_type -> lightbits.api.duros.v2.UpgradeServerResponse
	70, // 94: lightbits.api.duros.v2.DurosAPI.UpgradeCluster:output_type -> lightbits.api.duros.v2.UpgradeClusterResponse
	82, // 95: lightbits.api.duros.v2.DurosAPI.CreateServer:output_type -> lightbits.api.duros.v2.Server
	71, // 96: lightbits.api.duros.v2.DurosAPI.ReplaceNode:output_type -> lightbits.api.duros.v2.ReplaceNodeResponse
	72, // 97: lightbits.api.duros.v2.DurosAPI.DeleteServer:output_type -> lightbits.api.duros.v2.DeleteServerResponse
	82, // 98: lightbits.api.duros.v2.DurosAPI.EnableServer:output_type -> lightbits.api.duros.v2.Server
	73, // 99: lightbits.api.duros.v2.DurosAPI.DisableServer:output_type -> lightbits.api.duros.v2.DisableServerResponse
	29, // 100: lightbits.api.duros.v2.DurosAPI.CreateProject:output_type -> lightbits.api.duros.v2.Project
	31, // 101: lightbits.api.duros.v2.DurosAPI.DeleteProject:output_type -> lightbits.api.duros.v2.DeleteProjectResponse
	33, // 102: lightbits.api.duros.v2.DurosAPI.ListProjects:output_type -> lightbits.api.duros.v2.ListProjectsResponse
	29, // 103: lightbits.api.duros.v2.DurosAPI.GetProject:output_type -> lightbits.api.duros.v2.Project
	22, // 104: lightbits.api.duros.v2.DurosAPI.CreateCredential:output_type -> lightbits.api.duros.v2.Credential
	24, // 105: lightbits.api.duros.v2.DurosAPI.DeleteCredential:output_type -> lightbits.api.duros.v2.DeleteCredentialResponse
	26, // 106: lightbits.api.duros.v2.DurosAPI.ListCredentials:output_type -> lightbits.api.duros.v2.ListCredentialsResponse
	22, // 107: lightbits.api.duros.v2.DurosAPI.GetCredential:output_type -> lightbits.api.duros.v2.Credential
	84, // 108: lightbits.api.duros.v2.DurosAPI.GetRole:output_type -> lightbits.api.duros.v2.GetRoleResponse
	87, // 109: lightbits.api.duros.v2.DurosAPI.ListRoles:output_type -> lightbits.api.duros.v2.ListRolesResponse
	13, // 110: lightbits.api.duros.v2.DurosAPI.CreateAdminEndpoint:output_type -> lightbits.api.duros.v2.AdminEndpoint
	20, // 111: lightbits.api.duros.v2.DurosAPI.DeleteAdminEndpoint:output_type -> lightbits.api.duros.v2.DeleteAdminEndpointResponse
	15, // 112: lightbits.api.duros.v2.DurosAPI.ListAdminEndpoints:output_type -> lightbits.api.duros.v2.ListAdminEndpointsResponse
	13, // 113: lightbits.api.duros.v2.DurosAPI.UpdateAdminEndpoint:output_type -> lightbits.api.duros.v2.AdminEndpoint
	13, // 114: lightbits.api.duros.v2.DurosAPI.GetAdminEndpoint:output_type -> lightbits.api.duros.v2.AdminEndpoint
	75, // [75:115] is the sub-list for method output_type
	35, // [35:75] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_lightbits_api_duros_v2_durosapiv2_proto_init() }
func file_lightbits_api_duros_v2_durosapiv2_proto_init() {
	if File_lightbits_api_duros_v2_durosapiv2_proto != nil {
		return
	}
	file_lightbits_api_duros_v2_statisticsapiv2_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdminEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAdminEndpointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAdminEndpointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAdminEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAdminEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdminEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdminEndpointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNvmeDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNvmeDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHostsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmeDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNvmeDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmeDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectedHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNvmeDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DurosNodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVolumesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNvmeDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNvmeDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfoV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRolesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRolesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lightbits_api_duros_v2_durosapiv2_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lightbits_api_duros_v2_durosapiv2_proto_goTypes,
		DependencyIndexes: file_lightbits_api_duros_v2_durosapiv2_proto_depIdxs,
		EnumInfos:         file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes,
		MessageInfos:      file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes,
	}.Build()
	File_lightbits_api_duros_v2_durosapiv2_proto = out.File
	file_lightbits_api_duros_v2_durosapiv2_proto_rawDesc = nil
	file_lightbits_api_duros_v2_durosapiv2_proto_goTypes = nil
	file_lightbits_api_duros_v2_durosapiv2_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DurosAPIClient is the client API for DurosAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DurosAPIClient interface {
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*Version, error)
	CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*Volume, error)
	DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error)
	ListVolumes(ctx context.Context, in *ListVolumeRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error)
	GetHost(ctx context.Context, in *GetHostRequest, opts ...grpc.CallOption) (*ConnectedHost, error)
	ListHosts(ctx context.Context, in *ListHostsRequest, opts ...grpc.CallOption) (*ListHostsResponse, error)
	GetVolume(ctx context.Context, in *GetVolumeRequest, opts ...grpc.CallOption) (*Volume, error)
	ListNodes(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*DurosNodeInfo, error)
	ListNvmeDevices(ctx context.Context, in *ListNvmeDevicesRequest, opts ...grpc.CallOption) (*ListNvmeDevicesResponse, error)
	GetNvmeDevice(ctx context.Context, in *GetNvmeDeviceRequest, opts ...grpc.CallOption) (*UserNvmeDevicesResponse, error)
	GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*ClusterInfo, error)
	GetClusterInfo(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*ClusterInfoV2, error)
	UpdateNvmeDevice(ctx context.Context, in *UpdateNvmeDeviceRequest, opts ...grpc.CallOption) (*UpdateNvmeDeviceResponse, error)
	AddNvmeDevice(ctx context.Context, in *AddNvmeDeviceRequest, opts ...grpc.CallOption) (*AddNvmeDeviceResponse, error)
	UpdateVolume(ctx context.Context, in *UpdateVolumeRequest, opts ...grpc.CallOption) (*UpdateVolumeResponse, error)
	GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*Server, error)
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
	UpgradeServer(ctx context.Context, in *UpgradeServerRequest, opts ...grpc.CallOption) (*UpgradeServerResponse, error)
	UpgradeCluster(ctx context.Context, in *UpgradeClusterRequest, opts ...grpc.CallOption) (*UpgradeClusterResponse, error)
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*Server, error)
	ReplaceNode(ctx context.Context, in *ReplaceNodeRequest, opts ...grpc.CallOption) (*ReplaceNodeResponse, error)
	DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error)
	EnableServer(ctx context.Context, in *EnableServerRequest, opts ...grpc.CallOption) (*Server, error)
	DisableServer(ctx context.Context, in *DisableServerRequest, opts ...grpc.CallOption) (*DisableServerResponse, error)
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*Project, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error)
	CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*Credential, error)
	DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*DeleteCredentialResponse, error)
	ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error)
	GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*Credential, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	CreateAdminEndpoint(ctx context.Context, in *CreateAdminEndpointRequest, opts ...grpc.CallOption) (*AdminEndpoint, error)
	DeleteAdminEndpoint(ctx context.Context, in *DeleteAdminEndpointRequest, opts ...grpc.CallOption) (*DeleteAdminEndpointResponse, error)
	ListAdminEndpoints(ctx context.Context, in *ListAdminEndpointsRequest, opts ...grpc.CallOption) (*ListAdminEndpointsResponse, error)
	UpdateAdminEndpoint(ctx context.Context, in *UpdateAdminEndpointRequest, opts ...grpc.CallOption) (*AdminEndpoint, error)
	GetAdminEndpoint(ctx context.Context, in *GetAdminEndpointRequest, opts ...grpc.CallOption) (*AdminEndpoint, error)
}

type durosAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDurosAPIClient(cc grpc.ClientConnInterface) DurosAPIClient {
	return &durosAPIClient{cc}
}

func (c *durosAPIClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/CreateVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error) {
	out := new(DeleteVolumeResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/DeleteVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListVolumes(ctx context.Context, in *ListVolumeRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error) {
	out := new(ListVolumesResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/ListVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetHost(ctx context.Context, in *GetHostRequest, opts ...grpc.CallOption) (*ConnectedHost, error) {
	out := new(ConnectedHost)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/GetHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListHosts(ctx context.Context, in *ListHostsRequest, opts ...grpc.CallOption) (*ListHostsResponse, error) {
	out := new(ListHostsResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/ListHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetVolume(ctx context.Context, in *GetVolumeRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/GetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListNodes(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*DurosNodeInfo, error) {
	out := new(DurosNodeInfo)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListNvmeDevices(ctx context.Context, in *ListNvmeDevicesRequest, opts ...grpc.CallOption) (*ListNvmeDevicesResponse, error) {
	out := new(ListNvmeDevicesResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/ListNvmeDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetNvmeDevice(ctx context.Context, in *GetNvmeDeviceRequest, opts ...grpc.CallOption) (*UserNvmeDevicesResponse, error) {
	out := new(UserNvmeDevicesResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/GetNvmeDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*ClusterInfo, error) {
	out := new(ClusterInfo)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetClusterInfo(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*ClusterInfoV2, error) {
	out := new(ClusterInfoV2)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/GetClusterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpdateNvmeDevice(ctx context.Context, in *UpdateNvmeDeviceRequest, opts ...grpc.CallOption) (*UpdateNvmeDeviceResponse, error) {
	out := new(UpdateNvmeDeviceResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/UpdateNvmeDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) AddNvmeDevice(ctx context.Context, in *AddNvmeDeviceRequest, opts ...grpc.CallOption) (*AddNvmeDeviceResponse, error) {
	out := new(AddNvmeDeviceResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/AddNvmeDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpdateVolume(ctx context.Context, in *UpdateVolumeRequest, opts ...grpc.CallOption) (*UpdateVolumeResponse, error) {
	out := new(UpdateVolumeResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/UpdateVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/GetServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	out := new(ListServersResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/ListServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpgradeServer(ctx context.Context, in *UpgradeServerRequest, opts ...grpc.CallOption) (*UpgradeServerResponse, error) {
	out := new(UpgradeServerResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/UpgradeServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpgradeCluster(ctx context.Context, in *UpgradeClusterRequest, opts ...grpc.CallOption) (*UpgradeClusterResponse, error) {
	out := new(UpgradeClusterResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/UpgradeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/CreateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ReplaceNode(ctx context.Context, in *ReplaceNodeRequest, opts ...grpc.CallOption) (*ReplaceNodeResponse, error) {
	out := new(ReplaceNodeResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/ReplaceNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error) {
	out := new(DeleteServerResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/DeleteServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) EnableServer(ctx context.Context, in *EnableServerRequest, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/EnableServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DisableServer(ctx context.Context, in *DisableServerRequest, opts ...grpc.CallOption) (*DisableServerResponse, error) {
	out := new(DisableServerResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/DisableServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*Credential, error) {
	out := new(Credential)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/CreateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*DeleteCredentialResponse, error) {
	out := new(DeleteCredentialResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/DeleteCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error) {
	out := new(ListCredentialsResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/ListCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*Credential, error) {
	out := new(Credential)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/GetCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) CreateAdminEndpoint(ctx context.Context, in *CreateAdminEndpointRequest, opts ...grpc.CallOption) (*AdminEndpoint, error) {
	out := new(AdminEndpoint)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/CreateAdminEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) DeleteAdminEndpoint(ctx context.Context, in *DeleteAdminEndpointRequest, opts ...grpc.CallOption) (*DeleteAdminEndpointResponse, error) {
	out := new(DeleteAdminEndpointResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/DeleteAdminEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) ListAdminEndpoints(ctx context.Context, in *ListAdminEndpointsRequest, opts ...grpc.CallOption) (*ListAdminEndpointsResponse, error) {
	out := new(ListAdminEndpointsResponse)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/ListAdminEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) UpdateAdminEndpoint(ctx context.Context, in *UpdateAdminEndpointRequest, opts ...grpc.CallOption) (*AdminEndpoint, error) {
	out := new(AdminEndpoint)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/UpdateAdminEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *durosAPIClient) GetAdminEndpoint(ctx context.Context, in *GetAdminEndpointRequest, opts ...grpc.CallOption) (*AdminEndpoint, error) {
	out := new(AdminEndpoint)
	err := c.cc.Invoke(ctx, "/lightbits.api.duros.v2.DurosAPI/GetAdminEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DurosAPIServer is the server API for DurosAPI service.
type DurosAPIServer interface {
	GetVersion(context.Context, *GetVersionRequest) (*Version, error)
	CreateVolume(context.Context, *CreateVolumeRequest) (*Volume, error)
	DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error)
	ListVolumes(context.Context, *ListVolumeRequest) (*ListVolumesResponse, error)
	GetHost(context.Context, *GetHostRequest) (*ConnectedHost, error)
	ListHosts(context.Context, *ListHostsRequest) (*ListHostsResponse, error)
	GetVolume(context.Context, *GetVolumeRequest) (*Volume, error)
	ListNodes(context.Context, *ListNodeRequest) (*ListNodesResponse, error)
	GetNode(context.Context, *GetNodeRequest) (*DurosNodeInfo, error)
	ListNvmeDevices(context.Context, *ListNvmeDevicesRequest) (*ListNvmeDevicesResponse, error)
	GetNvmeDevice(context.Context, *GetNvmeDeviceRequest) (*UserNvmeDevicesResponse, error)
	GetCluster(context.Context, *GetClusterRequest) (*ClusterInfo, error)
	GetClusterInfo(context.Context, *GetClusterRequest) (*ClusterInfoV2, error)
	UpdateNvmeDevice(context.Context, *UpdateNvmeDeviceRequest) (*UpdateNvmeDeviceResponse, error)
	AddNvmeDevice(context.Context, *AddNvmeDeviceRequest) (*AddNvmeDeviceResponse, error)
	UpdateVolume(context.Context, *UpdateVolumeRequest) (*UpdateVolumeResponse, error)
	GetServer(context.Context, *GetServerRequest) (*Server, error)
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	UpgradeServer(context.Context, *UpgradeServerRequest) (*UpgradeServerResponse, error)
	UpgradeCluster(context.Context, *UpgradeClusterRequest) (*UpgradeClusterResponse, error)
	CreateServer(context.Context, *CreateServerRequest) (*Server, error)
	ReplaceNode(context.Context, *ReplaceNodeRequest) (*ReplaceNodeResponse, error)
	DeleteServer(context.Context, *DeleteServerRequest) (*DeleteServerResponse, error)
	EnableServer(context.Context, *EnableServerRequest) (*Server, error)
	DisableServer(context.Context, *DisableServerRequest) (*DisableServerResponse, error)
	CreateProject(context.Context, *CreateProjectRequest) (*Project, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	GetProject(context.Context, *GetProjectRequest) (*Project, error)
	CreateCredential(context.Context, *CreateCredentialRequest) (*Credential, error)
	DeleteCredential(context.Context, *DeleteCredentialRequest) (*DeleteCredentialResponse, error)
	ListCredentials(context.Context, *ListCredentialsRequest) (*ListCredentialsResponse, error)
	GetCredential(context.Context, *GetCredentialRequest) (*Credential, error)
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	CreateAdminEndpoint(context.Context, *CreateAdminEndpointRequest) (*AdminEndpoint, error)
	DeleteAdminEndpoint(context.Context, *DeleteAdminEndpointRequest) (*DeleteAdminEndpointResponse, error)
	ListAdminEndpoints(context.Context, *ListAdminEndpointsRequest) (*ListAdminEndpointsResponse, error)
	UpdateAdminEndpoint(context.Context, *UpdateAdminEndpointRequest) (*AdminEndpoint, error)
	GetAdminEndpoint(context.Context, *GetAdminEndpointRequest) (*AdminEndpoint, error)
}

// UnimplementedDurosAPIServer can be embedded to have forward compatible implementations.
type UnimplementedDurosAPIServer struct {
}

func (*UnimplementedDurosAPIServer) GetVersion(context.Context, *GetVersionRequest) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedDurosAPIServer) CreateVolume(context.Context, *CreateVolumeRequest) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (*UnimplementedDurosAPIServer) DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolume not implemented")
}
func (*UnimplementedDurosAPIServer) ListVolumes(context.Context, *ListVolumeRequest) (*ListVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVolumes not implemented")
}
func (*UnimplementedDurosAPIServer) GetHost(context.Context, *GetHostRequest) (*ConnectedHost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHost not implemented")
}
func (*UnimplementedDurosAPIServer) ListHosts(context.Context, *ListHostsRequest) (*ListHostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHosts not implemented")
}
func (*UnimplementedDurosAPIServer) GetVolume(context.Context, *GetVolumeRequest) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolume not implemented")
}
func (*UnimplementedDurosAPIServer) ListNodes(context.Context, *ListNodeRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (*UnimplementedDurosAPIServer) GetNode(context.Context, *GetNodeRequest) (*DurosNodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (*UnimplementedDurosAPIServer) ListNvmeDevices(context.Context, *ListNvmeDevicesRequest) (*ListNvmeDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNvmeDevices not implemented")
}
func (*UnimplementedDurosAPIServer) GetNvmeDevice(context.Context, *GetNvmeDeviceRequest) (*UserNvmeDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNvmeDevice not implemented")
}
func (*UnimplementedDurosAPIServer) GetCluster(context.Context, *GetClusterRequest) (*ClusterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (*UnimplementedDurosAPIServer) GetClusterInfo(context.Context, *GetClusterRequest) (*ClusterInfoV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfo not implemented")
}
func (*UnimplementedDurosAPIServer) UpdateNvmeDevice(context.Context, *UpdateNvmeDeviceRequest) (*UpdateNvmeDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNvmeDevice not implemented")
}
func (*UnimplementedDurosAPIServer) AddNvmeDevice(context.Context, *AddNvmeDeviceRequest) (*AddNvmeDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNvmeDevice not implemented")
}
func (*UnimplementedDurosAPIServer) UpdateVolume(context.Context, *UpdateVolumeRequest) (*UpdateVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVolume not implemented")
}
func (*UnimplementedDurosAPIServer) GetServer(context.Context, *GetServerRequest) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (*UnimplementedDurosAPIServer) ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServers not implemented")
}
func (*UnimplementedDurosAPIServer) UpgradeServer(context.Context, *UpgradeServerRequest) (*UpgradeServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeServer not implemented")
}
func (*UnimplementedDurosAPIServer) UpgradeCluster(context.Context, *UpgradeClusterRequest) (*UpgradeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeCluster not implemented")
}
func (*UnimplementedDurosAPIServer) CreateServer(context.Context, *CreateServerRequest) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (*UnimplementedDurosAPIServer) ReplaceNode(context.Context, *ReplaceNodeRequest) (*ReplaceNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceNode not implemented")
}
func (*UnimplementedDurosAPIServer) DeleteServer(context.Context, *DeleteServerRequest) (*DeleteServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (*UnimplementedDurosAPIServer) EnableServer(context.Context, *EnableServerRequest) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableServer not implemented")
}
func (*UnimplementedDurosAPIServer) DisableServer(context.Context, *DisableServerRequest) (*DisableServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableServer not implemented")
}
func (*UnimplementedDurosAPIServer) CreateProject(context.Context, *CreateProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (*UnimplementedDurosAPIServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (*UnimplementedDurosAPIServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedDurosAPIServer) GetProject(context.Context, *GetProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedDurosAPIServer) CreateCredential(context.Context, *CreateCredentialRequest) (*Credential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (*UnimplementedDurosAPIServer) DeleteCredential(context.Context, *DeleteCredentialRequest) (*DeleteCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (*UnimplementedDurosAPIServer) ListCredentials(context.Context, *ListCredentialsRequest) (*ListCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentials not implemented")
}
func (*UnimplementedDurosAPIServer) GetCredential(context.Context, *GetCredentialRequest) (*Credential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (*UnimplementedDurosAPIServer) GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedDurosAPIServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (*UnimplementedDurosAPIServer) CreateAdminEndpoint(context.Context, *CreateAdminEndpointRequest) (*AdminEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdminEndpoint not implemented")
}
func (*UnimplementedDurosAPIServer) DeleteAdminEndpoint(context.Context, *DeleteAdminEndpointRequest) (*DeleteAdminEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdminEndpoint not implemented")
}
func (*UnimplementedDurosAPIServer) ListAdminEndpoints(context.Context, *ListAdminEndpointsRequest) (*ListAdminEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdminEndpoints not implemented")
}
func (*UnimplementedDurosAPIServer) UpdateAdminEndpoint(context.Context, *UpdateAdminEndpointRequest) (*AdminEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminEndpoint not implemented")
}
func (*UnimplementedDurosAPIServer) GetAdminEndpoint(context.Context, *GetAdminEndpointRequest) (*AdminEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminEndpoint not implemented")
}

func RegisterDurosAPIServer(s *grpc.Server, srv DurosAPIServer) {
	s.RegisterService(&_DurosAPI_serviceDesc, srv)
}

func _DurosAPI_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateVolume(ctx, req.(*CreateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteVolume(ctx, req.(*DeleteVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/ListVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListVolumes(ctx, req.(*ListVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/GetHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetHost(ctx, req.(*GetHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/ListHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListHosts(ctx, req.(*ListHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/GetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetVolume(ctx, req.(*GetVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListNodes(ctx, req.(*ListNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListNvmeDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNvmeDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListNvmeDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/ListNvmeDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListNvmeDevices(ctx, req.(*ListNvmeDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetNvmeDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNvmeDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetNvmeDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/GetNvmeDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetNvmeDevice(ctx, req.(*GetNvmeDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetCluster(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/GetClusterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetClusterInfo(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpdateNvmeDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNvmeDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpdateNvmeDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/UpdateNvmeDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpdateNvmeDevice(ctx, req.(*UpdateNvmeDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_AddNvmeDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNvmeDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).AddNvmeDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/AddNvmeDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).AddNvmeDevice(ctx, req.(*AddNvmeDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpdateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpdateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/UpdateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpdateVolume(ctx, req.(*UpdateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/GetServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetServer(ctx, req.(*GetServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/ListServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpgradeServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpgradeServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/UpgradeServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpgradeServer(ctx, req.(*UpgradeServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpgradeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpgradeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/UpgradeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpgradeCluster(ctx, req.(*UpgradeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/CreateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ReplaceNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ReplaceNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/ReplaceNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ReplaceNode(ctx, req.(*ReplaceNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/DeleteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteServer(ctx, req.(*DeleteServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_EnableServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).EnableServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/EnableServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).EnableServer(ctx, req.(*EnableServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DisableServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DisableServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/DisableServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DisableServer(ctx, req.(*DisableServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/CreateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateCredential(ctx, req.(*CreateCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/DeleteCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteCredential(ctx, req.(*DeleteCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/ListCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListCredentials(ctx, req.(*ListCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/GetCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetCredential(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_CreateAdminEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).CreateAdminEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/CreateAdminEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).CreateAdminEndpoint(ctx, req.(*CreateAdminEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_DeleteAdminEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).DeleteAdminEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/DeleteAdminEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).DeleteAdminEndpoint(ctx, req.(*DeleteAdminEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_ListAdminEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdminEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).ListAdminEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/ListAdminEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).ListAdminEndpoints(ctx, req.(*ListAdminEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_UpdateAdminEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).UpdateAdminEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/UpdateAdminEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).UpdateAdminEndpoint(ctx, req.(*UpdateAdminEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DurosAPI_GetAdminEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DurosAPIServer).GetAdminEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightbits.api.duros.v2.DurosAPI/GetAdminEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DurosAPIServer).GetAdminEndpoint(ctx, req.(*GetAdminEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DurosAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lightbits.api.duros.v2.DurosAPI",
	HandlerType: (*DurosAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _DurosAPI_GetVersion_Handler,
		},
		{
			MethodName: "CreateVolume",
			Handler:    _DurosAPI_CreateVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _DurosAPI_DeleteVolume_Handler,
		},
		{
			MethodName: "ListVolumes",
			Handler:    _DurosAPI_ListVolumes_Handler,
		},
		{
			MethodName: "GetHost",
			Handler:    _DurosAPI_GetHost_Handler,
		},
		{
			MethodName: "ListHosts",
			Handler:    _DurosAPI_ListHosts_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _DurosAPI_GetVolume_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _DurosAPI_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _DurosAPI_GetNode_Handler,
		},
		{
			MethodName: "ListNvmeDevices",
			Handler:    _DurosAPI_ListNvmeDevices_Handler,
		},
		{
			MethodName: "GetNvmeDevice",
			Handler:    _DurosAPI_GetNvmeDevice_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _DurosAPI_GetCluster_Handler,
		},
		{
			MethodName: "GetClusterInfo",
			Handler:    _DurosAPI_GetClusterInfo_Handler,
		},
		{
			MethodName: "UpdateNvmeDevice",
			Handler:    _DurosAPI_UpdateNvmeDevice_Handler,
		},
		{
			MethodName: "AddNvmeDevice",
			Handler:    _DurosAPI_AddNvmeDevice_Handler,
		},
		{
			MethodName: "UpdateVolume",
			Handler:    _DurosAPI_UpdateVolume_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _DurosAPI_GetServer_Handler,
		},
		{
			MethodName: "ListServers",
			Handler:    _DurosAPI_ListServers_Handler,
		},
		{
			MethodName: "UpgradeServer",
			Handler:    _DurosAPI_UpgradeServer_Handler,
		},
		{
			MethodName: "UpgradeCluster",
			Handler:    _DurosAPI_UpgradeCluster_Handler,
		},
		{
			MethodName: "CreateServer",
			Handler:    _DurosAPI_CreateServer_Handler,
		},
		{
			MethodName: "ReplaceNode",
			Handler:    _DurosAPI_ReplaceNode_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _DurosAPI_DeleteServer_Handler,
		},
		{
			MethodName: "EnableServer",
			Handler:    _DurosAPI_EnableServer_Handler,
		},
		{
			MethodName: "DisableServer",
			Handler:    _DurosAPI_DisableServer_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _DurosAPI_CreateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _DurosAPI_DeleteProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _DurosAPI_ListProjects_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _DurosAPI_GetProject_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _DurosAPI_CreateCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _DurosAPI_DeleteCredential_Handler,
		},
		{
			MethodName: "ListCredentials",
			Handler:    _DurosAPI_ListCredentials_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _DurosAPI_GetCredential_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _DurosAPI_GetRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _DurosAPI_ListRoles_Handler,
		},
		{
			MethodName: "CreateAdminEndpoint",
			Handler:    _DurosAPI_CreateAdminEndpoint_Handler,
		},
		{
			MethodName: "DeleteAdminEndpoint",
			Handler:    _DurosAPI_DeleteAdminEndpoint_Handler,
		},
		{
			MethodName: "ListAdminEndpoints",
			Handler:    _DurosAPI_ListAdminEndpoints_Handler,
		},
		{
			MethodName: "UpdateAdminEndpoint",
			Handler:    _DurosAPI_UpdateAdminEndpoint_Handler,
		},
		{
			MethodName: "GetAdminEndpoint",
			Handler:    _DurosAPI_GetAdminEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lightbits/api/duros/v2/durosapiv2.proto",
}
