// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: lightbits/api/duros/v2/durosapiv2.proto

package v2

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CredsType int32

const (
	CredsType_UnknownType     CredsType = 0
	CredsType_RS256PubKey     CredsType = 1
	CredsType_TlsCertChainPem CredsType = 2
	CredsType_TlsPrivKeyPem   CredsType = 3
)

// Enum value maps for CredsType.
var (
	CredsType_name = map[int32]string{
		0: "UnknownType",
		1: "RS256PubKey",
		2: "TlsCertChainPem",
		3: "TlsPrivKeyPem",
	}
	CredsType_value = map[string]int32{
		"UnknownType":     0,
		"RS256PubKey":     1,
		"TlsCertChainPem": 2,
		"TlsPrivKeyPem":   3,
	}
)

func (x CredsType) Enum() *CredsType {
	p := new(CredsType)
	*p = x
	return p
}

func (x CredsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CredsType) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[0].Descriptor()
}

func (CredsType) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[0]
}

func (x CredsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CredsType.Descriptor instead.
func (CredsType) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{0}
}

type ProtectionStateEnum int32

const (
	ProtectionStateEnum_Unknown        ProtectionStateEnum = 0
	ProtectionStateEnum_FullyProtected ProtectionStateEnum = 1
	ProtectionStateEnum_Degraded       ProtectionStateEnum = 2
	ProtectionStateEnum_ReadOnly       ProtectionStateEnum = 3
	ProtectionStateEnum_NotAvailable   ProtectionStateEnum = 4
)

// Enum value maps for ProtectionStateEnum.
var (
	ProtectionStateEnum_name = map[int32]string{
		0: "Unknown",
		1: "FullyProtected",
		2: "Degraded",
		3: "ReadOnly",
		4: "NotAvailable",
	}
	ProtectionStateEnum_value = map[string]int32{
		"Unknown":        0,
		"FullyProtected": 1,
		"Degraded":       2,
		"ReadOnly":       3,
		"NotAvailable":   4,
	}
)

func (x ProtectionStateEnum) Enum() *ProtectionStateEnum {
	p := new(ProtectionStateEnum)
	*p = x
	return p
}

func (x ProtectionStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtectionStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[1].Descriptor()
}

func (ProtectionStateEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[1]
}

func (x ProtectionStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtectionStateEnum.Descriptor instead.
func (ProtectionStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{1}
}

type NLEState int32

const (
	NLEState_UnknownNLEState NLEState = 0
	NLEState_DisabledNLE     NLEState = 1
	NLEState_EnablingNLE     NLEState = 2
	NLEState_EnabledNLE      NLEState = 3
)

// Enum value maps for NLEState.
var (
	NLEState_name = map[int32]string{
		0: "UnknownNLEState",
		1: "DisabledNLE",
		2: "EnablingNLE",
		3: "EnabledNLE",
	}
	NLEState_value = map[string]int32{
		"UnknownNLEState": 0,
		"DisabledNLE":     1,
		"EnablingNLE":     2,
		"EnabledNLE":      3,
	}
)

func (x NLEState) Enum() *NLEState {
	p := new(NLEState)
	*p = x
	return p
}

func (x NLEState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NLEState) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[2].Descriptor()
}

func (NLEState) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[2]
}

func (x NLEState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NLEState.Descriptor instead.
func (NLEState) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{2}
}

type PolicyVisibility int32

const (
	PolicyVisibility_Unavailable PolicyVisibility = 0
	PolicyVisibility_Scoped      PolicyVisibility = 1
	PolicyVisibility_Global      PolicyVisibility = 2
)

// Enum value maps for PolicyVisibility.
var (
	PolicyVisibility_name = map[int32]string{
		0: "Unavailable",
		1: "Scoped",
		2: "Global",
	}
	PolicyVisibility_value = map[string]int32{
		"Unavailable": 0,
		"Scoped":      1,
		"Global":      2,
	}
)

func (x PolicyVisibility) Enum() *PolicyVisibility {
	p := new(PolicyVisibility)
	*p = x
	return p
}

func (x PolicyVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[3].Descriptor()
}

func (PolicyVisibility) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[3]
}

func (x PolicyVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyVisibility.Descriptor instead.
func (PolicyVisibility) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{3}
}

type PolicyType int32

const (
	PolicyType_unknown      PolicyType = 0
	PolicyType_snapshot     PolicyType = 1
	PolicyType_qosRateLimit PolicyType = 2
)

// Enum value maps for PolicyType.
var (
	PolicyType_name = map[int32]string{
		0: "unknown",
		1: "snapshot",
		2: "qosRateLimit",
	}
	PolicyType_value = map[string]int32{
		"unknown":      0,
		"snapshot":     1,
		"qosRateLimit": 2,
	}
)

func (x PolicyType) Enum() *PolicyType {
	p := new(PolicyType)
	*p = x
	return p
}

func (x PolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[4].Descriptor()
}

func (PolicyType) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[4]
}

func (x PolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyType.Descriptor instead.
func (PolicyType) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{4}
}

type CreateVolumeRequest_SectorSizeEnum int32

const (
	CreateVolumeRequest_sectorSize_Default CreateVolumeRequest_SectorSizeEnum = 0
	CreateVolumeRequest_sectorSize_512B    CreateVolumeRequest_SectorSizeEnum = 512
	CreateVolumeRequest_sectorSize_4K      CreateVolumeRequest_SectorSizeEnum = 4096
)

// Enum value maps for CreateVolumeRequest_SectorSizeEnum.
var (
	CreateVolumeRequest_SectorSizeEnum_name = map[int32]string{
		0:    "sectorSize_Default",
		512:  "sectorSize_512B",
		4096: "sectorSize_4K",
	}
	CreateVolumeRequest_SectorSizeEnum_value = map[string]int32{
		"sectorSize_Default": 0,
		"sectorSize_512B":    512,
		"sectorSize_4K":      4096,
	}
)

func (x CreateVolumeRequest_SectorSizeEnum) Enum() *CreateVolumeRequest_SectorSizeEnum {
	p := new(CreateVolumeRequest_SectorSizeEnum)
	*p = x
	return p
}

func (x CreateVolumeRequest_SectorSizeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateVolumeRequest_SectorSizeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[5].Descriptor()
}

func (CreateVolumeRequest_SectorSizeEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[5]
}

func (x CreateVolumeRequest_SectorSizeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateVolumeRequest_SectorSizeEnum.Descriptor instead.
func (CreateVolumeRequest_SectorSizeEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{26, 0}
}

type UserNvmeDevicesResponse_StateEnum int32

const (
	UserNvmeDevicesResponse_None       UserNvmeDevicesResponse_StateEnum = 0
	UserNvmeDevicesResponse_Healthy    UserNvmeDevicesResponse_StateEnum = 1
	UserNvmeDevicesResponse_Adding     UserNvmeDevicesResponse_StateEnum = 2
	UserNvmeDevicesResponse_Rebuilding UserNvmeDevicesResponse_StateEnum = 3
	UserNvmeDevicesResponse_Failed     UserNvmeDevicesResponse_StateEnum = 4
)

// Enum value maps for UserNvmeDevicesResponse_StateEnum.
var (
	UserNvmeDevicesResponse_StateEnum_name = map[int32]string{
		0: "None",
		1: "Healthy",
		2: "Adding",
		3: "Rebuilding",
		4: "Failed",
	}
	UserNvmeDevicesResponse_StateEnum_value = map[string]int32{
		"None":       0,
		"Healthy":    1,
		"Adding":     2,
		"Rebuilding": 3,
		"Failed":     4,
	}
)

func (x UserNvmeDevicesResponse_StateEnum) Enum() *UserNvmeDevicesResponse_StateEnum {
	p := new(UserNvmeDevicesResponse_StateEnum)
	*p = x
	return p
}

func (x UserNvmeDevicesResponse_StateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserNvmeDevicesResponse_StateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[6].Descriptor()
}

func (UserNvmeDevicesResponse_StateEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[6]
}

func (x UserNvmeDevicesResponse_StateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserNvmeDevicesResponse_StateEnum.Descriptor instead.
func (UserNvmeDevicesResponse_StateEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{54, 0}
}

// whether this block device is a SED, if so - whether it's TCG security
// features are managed by LB or not, and if not - why not
type UserNvmeDevicesResponse_SEDState int32

const (
	UserNvmeDevicesResponse_Unknown        UserNvmeDevicesResponse_SEDState = 0
	UserNvmeDevicesResponse_NotSED         UserNvmeDevicesResponse_SEDState = 1 // device is not recognised as SED
	UserNvmeDevicesResponse_UnsupportedSED UserNvmeDevicesResponse_SEDState = 2 // it's a SED, but LB can't manage this device model
	UserNvmeDevicesResponse_ForeignSED     UserNvmeDevicesResponse_SEDState = 3 // it's a supported SED already managed by other entity
	UserNvmeDevicesResponse_UnmanagedSED   UserNvmeDevicesResponse_SEDState = 4 // it's a SED, not currently managed by anything
	UserNvmeDevicesResponse_ManagedSED     UserNvmeDevicesResponse_SEDState = 5 // it's a SED currently managed by LB
)

// Enum value maps for UserNvmeDevicesResponse_SEDState.
var (
	UserNvmeDevicesResponse_SEDState_name = map[int32]string{
		0: "Unknown",
		1: "NotSED",
		2: "UnsupportedSED",
		3: "ForeignSED",
		4: "UnmanagedSED",
		5: "ManagedSED",
	}
	UserNvmeDevicesResponse_SEDState_value = map[string]int32{
		"Unknown":        0,
		"NotSED":         1,
		"UnsupportedSED": 2,
		"ForeignSED":     3,
		"UnmanagedSED":   4,
		"ManagedSED":     5,
	}
)

func (x UserNvmeDevicesResponse_SEDState) Enum() *UserNvmeDevicesResponse_SEDState {
	p := new(UserNvmeDevicesResponse_SEDState)
	*p = x
	return p
}

func (x UserNvmeDevicesResponse_SEDState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserNvmeDevicesResponse_SEDState) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[7].Descriptor()
}

func (UserNvmeDevicesResponse_SEDState) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[7]
}

func (x UserNvmeDevicesResponse_SEDState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserNvmeDevicesResponse_SEDState.Descriptor instead.
func (UserNvmeDevicesResponse_SEDState) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{54, 1}
}

// current locking state of a SED, possibly managed by LB
type UserNvmeDevicesResponse_SEDStatus int32

const (
	UserNvmeDevicesResponse_UnknownLockStatus UserNvmeDevicesResponse_SEDStatus = 0
	UserNvmeDevicesResponse_Unlocked          UserNvmeDevicesResponse_SEDStatus = 1 // device is currently unlocked by anyone
	UserNvmeDevicesResponse_Locked            UserNvmeDevicesResponse_SEDStatus = 2 // device is currently locked, maybe by LB, maybe not
)

// Enum value maps for UserNvmeDevicesResponse_SEDStatus.
var (
	UserNvmeDevicesResponse_SEDStatus_name = map[int32]string{
		0: "UnknownLockStatus",
		1: "Unlocked",
		2: "Locked",
	}
	UserNvmeDevicesResponse_SEDStatus_value = map[string]int32{
		"UnknownLockStatus": 0,
		"Unlocked":          1,
		"Locked":            2,
	}
)

func (x UserNvmeDevicesResponse_SEDStatus) Enum() *UserNvmeDevicesResponse_SEDStatus {
	p := new(UserNvmeDevicesResponse_SEDStatus)
	*p = x
	return p
}

func (x UserNvmeDevicesResponse_SEDStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserNvmeDevicesResponse_SEDStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[8].Descriptor()
}

func (UserNvmeDevicesResponse_SEDStatus) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[8]
}

func (x UserNvmeDevicesResponse_SEDStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserNvmeDevicesResponse_SEDStatus.Descriptor instead.
func (UserNvmeDevicesResponse_SEDStatus) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{54, 2}
}

type DurosNodeInfo_State int32

const (
	// reserved value, default should return error, rather than a true  state that is incorrect
	DurosNodeInfo_Unknown DurosNodeInfo_State = 0
	// node is completed join cluster flow
	DurosNodeInfo_Active DurosNodeInfo_State = 1
	// node is is the process of coming up (startign required services) and joining cluster
	DurosNodeInfo_Activating DurosNodeInfo_State = 2
	// node is is Inactive (this includes internal states Removing and failed)
	DurosNodeInfo_Inactive DurosNodeInfo_State = 3
	// node is not attched to cluster (none of cluster pgs contain this pg)
	DurosNodeInfo_Unattached DurosNodeInfo_State = 4
	// Attaching node to cluster ongoing (replacing old node in pgs with this node)
	DurosNodeInfo_Attaching DurosNodeInfo_State = 6
	// Detaching node from cluster ongoing (replacing this node in pgs with this a new node)
	DurosNodeInfo_Detaching DurosNodeInfo_State = 7
)

// Enum value maps for DurosNodeInfo_State.
var (
	DurosNodeInfo_State_name = map[int32]string{
		0: "Unknown",
		1: "Active",
		2: "Activating",
		3: "Inactive",
		4: "Unattached",
		6: "Attaching",
		7: "Detaching",
	}
	DurosNodeInfo_State_value = map[string]int32{
		"Unknown":    0,
		"Active":     1,
		"Activating": 2,
		"Inactive":   3,
		"Unattached": 4,
		"Attaching":  6,
		"Detaching":  7,
	}
)

func (x DurosNodeInfo_State) Enum() *DurosNodeInfo_State {
	p := new(DurosNodeInfo_State)
	*p = x
	return p
}

func (x DurosNodeInfo_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DurosNodeInfo_State) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[9].Descriptor()
}

func (DurosNodeInfo_State) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[9]
}

func (x DurosNodeInfo_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DurosNodeInfo_State.Descriptor instead.
func (DurosNodeInfo_State) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{55, 0}
}

// machine readable internal state of the node we want to report to the cluster.
type DurosNodeInfo_StatusEnum int32

const (
	DurosNodeInfo_NoStatus DurosNodeInfo_StatusEnum = 0
	// reported during NodeStateEnum==Adding
	DurosNodeInfo_ConnectivityOK      DurosNodeInfo_StatusEnum = 1
	DurosNodeInfo_ConnectivityProblem DurosNodeInfo_StatusEnum = 2
	// reported during NodeStateEnum==Removing
	DurosNodeInfo_IssuedDeletePeer DurosNodeInfo_StatusEnum = 3
)

// Enum value maps for DurosNodeInfo_StatusEnum.
var (
	DurosNodeInfo_StatusEnum_name = map[int32]string{
		0: "NoStatus",
		1: "ConnectivityOK",
		2: "ConnectivityProblem",
		3: "IssuedDeletePeer",
	}
	DurosNodeInfo_StatusEnum_value = map[string]int32{
		"NoStatus":            0,
		"ConnectivityOK":      1,
		"ConnectivityProblem": 2,
		"IssuedDeletePeer":    3,
	}
)

func (x DurosNodeInfo_StatusEnum) Enum() *DurosNodeInfo_StatusEnum {
	p := new(DurosNodeInfo_StatusEnum)
	*p = x
	return p
}

func (x DurosNodeInfo_StatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DurosNodeInfo_StatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[10].Descriptor()
}

func (DurosNodeInfo_StatusEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[10]
}

func (x DurosNodeInfo_StatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DurosNodeInfo_StatusEnum.Descriptor instead.
func (DurosNodeInfo_StatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{55, 1}
}

type ClusterHealth_State int32

const (
	ClusterHealth_None    ClusterHealth_State = 0
	ClusterHealth_OK      ClusterHealth_State = 1
	ClusterHealth_Warning ClusterHealth_State = 2
	ClusterHealth_Error   ClusterHealth_State = 3
)

// Enum value maps for ClusterHealth_State.
var (
	ClusterHealth_State_name = map[int32]string{
		0: "None",
		1: "OK",
		2: "Warning",
		3: "Error",
	}
	ClusterHealth_State_value = map[string]int32{
		"None":    0,
		"OK":      1,
		"Warning": 2,
		"Error":   3,
	}
)

func (x ClusterHealth_State) Enum() *ClusterHealth_State {
	p := new(ClusterHealth_State)
	*p = x
	return p
}

func (x ClusterHealth_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterHealth_State) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[11].Descriptor()
}

func (ClusterHealth_State) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[11]
}

func (x ClusterHealth_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterHealth_State.Descriptor instead.
func (ClusterHealth_State) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{72, 0}
}

type Volume_StateEnum int32

const (
	Volume_Unknown   Volume_StateEnum = 0
	Volume_Creating  Volume_StateEnum = 1
	Volume_Available Volume_StateEnum = 2
	Volume_Deleting  Volume_StateEnum = 3
	Volume_Deleted   Volume_StateEnum = 4
	Volume_Failed    Volume_StateEnum = 7
	Volume_Updating  Volume_StateEnum = 8
	Volume_Rollback  Volume_StateEnum = 9
	Volume_Migrating Volume_StateEnum = 10
)

// Enum value maps for Volume_StateEnum.
var (
	Volume_StateEnum_name = map[int32]string{
		0:  "Unknown",
		1:  "Creating",
		2:  "Available",
		3:  "Deleting",
		4:  "Deleted",
		7:  "Failed",
		8:  "Updating",
		9:  "Rollback",
		10: "Migrating",
	}
	Volume_StateEnum_value = map[string]int32{
		"Unknown":   0,
		"Creating":  1,
		"Available": 2,
		"Deleting":  3,
		"Deleted":   4,
		"Failed":    7,
		"Updating":  8,
		"Rollback":  9,
		"Migrating": 10,
	}
)

func (x Volume_StateEnum) Enum() *Volume_StateEnum {
	p := new(Volume_StateEnum)
	*p = x
	return p
}

func (x Volume_StateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Volume_StateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[12].Descriptor()
}

func (Volume_StateEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[12]
}

func (x Volume_StateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Volume_StateEnum.Descriptor instead.
func (Volume_StateEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{73, 0}
}

type Volume_ProtocolEnum int32

const (
	Volume_ProtocolTCP Volume_ProtocolEnum = 0
)

// Enum value maps for Volume_ProtocolEnum.
var (
	Volume_ProtocolEnum_name = map[int32]string{
		0: "ProtocolTCP",
	}
	Volume_ProtocolEnum_value = map[string]int32{
		"ProtocolTCP": 0,
	}
)

func (x Volume_ProtocolEnum) Enum() *Volume_ProtocolEnum {
	p := new(Volume_ProtocolEnum)
	*p = x
	return p
}

func (x Volume_ProtocolEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Volume_ProtocolEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[13].Descriptor()
}

func (Volume_ProtocolEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[13]
}

func (x Volume_ProtocolEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Volume_ProtocolEnum.Descriptor instead.
func (Volume_ProtocolEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{73, 1}
}

type Server_UpgradeStatusEnum int32

const (
	Server_Unknown       Server_UpgradeStatusEnum = 0
	Server_None          Server_UpgradeStatusEnum = 1
	Server_UpgradeFailed Server_UpgradeStatusEnum = 2
	Server_Upgrading     Server_UpgradeStatusEnum = 3
	Server_Rebooting     Server_UpgradeStatusEnum = 4
)

// Enum value maps for Server_UpgradeStatusEnum.
var (
	Server_UpgradeStatusEnum_name = map[int32]string{
		0: "Unknown",
		1: "None",
		2: "UpgradeFailed",
		3: "Upgrading",
		4: "Rebooting",
	}
	Server_UpgradeStatusEnum_value = map[string]int32{
		"Unknown":       0,
		"None":          1,
		"UpgradeFailed": 2,
		"Upgrading":     3,
		"Rebooting":     4,
	}
)

func (x Server_UpgradeStatusEnum) Enum() *Server_UpgradeStatusEnum {
	p := new(Server_UpgradeStatusEnum)
	*p = x
	return p
}

func (x Server_UpgradeStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Server_UpgradeStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[14].Descriptor()
}

func (Server_UpgradeStatusEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[14]
}

func (x Server_UpgradeStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Server_UpgradeStatusEnum.Descriptor instead.
func (Server_UpgradeStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{74, 0}
}

type Server_RiskOfServiceLossEnum int32

const (
	Server_UnknownRiskOfServiceLoss  Server_RiskOfServiceLossEnum = 0
	Server_NoRiskOfServiceLoss       Server_RiskOfServiceLossEnum = 1
	Server_InRiskOfServiceLoss       Server_RiskOfServiceLossEnum = 2
	Server_SourceOfRiskOfServiceLoss Server_RiskOfServiceLossEnum = 3
)

// Enum value maps for Server_RiskOfServiceLossEnum.
var (
	Server_RiskOfServiceLossEnum_name = map[int32]string{
		0: "UnknownRiskOfServiceLoss",
		1: "NoRiskOfServiceLoss",
		2: "InRiskOfServiceLoss",
		3: "SourceOfRiskOfServiceLoss",
	}
	Server_RiskOfServiceLossEnum_value = map[string]int32{
		"UnknownRiskOfServiceLoss":  0,
		"NoRiskOfServiceLoss":       1,
		"InRiskOfServiceLoss":       2,
		"SourceOfRiskOfServiceLoss": 3,
	}
)

func (x Server_RiskOfServiceLossEnum) Enum() *Server_RiskOfServiceLossEnum {
	p := new(Server_RiskOfServiceLossEnum)
	*p = x
	return p
}

func (x Server_RiskOfServiceLossEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Server_RiskOfServiceLossEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[15].Descriptor()
}

func (Server_RiskOfServiceLossEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[15]
}

func (x Server_RiskOfServiceLossEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Server_RiskOfServiceLossEnum.Descriptor instead.
func (Server_RiskOfServiceLossEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{74, 1}
}

type Server_ServerStateEnum int32

const (
	Server_UnknownState Server_ServerStateEnum = 0
	Server_Creating     Server_ServerStateEnum = 1
	Server_Enabled      Server_ServerStateEnum = 2
	Server_Deleting     Server_ServerStateEnum = 3
	Server_Failed       Server_ServerStateEnum = 4
	Server_Disabled     Server_ServerStateEnum = 5
	Server_Enabling     Server_ServerStateEnum = 6
	Server_Disabling    Server_ServerStateEnum = 7
)

// Enum value maps for Server_ServerStateEnum.
var (
	Server_ServerStateEnum_name = map[int32]string{
		0: "UnknownState",
		1: "Creating",
		2: "Enabled",
		3: "Deleting",
		4: "Failed",
		5: "Disabled",
		6: "Enabling",
		7: "Disabling",
	}
	Server_ServerStateEnum_value = map[string]int32{
		"UnknownState": 0,
		"Creating":     1,
		"Enabled":      2,
		"Deleting":     3,
		"Failed":       4,
		"Disabled":     5,
		"Enabling":     6,
		"Disabling":    7,
	}
)

func (x Server_ServerStateEnum) Enum() *Server_ServerStateEnum {
	p := new(Server_ServerStateEnum)
	*p = x
	return p
}

func (x Server_ServerStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Server_ServerStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[16].Descriptor()
}

func (Server_ServerStateEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[16]
}

func (x Server_ServerStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Server_ServerStateEnum.Descriptor instead.
func (Server_ServerStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{74, 2}
}

type Snapshot_StateEnum int32

const (
	Snapshot_Unknown   Snapshot_StateEnum = 0
	Snapshot_Creating  Snapshot_StateEnum = 1
	Snapshot_Available Snapshot_StateEnum = 2
	Snapshot_Deleting  Snapshot_StateEnum = 3
	Snapshot_Deleted   Snapshot_StateEnum = 4
	Snapshot_Failed    Snapshot_StateEnum = 7
)

// Enum value maps for Snapshot_StateEnum.
var (
	Snapshot_StateEnum_name = map[int32]string{
		0: "Unknown",
		1: "Creating",
		2: "Available",
		3: "Deleting",
		4: "Deleted",
		7: "Failed",
	}
	Snapshot_StateEnum_value = map[string]int32{
		"Unknown":   0,
		"Creating":  1,
		"Available": 2,
		"Deleting":  3,
		"Deleted":   4,
		"Failed":    7,
	}
)

func (x Snapshot_StateEnum) Enum() *Snapshot_StateEnum {
	p := new(Snapshot_StateEnum)
	*p = x
	return p
}

func (x Snapshot_StateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Snapshot_StateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[17].Descriptor()
}

func (Snapshot_StateEnum) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[17]
}

func (x Snapshot_StateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Snapshot_StateEnum.Descriptor instead.
func (Snapshot_StateEnum) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{80, 0}
}

type ResourcePolicy_State int32

const (
	ResourcePolicy_UnknownState ResourcePolicy_State = 0
	ResourcePolicy_Creating     ResourcePolicy_State = 1
	ResourcePolicy_Active       ResourcePolicy_State = 2
	ResourcePolicy_Deleting     ResourcePolicy_State = 3
	ResourcePolicy_Failed       ResourcePolicy_State = 4
)

// Enum value maps for ResourcePolicy_State.
var (
	ResourcePolicy_State_name = map[int32]string{
		0: "UnknownState",
		1: "Creating",
		2: "Active",
		3: "Deleting",
		4: "Failed",
	}
	ResourcePolicy_State_value = map[string]int32{
		"UnknownState": 0,
		"Creating":     1,
		"Active":       2,
		"Deleting":     3,
		"Failed":       4,
	}
)

func (x ResourcePolicy_State) Enum() *ResourcePolicy_State {
	p := new(ResourcePolicy_State)
	*p = x
	return p
}

func (x ResourcePolicy_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourcePolicy_State) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[18].Descriptor()
}

func (ResourcePolicy_State) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[18]
}

func (x ResourcePolicy_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourcePolicy_State.Descriptor instead.
func (ResourcePolicy_State) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{98, 0}
}

type Policy_State int32

const (
	Policy_Unknown    Policy_State = 0
	Policy_Creating   Policy_State = 1
	Policy_Active     Policy_State = 2
	Policy_Updating   Policy_State = 3
	Policy_Deprecated Policy_State = 4
	Policy_Failed     Policy_State = 5
)

// Enum value maps for Policy_State.
var (
	Policy_State_name = map[int32]string{
		0: "Unknown",
		1: "Creating",
		2: "Active",
		3: "Updating",
		4: "Deprecated",
		5: "Failed",
	}
	Policy_State_value = map[string]int32{
		"Unknown":    0,
		"Creating":   1,
		"Active":     2,
		"Updating":   3,
		"Deprecated": 4,
		"Failed":     5,
	}
)

func (x Policy_State) Enum() *Policy_State {
	p := new(Policy_State)
	*p = x
	return p
}

func (x Policy_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Policy_State) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[19].Descriptor()
}

func (Policy_State) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[19]
}

func (x Policy_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Policy_State.Descriptor instead.
func (Policy_State) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{99, 0}
}

type LabelValueKeyPair_Key int32

const (
	LabelValueKeyPair_Unknown LabelValueKeyPair_Key = 0
	LabelValueKeyPair_FD      LabelValueKeyPair_Key = 1
)

// Enum value maps for LabelValueKeyPair_Key.
var (
	LabelValueKeyPair_Key_name = map[int32]string{
		0: "Unknown",
		1: "FD",
	}
	LabelValueKeyPair_Key_value = map[string]int32{
		"Unknown": 0,
		"FD":      1,
	}
)

func (x LabelValueKeyPair_Key) Enum() *LabelValueKeyPair_Key {
	p := new(LabelValueKeyPair_Key)
	*p = x
	return p
}

func (x LabelValueKeyPair_Key) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabelValueKeyPair_Key) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[20].Descriptor()
}

func (LabelValueKeyPair_Key) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[20]
}

func (x LabelValueKeyPair_Key) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabelValueKeyPair_Key.Descriptor instead.
func (LabelValueKeyPair_Key) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{120, 0}
}

type LabelMatchExpression_Operator int32

const (
	LabelMatchExpression_Unkown LabelMatchExpression_Operator = 0
	LabelMatchExpression_In     LabelMatchExpression_Operator = 1
)

// Enum value maps for LabelMatchExpression_Operator.
var (
	LabelMatchExpression_Operator_name = map[int32]string{
		0: "Unkown",
		1: "In",
	}
	LabelMatchExpression_Operator_value = map[string]int32{
		"Unkown": 0,
		"In":     1,
	}
)

func (x LabelMatchExpression_Operator) Enum() *LabelMatchExpression_Operator {
	p := new(LabelMatchExpression_Operator)
	*p = x
	return p
}

func (x LabelMatchExpression_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabelMatchExpression_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[21].Descriptor()
}

func (LabelMatchExpression_Operator) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[21]
}

func (x LabelMatchExpression_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabelMatchExpression_Operator.Descriptor instead.
func (LabelMatchExpression_Operator) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{121, 0}
}

type Event_EventType int32

const (
	Event_UnknownType Event_EventType = 0
	Event_Cluster     Event_EventType = 1
	Event_Node        Event_EventType = 2
	Event_Volume      Event_EventType = 3
	Event_NVMeSSD     Event_EventType = 4
	Event_Server      Event_EventType = 5
	// XXX: do we really need a new type for data-integrity events or we can use NVMESSD?
	// in some cases, the corruption is not due to malfunctioning ssds in the node that reported such event.
	Event_DataIntegrity Event_EventType = 6
)

// Enum value maps for Event_EventType.
var (
	Event_EventType_name = map[int32]string{
		0: "UnknownType",
		1: "Cluster",
		2: "Node",
		3: "Volume",
		4: "NVMeSSD",
		5: "Server",
		6: "DataIntegrity",
	}
	Event_EventType_value = map[string]int32{
		"UnknownType":   0,
		"Cluster":       1,
		"Node":          2,
		"Volume":        3,
		"NVMeSSD":       4,
		"Server":        5,
		"DataIntegrity": 6,
	}
)

func (x Event_EventType) Enum() *Event_EventType {
	p := new(Event_EventType)
	*p = x
	return p
}

func (x Event_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[22].Descriptor()
}

func (Event_EventType) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[22]
}

func (x Event_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_EventType.Descriptor instead.
func (Event_EventType) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{130, 0}
}

type Event_EventReportingService int32

const (
	Event_UnkownReportingService Event_EventReportingService = 0
	Event_CM                     Event_EventReportingService = 1
	Event_NM                     Event_EventReportingService = 2
	Event_API                    Event_EventReportingService = 3
	Event_UM                     Event_EventReportingService = 4
)

// Enum value maps for Event_EventReportingService.
var (
	Event_EventReportingService_name = map[int32]string{
		0: "UnkownReportingService",
		1: "CM",
		2: "NM",
		3: "API",
		4: "UM",
	}
	Event_EventReportingService_value = map[string]int32{
		"UnkownReportingService": 0,
		"CM":                     1,
		"NM":                     2,
		"API":                    3,
		"UM":                     4,
	}
)

func (x Event_EventReportingService) Enum() *Event_EventReportingService {
	p := new(Event_EventReportingService)
	*p = x
	return p
}

func (x Event_EventReportingService) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_EventReportingService) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[23].Descriptor()
}

func (Event_EventReportingService) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[23]
}

func (x Event_EventReportingService) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_EventReportingService.Descriptor instead.
func (Event_EventReportingService) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{130, 1}
}

type Event_EventSeverity int32

const (
	Event_UnkownSeverity Event_EventSeverity = 0
	Event_Info           Event_EventSeverity = 1
	Event_Low            Event_EventSeverity = 2
	Event_Medium         Event_EventSeverity = 3
	Event_High           Event_EventSeverity = 4
	Event_Critical       Event_EventSeverity = 5
)

// Enum value maps for Event_EventSeverity.
var (
	Event_EventSeverity_name = map[int32]string{
		0: "UnkownSeverity",
		1: "Info",
		2: "Low",
		3: "Medium",
		4: "High",
		5: "Critical",
	}
	Event_EventSeverity_value = map[string]int32{
		"UnkownSeverity": 0,
		"Info":           1,
		"Low":            2,
		"Medium":         3,
		"High":           4,
		"Critical":       5,
	}
)

func (x Event_EventSeverity) Enum() *Event_EventSeverity {
	p := new(Event_EventSeverity)
	*p = x
	return p
}

func (x Event_EventSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_EventSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[24].Descriptor()
}

func (Event_EventSeverity) Type() protoreflect.EnumType {
	return &file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes[24]
}

func (x Event_EventSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_EventSeverity.Descriptor instead.
func (Event_EventSeverity) EnumDescriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{130, 2}
}

type LogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{0}
}

type AdminEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32   `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Ips  []string `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
	// Etag
	//
	// identifier for a specific version of a resource
	ETag string `protobuf:"bytes,3,opt,name=ETag,proto3" json:"ETag,omitempty"`
}

func (x *AdminEndpoint) Reset() {
	*x = AdminEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminEndpoint) ProtoMessage() {}

func (x *AdminEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminEndpoint.ProtoReflect.Descriptor instead.
func (*AdminEndpoint) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{1}
}

func (x *AdminEndpoint) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AdminEndpoint) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *AdminEndpoint) GetETag() string {
	if x != nil {
		return x.ETag
	}
	return ""
}

type GetAdminEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *GetAdminEndpointRequest) Reset() {
	*x = GetAdminEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdminEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminEndpointRequest) ProtoMessage() {}

func (x *GetAdminEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminEndpointRequest.ProtoReflect.Descriptor instead.
func (*GetAdminEndpointRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{2}
}

func (x *GetAdminEndpointRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type ListAdminEndpointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminEndpoints []*AdminEndpoint `protobuf:"bytes,1,rep,name=adminEndpoints,proto3" json:"adminEndpoints,omitempty"`
}

func (x *ListAdminEndpointsResponse) Reset() {
	*x = ListAdminEndpointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAdminEndpointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdminEndpointsResponse) ProtoMessage() {}

func (x *ListAdminEndpointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdminEndpointsResponse.ProtoReflect.Descriptor instead.
func (*ListAdminEndpointsResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{3}
}

func (x *ListAdminEndpointsResponse) GetAdminEndpoints() []*AdminEndpoint {
	if x != nil {
		return x.AdminEndpoints
	}
	return nil
}

type ListAdminEndpointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ListAdminEndpointsRequest) Reset() {
	*x = ListAdminEndpointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAdminEndpointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdminEndpointsRequest) ProtoMessage() {}

func (x *ListAdminEndpointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdminEndpointsRequest.ProtoReflect.Descriptor instead.
func (*ListAdminEndpointsRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{4}
}

func (x *ListAdminEndpointsRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type CreateAdminEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32   `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Ips  []string `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *CreateAdminEndpointRequest) Reset() {
	*x = CreateAdminEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAdminEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAdminEndpointRequest) ProtoMessage() {}

func (x *CreateAdminEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAdminEndpointRequest.ProtoReflect.Descriptor instead.
func (*CreateAdminEndpointRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{5}
}

func (x *CreateAdminEndpointRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *CreateAdminEndpointRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type UpdateAdminEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32   `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Ips  []string `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *UpdateAdminEndpointRequest) Reset() {
	*x = UpdateAdminEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAdminEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAdminEndpointRequest) ProtoMessage() {}

func (x *UpdateAdminEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAdminEndpointRequest.ProtoReflect.Descriptor instead.
func (*UpdateAdminEndpointRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateAdminEndpointRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *UpdateAdminEndpointRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type DeleteAdminEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *DeleteAdminEndpointRequest) Reset() {
	*x = DeleteAdminEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdminEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdminEndpointRequest) ProtoMessage() {}

func (x *DeleteAdminEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdminEndpointRequest.ProtoReflect.Descriptor instead.
func (*DeleteAdminEndpointRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteAdminEndpointRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type DeleteAdminEndpointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAdminEndpointResponse) Reset() {
	*x = DeleteAdminEndpointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdminEndpointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdminEndpointResponse) ProtoMessage() {}

func (x *DeleteAdminEndpointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdminEndpointResponse.ProtoReflect.Descriptor instead.
func (*DeleteAdminEndpointResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{8}
}

type CreateCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName string    `protobuf:"bytes,1,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ID          string    `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Type        CredsType `protobuf:"varint,3,opt,name=type,proto3,enum=lightbits.api.duros.v2.CredsType" json:"type,omitempty"`
	Payload     []byte    `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CreateCredentialRequest) Reset() {
	*x = CreateCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCredentialRequest) ProtoMessage() {}

func (x *CreateCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCredentialRequest.ProtoReflect.Descriptor instead.
func (*CreateCredentialRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{9}
}

func (x *CreateCredentialRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *CreateCredentialRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CreateCredentialRequest) GetType() CredsType {
	if x != nil {
		return x.Type
	}
	return CredsType_UnknownType
}

func (x *CreateCredentialRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Credential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName string    `protobuf:"bytes,1,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ID          string    `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Type        CredsType `protobuf:"varint,3,opt,name=type,proto3,enum=lightbits.api.duros.v2.CredsType" json:"type,omitempty"`
	Payload     []byte    `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Credential) Reset() {
	*x = Credential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{10}
}

func (x *Credential) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *Credential) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Credential) GetType() CredsType {
	if x != nil {
		return x.Type
	}
	return CredsType_UnknownType
}

func (x *Credential) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type DeleteCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *DeleteCredentialRequest) Reset() {
	*x = DeleteCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCredentialRequest) ProtoMessage() {}

func (x *DeleteCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCredentialRequest.ProtoReflect.Descriptor instead.
func (*DeleteCredentialRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteCredentialRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DeleteCredentialRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type DeleteCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCredentialResponse) Reset() {
	*x = DeleteCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCredentialResponse) ProtoMessage() {}

func (x *DeleteCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCredentialResponse.ProtoReflect.Descriptor instead.
func (*DeleteCredentialResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{12}
}

type ListCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName string `protobuf:"bytes,1,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *ListCredentialsRequest) Reset() {
	*x = ListCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCredentialsRequest) ProtoMessage() {}

func (x *ListCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCredentialsRequest.ProtoReflect.Descriptor instead.
func (*ListCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{13}
}

func (x *ListCredentialsRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type ListCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credentials []*Credential `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *ListCredentialsResponse) Reset() {
	*x = ListCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCredentialsResponse) ProtoMessage() {}

func (x *ListCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCredentialsResponse.ProtoReflect.Descriptor instead.
func (*ListCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{14}
}

func (x *ListCredentialsResponse) GetCredentials() []*Credential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type GetCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *GetCredentialRequest) Reset() {
	*x = GetCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialRequest) ProtoMessage() {}

func (x *GetCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialRequest.ProtoReflect.Descriptor instead.
func (*GetCredentialRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{15}
}

func (x *GetCredentialRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GetCredentialRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type DefaultPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyType PolicyType `protobuf:"varint,1,opt,name=policyType,proto3,enum=lightbits.api.duros.v2.PolicyType" json:"policyType,omitempty"`
	PolicyUUID string     `protobuf:"bytes,2,opt,name=policyUUID,proto3" json:"policyUUID,omitempty"`
}

func (x *DefaultPolicy) Reset() {
	*x = DefaultPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultPolicy) ProtoMessage() {}

func (x *DefaultPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultPolicy.ProtoReflect.Descriptor instead.
func (*DefaultPolicy) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{16}
}

func (x *DefaultPolicy) GetPolicyType() PolicyType {
	if x != nil {
		return x.PolicyType
	}
	return PolicyType_unknown
}

func (x *DefaultPolicy) GetPolicyUUID() string {
	if x != nil {
		return x.PolicyUUID
	}
	return ""
}

type CreateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     string           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DefaultPolicies []*DefaultPolicy `protobuf:"bytes,3,rep,name=defaultPolicies,proto3" json:"defaultPolicies,omitempty"`
}

func (x *CreateProjectRequest) Reset() {
	*x = CreateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectRequest) ProtoMessage() {}

func (x *CreateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{17}
}

func (x *CreateProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProjectRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateProjectRequest) GetDefaultPolicies() []*DefaultPolicy {
	if x != nil {
		return x.DefaultPolicies
	}
	return nil
}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID            string           `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name            string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DefaultPolicies []*DefaultPolicy `protobuf:"bytes,4,rep,name=defaultPolicies,proto3" json:"defaultPolicies,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{18}
}

func (x *Project) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Project) GetDefaultPolicies() []*DefaultPolicy {
	if x != nil {
		return x.DefaultPolicies
	}
	return nil
}

type DeleteProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteProjectRequest) Reset() {
	*x = DeleteProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectRequest) ProtoMessage() {}

func (x *DeleteProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteProjectResponse) Reset() {
	*x = DeleteProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectResponse) ProtoMessage() {}

func (x *DeleteProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectResponse.ProtoReflect.Descriptor instead.
func (*DeleteProjectResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{20}
}

type ListProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListProjectsRequest) Reset() {
	*x = ListProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsRequest) ProtoMessage() {}

func (x *ListProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListProjectsRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{21}
}

type ListProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects []*Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *ListProjectsResponse) Reset() {
	*x = ListProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsResponse) ProtoMessage() {}

func (x *ListProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsResponse.ProtoReflect.Descriptor instead.
func (*ListProjectsResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{22}
}

func (x *ListProjectsResponse) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

type GetProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{23}
}

func (x *GetProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StringList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StringList) Reset() {
	*x = StringList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringList) ProtoMessage() {}

func (x *StringList) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringList.ProtoReflect.Descriptor instead.
func (*StringList) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{24}
}

func (x *StringList) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type GetVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetVersionRequest) Reset() {
	*x = GetVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionRequest) ProtoMessage() {}

func (x *GetVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionRequest.ProtoReflect.Descriptor instead.
func (*GetVersionRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{25}
}

type CreateVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size string `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	// acl
	//
	// Access control list of strings (host NQN). Valid values: list of strings/ALLOW_ANY/ALLOW_NONE
	Acl *StringList `protobuf:"bytes,3,opt,name=acl,proto3" json:"acl,omitempty"`
	// compression
	//
	// valid values: true/enable/enabled or false/disable/disabled
	Compression string `protobuf:"bytes,4,opt,name=compression,proto3" json:"compression,omitempty"`
	ReplicaCount uint32 `protobuf:"varint,5,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	// IPAcl
	//
	// Access control list of IP addresses. Valid values: list of valid IP addresses/ALLOW_ANY/ALLOW_NONE (optional, default: ALLOW_ANY)
	IPAcl *StringList `protobuf:"bytes,6,opt,name=IPAcl,proto3" json:"IPAcl,omitempty"`
	// minReplicas
	//
	// not used
	MinReplicas uint32 `protobuf:"varint,7,opt,name=minReplicas,proto3" json:"minReplicas,omitempty"`
	// volume sector size. Valid values: 4K (default), 512B
	SectorSize CreateVolumeRequest_SectorSizeEnum `protobuf:"varint,8,opt,name=sectorSize,proto3,enum=lightbits.api.duros.v2.CreateVolumeRequest_SectorSizeEnum" json:"sectorSize,omitempty"`
	// project name
	ProjectName           string                  `protobuf:"bytes,9,opt,name=projectName,proto3" json:"projectName,omitempty"`
	SourceSnapshotUUID    string                  `protobuf:"bytes,10,opt,name=sourceSnapshotUUID,proto3" json:"sourceSnapshotUUID,omitempty"`
	SourceSnapshotName    string                  `protobuf:"bytes,11,opt,name=sourceSnapshotName,proto3" json:"sourceSnapshotName,omitempty"`
	PlacementRestrictions []*LabelMatchExpression `protobuf:"bytes,12,rep,name=placementRestrictions,proto3" json:"placementRestrictions,omitempty"`
	// Types that are assignable to QosPolicyID:
	//
	//	*CreateVolumeRequest_QosPolicyUUID
	//	*CreateVolumeRequest_QosPolicyName
	QosPolicyID isCreateVolumeRequest_QosPolicyID `protobuf_oneof:"qosPolicyID"`
}

func (x *CreateVolumeRequest) Reset() {
	*x = CreateVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVolumeRequest) ProtoMessage() {}

func (x *CreateVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVolumeRequest.ProtoReflect.Descriptor instead.
func (*CreateVolumeRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{26}
}

func (x *CreateVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVolumeRequest) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *CreateVolumeRequest) GetAcl() *StringList {
	if x != nil {
		return x.Acl
	}
	return nil
}

func (x *CreateVolumeRequest) GetCompression() string {
	if x != nil {
		return x.Compression
	}
	return ""
}

func (x *CreateVolumeRequest) GetReplicaCount() uint32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

func (x *CreateVolumeRequest) GetIPAcl() *StringList {
	if x != nil {
		return x.IPAcl
	}
	return nil
}

func (x *CreateVolumeRequest) GetMinReplicas() uint32 {
	if x != nil {
		return x.MinReplicas
	}
	return 0
}

func (x *CreateVolumeRequest) GetSectorSize() CreateVolumeRequest_SectorSizeEnum {
	if x != nil {
		return x.SectorSize
	}
	return CreateVolumeRequest_sectorSize_Default
}

func (x *CreateVolumeRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *CreateVolumeRequest) GetSourceSnapshotUUID() string {
	if x != nil {
		return x.SourceSnapshotUUID
	}
	return ""
}

func (x *CreateVolumeRequest) GetSourceSnapshotName() string {
	if x != nil {
		return x.SourceSnapshotName
	}
	return ""
}

func (x *CreateVolumeRequest) GetPlacementRestrictions() []*LabelMatchExpression {
	if x != nil {
		return x.PlacementRestrictions
	}
	return nil
}

func (m *CreateVolumeRequest) GetQosPolicyID() isCreateVolumeRequest_QosPolicyID {
	if m != nil {
		return m.QosPolicyID
	}
	return nil
}

func (x *CreateVolumeRequest) GetQosPolicyUUID() string {
	if x, ok := x.GetQosPolicyID().(*CreateVolumeRequest_QosPolicyUUID); ok {
		return x.QosPolicyUUID
	}
	return ""
}

func (x *CreateVolumeRequest) GetQosPolicyName() string {
	if x, ok := x.GetQosPolicyID().(*CreateVolumeRequest_QosPolicyName); ok {
		return x.QosPolicyName
	}
	return ""
}

type isCreateVolumeRequest_QosPolicyID interface {
	isCreateVolumeRequest_QosPolicyID()
}

type CreateVolumeRequest_QosPolicyUUID struct {
	QosPolicyUUID string `protobuf:"bytes,13,opt,name=qosPolicyUUID,proto3,oneof"`
}

type CreateVolumeRequest_QosPolicyName struct {
	QosPolicyName string `protobuf:"bytes,14,opt,name=qosPolicyName,proto3,oneof"`
}

func (*CreateVolumeRequest_QosPolicyUUID) isCreateVolumeRequest_QosPolicyID() {}

func (*CreateVolumeRequest_QosPolicyName) isCreateVolumeRequest_QosPolicyID() {}

type DeleteVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectName string `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *DeleteVolumeRequest) Reset() {
	*x = DeleteVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVolumeRequest) ProtoMessage() {}

func (x *DeleteVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVolumeRequest.ProtoReflect.Descriptor instead.
func (*DeleteVolumeRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteVolumeRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *DeleteVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteVolumeRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type DeleteVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteVolumeResponse) Reset() {
	*x = DeleteVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVolumeResponse) ProtoMessage() {}

func (x *DeleteVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVolumeResponse.ProtoReflect.Descriptor instead.
func (*DeleteVolumeResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{28}
}

type EnableServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *EnableServerRequest) Reset() {
	*x = EnableServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableServerRequest) ProtoMessage() {}

func (x *EnableServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableServerRequest.ProtoReflect.Descriptor instead.
func (*EnableServerRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{29}
}

func (x *EnableServerRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type DisableServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// ForceRemove
	//
	// When 'true' bypasses upgradeability (loss of service) check when disabling server
	ForceDisable bool `protobuf:"varint,2,opt,name=ForceDisable,proto3" json:"ForceDisable,omitempty"`
}

func (x *DisableServerRequest) Reset() {
	*x = DisableServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableServerRequest) ProtoMessage() {}

func (x *DisableServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableServerRequest.ProtoReflect.Descriptor instead.
func (*DisableServerRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{30}
}

func (x *DisableServerRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *DisableServerRequest) GetForceDisable() bool {
	if x != nil {
		return x.ForceDisable
	}
	return false
}

type DeleteServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *DeleteServerRequest) Reset() {
	*x = DeleteServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServerRequest) ProtoMessage() {}

func (x *DeleteServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServerRequest.ProtoReflect.Descriptor instead.
func (*DeleteServerRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteServerRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type ReplaceNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcNodeUUID        string `protobuf:"bytes,1,opt,name=SrcNodeUUID,proto3" json:"SrcNodeUUID,omitempty"`
	TargetNodeUUID     string `protobuf:"bytes,2,opt,name=TargetNodeUUID,proto3" json:"TargetNodeUUID,omitempty"`
	ReplaceWhileActive bool   `protobuf:"varint,3,opt,name=ReplaceWhileActive,proto3" json:"ReplaceWhileActive,omitempty"`
}

func (x *ReplaceNodeRequest) Reset() {
	*x = ReplaceNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceNodeRequest) ProtoMessage() {}

func (x *ReplaceNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceNodeRequest.ProtoReflect.Descriptor instead.
func (*ReplaceNodeRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{32}
}

func (x *ReplaceNodeRequest) GetSrcNodeUUID() string {
	if x != nil {
		return x.SrcNodeUUID
	}
	return ""
}

func (x *ReplaceNodeRequest) GetTargetNodeUUID() string {
	if x != nil {
		return x.TargetNodeUUID
	}
	return ""
}

func (x *ReplaceNodeRequest) GetReplaceWhileActive() bool {
	if x != nil {
		return x.ReplaceWhileActive
	}
	return false
}

type CreateServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// serverEndpoints
	//
	// Etcd member endpoint. In current version, only a single point is allowed.
	ServerEndpoints []string `protobuf:"bytes,1,rep,name=serverEndpoints,proto3" json:"serverEndpoints,omitempty"`
	ServerUUID      string   `protobuf:"bytes,2,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	// reuseIP
	//
	// Optional. When true, bypasses validation if given endpoint is used by another server
	ReuseIP bool `protobuf:"varint,3,opt,name=reuseIP,proto3" json:"reuseIP,omitempty"`
}

func (x *CreateServerRequest) Reset() {
	*x = CreateServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServerRequest) ProtoMessage() {}

func (x *CreateServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServerRequest.ProtoReflect.Descriptor instead.
func (*CreateServerRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{33}
}

func (x *CreateServerRequest) GetServerEndpoints() []string {
	if x != nil {
		return x.ServerEndpoints
	}
	return nil
}

func (x *CreateServerRequest) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *CreateServerRequest) GetReuseIP() bool {
	if x != nil {
		return x.ReuseIP
	}
	return false
}

type UpdateVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// acl
	//
	// Access control list of strings (host NQN). Valid values: list of strings/ALLOW_ANY/ALLOW_NONE
	Acl *StringList `protobuf:"bytes,2,opt,name=acl,proto3" json:"acl,omitempty"`
	// IPAcl
	//
	// Access control list of IP addresses. Valid values: list of valid IP addresses/ALLOW_ANY/ALLOW_NONE
	IPAcl *StringList `protobuf:"bytes,3,opt,name=IPAcl,proto3" json:"IPAcl,omitempty"`
	Size  string      `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	// compression
	//
	// valid values: true/enable/enabled or false/disable/disabled
	Compression string `protobuf:"bytes,5,opt,name=compression,proto3" json:"compression,omitempty"`
	// project name
	ProjectName string `protobuf:"bytes,6,opt,name=projectName,proto3" json:"projectName,omitempty"`
	// qos policy uuid
	//
	// Types that are assignable to QosPolicyID:
	//
	//	*UpdateVolumeRequest_QosPolicyUUID
	//	*UpdateVolumeRequest_QosPolicyName
	QosPolicyID isUpdateVolumeRequest_QosPolicyID `protobuf_oneof:"qosPolicyID"`
}

func (x *UpdateVolumeRequest) Reset() {
	*x = UpdateVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVolumeRequest) ProtoMessage() {}

func (x *UpdateVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVolumeRequest.ProtoReflect.Descriptor instead.
func (*UpdateVolumeRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateVolumeRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *UpdateVolumeRequest) GetAcl() *StringList {
	if x != nil {
		return x.Acl
	}
	return nil
}

func (x *UpdateVolumeRequest) GetIPAcl() *StringList {
	if x != nil {
		return x.IPAcl
	}
	return nil
}

func (x *UpdateVolumeRequest) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *UpdateVolumeRequest) GetCompression() string {
	if x != nil {
		return x.Compression
	}
	return ""
}

func (x *UpdateVolumeRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (m *UpdateVolumeRequest) GetQosPolicyID() isUpdateVolumeRequest_QosPolicyID {
	if m != nil {
		return m.QosPolicyID
	}
	return nil
}

func (x *UpdateVolumeRequest) GetQosPolicyUUID() string {
	if x, ok := x.GetQosPolicyID().(*UpdateVolumeRequest_QosPolicyUUID); ok {
		return x.QosPolicyUUID
	}
	return ""
}

func (x *UpdateVolumeRequest) GetQosPolicyName() string {
	if x, ok := x.GetQosPolicyID().(*UpdateVolumeRequest_QosPolicyName); ok {
		return x.QosPolicyName
	}
	return ""
}

type isUpdateVolumeRequest_QosPolicyID interface {
	isUpdateVolumeRequest_QosPolicyID()
}

type UpdateVolumeRequest_QosPolicyUUID struct {
	QosPolicyUUID string `protobuf:"bytes,7,opt,name=qosPolicyUUID,proto3,oneof"`
}

type UpdateVolumeRequest_QosPolicyName struct {
	QosPolicyName string `protobuf:"bytes,8,opt,name=qosPolicyName,proto3,oneof"`
}

func (*UpdateVolumeRequest_QosPolicyUUID) isUpdateVolumeRequest_QosPolicyID() {}

func (*UpdateVolumeRequest_QosPolicyName) isUpdateVolumeRequest_QosPolicyID() {}

type ProxyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL
	//
	// URL of the proxy server. Pattern: "http://<server-ip>:<port>"
	URL string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
	// Username
	//
	// Username for the proxy server
	Username string `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	// Password
	//
	// Password for the proxy server
	Password string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (x *ProxyInfo) Reset() {
	*x = ProxyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyInfo) ProtoMessage() {}

func (x *ProxyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyInfo.ProtoReflect.Descriptor instead.
func (*ProxyInfo) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{35}
}

func (x *ProxyInfo) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *ProxyInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ProxyInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type UpgradeServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// InstallPkgUri
	//
	// URI of LightOS package to install
	InstallPkgUri string `protobuf:"bytes,2,opt,name=InstallPkgUri,proto3" json:"InstallPkgUri,omitempty"`
	// ForceUpgrade
	//
	// Optional. When true, bypasses the upgradrability (loss of service) check.
	ForceUpgrade bool `protobuf:"varint,3,opt,name=ForceUpgrade,proto3" json:"ForceUpgrade,omitempty"`
	// ProxyInfo
	//
	// Optional. Proxy server information for upgrade behind proxy.
	ProxyInfo *ProxyInfo `protobuf:"bytes,4,opt,name=ProxyInfo,proto3" json:"ProxyInfo,omitempty"`
}

func (x *UpgradeServerRequest) Reset() {
	*x = UpgradeServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeServerRequest) ProtoMessage() {}

func (x *UpgradeServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeServerRequest.ProtoReflect.Descriptor instead.
func (*UpgradeServerRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{36}
}

func (x *UpgradeServerRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *UpgradeServerRequest) GetInstallPkgUri() string {
	if x != nil {
		return x.InstallPkgUri
	}
	return ""
}

func (x *UpgradeServerRequest) GetForceUpgrade() bool {
	if x != nil {
		return x.ForceUpgrade
	}
	return false
}

func (x *UpgradeServerRequest) GetProxyInfo() *ProxyInfo {
	if x != nil {
		return x.ProxyInfo
	}
	return nil
}

type UpgradeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InstallPkgUri
	//
	// URI of LightOS package to install
	InstallPkgUri string `protobuf:"bytes,1,opt,name=InstallPkgUri,proto3" json:"InstallPkgUri,omitempty"`
	// UUIDs
	//
	// Optional. Servers with given UUIDs are upgraded. If not given, all servers in the cluster are upgraded according to upgradeablity (loss of service) check.
	UUIDs []string `protobuf:"bytes,2,rep,name=UUIDs,proto3" json:"UUIDs,omitempty"`
	// ProxyInfo
	//
	// Optional. Proxy server information for upgrade behind proxy.
	ProxyInfo *ProxyInfo `protobuf:"bytes,3,opt,name=ProxyInfo,proto3" json:"ProxyInfo,omitempty"`
}

func (x *UpgradeClusterRequest) Reset() {
	*x = UpgradeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeClusterRequest) ProtoMessage() {}

func (x *UpgradeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeClusterRequest.ProtoReflect.Descriptor instead.
func (*UpgradeClusterRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{37}
}

func (x *UpgradeClusterRequest) GetInstallPkgUri() string {
	if x != nil {
		return x.InstallPkgUri
	}
	return ""
}

func (x *UpgradeClusterRequest) GetUUIDs() []string {
	if x != nil {
		return x.UUIDs
	}
	return nil
}

func (x *UpgradeClusterRequest) GetProxyInfo() *ProxyInfo {
	if x != nil {
		return x.ProxyInfo
	}
	return nil
}

type GetClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{38}
}

type UpdateNvmeDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUUID   string `protobuf:"bytes,1,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	SerialNumber string `protobuf:"bytes,2,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	LedPattern   string `protobuf:"bytes,3,opt,name=ledPattern,proto3" json:"ledPattern,omitempty"`
}

func (x *UpdateNvmeDeviceRequest) Reset() {
	*x = UpdateNvmeDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNvmeDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNvmeDeviceRequest) ProtoMessage() {}

func (x *UpdateNvmeDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNvmeDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateNvmeDeviceRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateNvmeDeviceRequest) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *UpdateNvmeDeviceRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *UpdateNvmeDeviceRequest) GetLedPattern() string {
	if x != nil {
		return x.LedPattern
	}
	return ""
}

type AddNvmeDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber string `protobuf:"bytes,1,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	NodeUUID     string `protobuf:"bytes,2,opt,name=nodeUUID,proto3" json:"nodeUUID,omitempty"`
}

func (x *AddNvmeDeviceRequest) Reset() {
	*x = AddNvmeDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNvmeDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNvmeDeviceRequest) ProtoMessage() {}

func (x *AddNvmeDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNvmeDeviceRequest.ProtoReflect.Descriptor instead.
func (*AddNvmeDeviceRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{40}
}

func (x *AddNvmeDeviceRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *AddNvmeDeviceRequest) GetNodeUUID() string {
	if x != nil {
		return x.NodeUUID
	}
	return ""
}

type GetHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostNQN string `protobuf:"bytes,1,opt,name=hostNQN,proto3" json:"hostNQN,omitempty"`
}

func (x *GetHostRequest) Reset() {
	*x = GetHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostRequest) ProtoMessage() {}

func (x *GetHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostRequest.ProtoReflect.Descriptor instead.
func (*GetHostRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{41}
}

func (x *GetHostRequest) GetHostNQN() string {
	if x != nil {
		return x.HostNQN
	}
	return ""
}

type ListHostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostNQN    string `protobuf:"bytes,1,opt,name=hostNQN,proto3" json:"hostNQN,omitempty"`
	VolumeUUID string `protobuf:"bytes,2,opt,name=volumeUUID,proto3" json:"volumeUUID,omitempty"`
}

func (x *ListHostsRequest) Reset() {
	*x = ListHostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostsRequest) ProtoMessage() {}

func (x *ListHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostsRequest.ProtoReflect.Descriptor instead.
func (*ListHostsRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{42}
}

func (x *ListHostsRequest) GetHostNQN() string {
	if x != nil {
		return x.HostNQN
	}
	return ""
}

func (x *ListHostsRequest) GetVolumeUUID() string {
	if x != nil {
		return x.VolumeUUID
	}
	return ""
}

type ListHostsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectedHosts []*ConnectedHost `protobuf:"bytes,1,rep,name=connectedHosts,proto3" json:"connectedHosts,omitempty"`
}

func (x *ListHostsResponse) Reset() {
	*x = ListHostsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHostsResponse) ProtoMessage() {}

func (x *ListHostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHostsResponse.ProtoReflect.Descriptor instead.
func (*ListHostsResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{43}
}

func (x *ListHostsResponse) GetConnectedHosts() []*ConnectedHost {
	if x != nil {
		return x.ConnectedHosts
	}
	return nil
}

type ListNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UUID          string `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	FailureDomain string `protobuf:"bytes,3,opt,name=failureDomain,proto3" json:"failureDomain,omitempty"`
}

func (x *ListNodeRequest) Reset() {
	*x = ListNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeRequest) ProtoMessage() {}

func (x *ListNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeRequest.ProtoReflect.Descriptor instead.
func (*ListNodeRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{44}
}

func (x *ListNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListNodeRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ListNodeRequest) GetFailureDomain() string {
	if x != nil {
		return x.FailureDomain
	}
	return ""
}

type ListEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName string `protobuf:"bytes,1,opt,name=projectName,proto3" json:"projectName,omitempty"`
	// nextToken
	//
	// Optional. A string combination of timestamp and event ID.
	// Used to determine the first event in the response list of events.
	NextToken string `protobuf:"bytes,2,opt,name=nextToken,proto3" json:"nextToken,omitempty"`
	// since
	//
	// Optional. Return a list of events with a timestamp not earlier than the given timestamp.
	Since string `protobuf:"bytes,3,opt,name=since,proto3" json:"since,omitempty"`
	// until
	//
	// Optional. Return a list of events with a timestamp not later than the given timestamp.
	Until string `protobuf:"bytes,4,opt,name=until,proto3" json:"until,omitempty"`
	// limit
	//
	// Optional. Return a list of events not larger then the given limit.
	Limit int64 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	// severity
	//
	// Optional. Return only events of the given severity.
	Severity []string `protobuf:"bytes,7,rep,name=severity,proto3" json:"severity,omitempty"`
	// component type
	//
	// Optional.Return only events of the given component type.
	ComponentType string `protobuf:"bytes,8,opt,name=componentType,proto3" json:"componentType,omitempty"`
}

func (x *ListEventsRequest) Reset() {
	*x = ListEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsRequest) ProtoMessage() {}

func (x *ListEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsRequest.ProtoReflect.Descriptor instead.
func (*ListEventsRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{45}
}

func (x *ListEventsRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ListEventsRequest) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *ListEventsRequest) GetSince() string {
	if x != nil {
		return x.Since
	}
	return ""
}

func (x *ListEventsRequest) GetUntil() string {
	if x != nil {
		return x.Until
	}
	return ""
}

func (x *ListEventsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListEventsRequest) GetSeverity() []string {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *ListEventsRequest) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

type ListEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events    []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	NextToken string   `protobuf:"bytes,2,opt,name=nextToken,proto3" json:"nextToken,omitempty"`
}

func (x *ListEventsResponse) Reset() {
	*x = ListEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsResponse) ProtoMessage() {}

func (x *ListEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsResponse.ProtoReflect.Descriptor instead.
func (*ListEventsResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{46}
}

func (x *ListEventsResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ListEventsResponse) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

type GetVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectName string `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *GetVolumeRequest) Reset() {
	*x = GetVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVolumeRequest) ProtoMessage() {}

func (x *GetVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVolumeRequest.ProtoReflect.Descriptor instead.
func (*GetVolumeRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{47}
}

func (x *GetVolumeRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *GetVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetVolumeRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type GetNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *GetNodeRequest) Reset() {
	*x = GetNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeRequest) ProtoMessage() {}

func (x *GetNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeRequest.ProtoReflect.Descriptor instead.
func (*GetNodeRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{48}
}

func (x *GetNodeRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type ListVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID          string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FailureDomain string `protobuf:"bytes,3,opt,name=failureDomain,proto3" json:"failureDomain,omitempty"`
	// offsetUUID
	//
	// Optional. When provided, returned list starts with next to offsetUUID volume.
	OffsetUUID string `protobuf:"bytes,4,opt,name=offsetUUID,proto3" json:"offsetUUID,omitempty"`
	// limit
	//
	// Optional. Limits the number of volumes in the response.
	Limit int64 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	ProjectName string `protobuf:"bytes,6,opt,name=projectName,proto3" json:"projectName,omitempty"`
	// source snapshot UUID
	//
	// Optional. Return only volumes created from this source snapshot.
	SnapshotUUID string `protobuf:"bytes,7,opt,name=snapshotUUID,proto3" json:"snapshotUUID,omitempty"`
}

func (x *ListVolumeRequest) Reset() {
	*x = ListVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVolumeRequest) ProtoMessage() {}

func (x *ListVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVolumeRequest.ProtoReflect.Descriptor instead.
func (*ListVolumeRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{49}
}

func (x *ListVolumeRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ListVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListVolumeRequest) GetFailureDomain() string {
	if x != nil {
		return x.FailureDomain
	}
	return ""
}

func (x *ListVolumeRequest) GetOffsetUUID() string {
	if x != nil {
		return x.OffsetUUID
	}
	return ""
}

func (x *ListVolumeRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListVolumeRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ListVolumeRequest) GetSnapshotUUID() string {
	if x != nil {
		return x.SnapshotUUID
	}
	return ""
}

type ListNvmeDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeUUID   string `protobuf:"bytes,1,opt,name=nodeUUID,proto3" json:"nodeUUID,omitempty"`
	ServerUUID string `protobuf:"bytes,2,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
}

func (x *ListNvmeDevicesRequest) Reset() {
	*x = ListNvmeDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmeDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmeDevicesRequest) ProtoMessage() {}

func (x *ListNvmeDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmeDevicesRequest.ProtoReflect.Descriptor instead.
func (*ListNvmeDevicesRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{50}
}

func (x *ListNvmeDevicesRequest) GetNodeUUID() string {
	if x != nil {
		return x.NodeUUID
	}
	return ""
}

func (x *ListNvmeDevicesRequest) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

type GetNvmeDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serial string `protobuf:"bytes,1,opt,name=Serial,proto3" json:"Serial,omitempty"`
}

func (x *GetNvmeDeviceRequest) Reset() {
	*x = GetNvmeDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNvmeDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNvmeDeviceRequest) ProtoMessage() {}

func (x *GetNvmeDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNvmeDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetNvmeDeviceRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{51}
}

func (x *GetNvmeDeviceRequest) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

type ListNvmeDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NvmeDevices []*UserNvmeDevicesResponse `protobuf:"bytes,1,rep,name=NvmeDevices,proto3" json:"NvmeDevices,omitempty"`
}

func (x *ListNvmeDevicesResponse) Reset() {
	*x = ListNvmeDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNvmeDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNvmeDevicesResponse) ProtoMessage() {}

func (x *ListNvmeDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNvmeDevicesResponse.ProtoReflect.Descriptor instead.
func (*ListNvmeDevicesResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{52}
}

func (x *ListNvmeDevicesResponse) GetNvmeDevices() []*UserNvmeDevicesResponse {
	if x != nil {
		return x.NvmeDevices
	}
	return nil
}

type ConnectedHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostNQN   string `protobuf:"bytes,1,opt,name=hostNQN,proto3" json:"hostNQN,omitempty"`
	IPAddress string `protobuf:"bytes,2,opt,name=iPAddress,proto3" json:"iPAddress,omitempty"`
	Hostname  string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// volumeUUIDs
	//
	// list of volumes to which this host connects to
	VolumeUUIDs []string `protobuf:"bytes,4,rep,name=volumeUUIDs,proto3" json:"volumeUUIDs,omitempty"`
}

func (x *ConnectedHost) Reset() {
	*x = ConnectedHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectedHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectedHost) ProtoMessage() {}

func (x *ConnectedHost) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectedHost.ProtoReflect.Descriptor instead.
func (*ConnectedHost) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{53}
}

func (x *ConnectedHost) GetHostNQN() string {
	if x != nil {
		return x.HostNQN
	}
	return ""
}

func (x *ConnectedHost) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *ConnectedHost) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ConnectedHost) GetVolumeUUIDs() []string {
	if x != nil {
		return x.VolumeUUIDs
	}
	return nil
}

type UserNvmeDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total capacity of the device in bytes
	Size uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// The numa node ID this device is associated with
	NumaNodeID uint64 `protobuf:"varint,2,opt,name=numaNodeID,proto3" json:"numaNodeID,omitempty"`
	// model
	//
	// Model string of the device, if exists
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// serial
	//
	// Serial of the block device, if exists
	Serial string `protobuf:"bytes,4,opt,name=serial,proto3" json:"serial,omitempty"`
	// server uuid
	//
	// The UUID of the server to which the block device is installed
	ServerUUID string `protobuf:"bytes,5,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	// device state
	//
	// Describes the state of the device, unmanaged device state will be None
	State UserNvmeDevicesResponse_StateEnum `protobuf:"varint,6,opt,name=state,proto3,enum=lightbits.api.duros.v2.UserNvmeDevicesResponse_StateEnum" json:"state,omitempty"`
	// device time of failure
	//
	// Timestamp that will be updated in case the device have failed
	FailureTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=failureTime,proto3" json:"failureTime,omitempty"`
	// device rebuild completion time
	//
	// Timestamp that will be updated once gftl have completed
	// to rebuild all the data that the device had, and we are safe
	// for second failure
	RebuildCompletionTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=rebuildCompletionTime,proto3" json:"rebuildCompletionTime,omitempty"`
	// name
	//
	// Device name or address
	Name string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// SED state
	//
	// whether a SED is managed by LB or not, and if not - why not
	SedState UserNvmeDevicesResponse_SEDState `protobuf:"varint,10,opt,name=sedState,proto3,enum=lightbits.api.duros.v2.UserNvmeDevicesResponse_SEDState" json:"sedState,omitempty"`
	// SED status
	//
	// current locking state of a SED, possibly managed by LB
	SedStatus UserNvmeDevicesResponse_SEDStatus `protobuf:"varint,11,opt,name=sedStatus,proto3,enum=lightbits.api.duros.v2.UserNvmeDevicesResponse_SEDStatus" json:"sedStatus,omitempty"`
	// node uuid that manages the device
	//
	// The UUID of the node that manages the device, empty string if the device is not managed
	NodeUUID string `protobuf:"bytes,12,opt,name=nodeUUID,proto3" json:"nodeUUID,omitempty"`
	// Etag
	//
	// identifier for a specific version of a resource
	ETag string `protobuf:"bytes,13,opt,name=ETag,proto3" json:"ETag,omitempty"`
	// Statistics
	//
	// Various nvme-device related statistics
	Statistics *NvmeDeviceStatisticsApi `protobuf:"bytes,14,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *UserNvmeDevicesResponse) Reset() {
	*x = UserNvmeDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNvmeDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNvmeDevicesResponse) ProtoMessage() {}

func (x *UserNvmeDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNvmeDevicesResponse.ProtoReflect.Descriptor instead.
func (*UserNvmeDevicesResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{54}
}

func (x *UserNvmeDevicesResponse) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *UserNvmeDevicesResponse) GetNumaNodeID() uint64 {
	if x != nil {
		return x.NumaNodeID
	}
	return 0
}

func (x *UserNvmeDevicesResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *UserNvmeDevicesResponse) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *UserNvmeDevicesResponse) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *UserNvmeDevicesResponse) GetState() UserNvmeDevicesResponse_StateEnum {
	if x != nil {
		return x.State
	}
	return UserNvmeDevicesResponse_None
}

func (x *UserNvmeDevicesResponse) GetFailureTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FailureTime
	}
	return nil
}

func (x *UserNvmeDevicesResponse) GetRebuildCompletionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RebuildCompletionTime
	}
	return nil
}

func (x *UserNvmeDevicesResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserNvmeDevicesResponse) GetSedState() UserNvmeDevicesResponse_SEDState {
	if x != nil {
		return x.SedState
	}
	return UserNvmeDevicesResponse_Unknown
}

func (x *UserNvmeDevicesResponse) GetSedStatus() UserNvmeDevicesResponse_SEDStatus {
	if x != nil {
		return x.SedStatus
	}
	return UserNvmeDevicesResponse_UnknownLockStatus
}

func (x *UserNvmeDevicesResponse) GetNodeUUID() string {
	if x != nil {
		return x.NodeUUID
	}
	return ""
}

func (x *UserNvmeDevicesResponse) GetETag() string {
	if x != nil {
		return x.ETag
	}
	return ""
}

func (x *UserNvmeDevicesResponse) GetStatistics() *NvmeDeviceStatisticsApi {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type DurosNodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UUID   string                   `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	State  DurosNodeInfo_State      `protobuf:"varint,3,opt,name=state,proto3,enum=lightbits.api.duros.v2.DurosNodeInfo_State" json:"state,omitempty"`
	Status DurosNodeInfo_StatusEnum `protobuf:"varint,4,opt,name=status,proto3,enum=lightbits.api.duros.v2.DurosNodeInfo_StatusEnum" json:"status,omitempty"`
	// peer <ip>:<port> service datapath IP
	NvmeEndpoint         string             `protobuf:"bytes,5,opt,name=nvmeEndpoint,proto3" json:"nvmeEndpoint,omitempty"`
	FailureDomains       []string           `protobuf:"bytes,6,rep,name=failureDomains,proto3" json:"failureDomains,omitempty"`
	FailureInfo          string             `protobuf:"bytes,7,opt,name=failureInfo,proto3" json:"failureInfo,omitempty"`
	Hostname             string             `protobuf:"bytes,9,opt,name=hostname,proto3" json:"hostname,omitempty"`
	InLocalRebuild       bool               `protobuf:"varint,10,opt,name=inLocalRebuild,proto3" json:"inLocalRebuild,omitempty"`
	LocalRebuildProgress uint32             `protobuf:"varint,11,opt,name=localRebuildProgress,proto3" json:"localRebuildProgress,omitempty"`
	NumManagedDevices    int32              `protobuf:"varint,12,opt,name=numManagedDevices,proto3" json:"numManagedDevices,omitempty"`
	MaxNvmeDevices       uint32             `protobuf:"varint,13,opt,name=maxNvmeDevices,proto3" json:"maxNvmeDevices,omitempty"`
	Ec                   bool               `protobuf:"varint,14,opt,name=ec,proto3" json:"ec,omitempty"`
	Statistics           *NodeStatisticsApi `protobuf:"bytes,15,opt,name=statistics,proto3" json:"statistics,omitempty"`
	ServerUUID           string             `protobuf:"bytes,16,opt,name=serverUUID,proto3" json:"serverUUID,omitempty"`
	// Etag
	//
	// identifier for a specific version of a resource
	ETag             string `protobuf:"bytes,17,opt,name=ETag,proto3" json:"ETag,omitempty"`
	ReadOnly         bool   `protobuf:"varint,18,opt,name=readOnly,proto3" json:"readOnly,omitempty"`
	PowerupProgress  uint32 `protobuf:"varint,19,opt,name=powerupProgress,proto3" json:"powerupProgress,omitempty"`
	PermanentFailure bool   `protobuf:"varint,20,opt,name=permanentFailure,proto3" json:"permanentFailure,omitempty"`
}

func (x *DurosNodeInfo) Reset() {
	*x = DurosNodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DurosNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurosNodeInfo) ProtoMessage() {}

func (x *DurosNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurosNodeInfo.ProtoReflect.Descriptor instead.
func (*DurosNodeInfo) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{55}
}

func (x *DurosNodeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DurosNodeInfo) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *DurosNodeInfo) GetState() DurosNodeInfo_State {
	if x != nil {
		return x.State
	}
	return DurosNodeInfo_Unknown
}

func (x *DurosNodeInfo) GetStatus() DurosNodeInfo_StatusEnum {
	if x != nil {
		return x.Status
	}
	return DurosNodeInfo_NoStatus
}

func (x *DurosNodeInfo) GetNvmeEndpoint() string {
	if x != nil {
		return x.NvmeEndpoint
	}
	return ""
}

func (x *DurosNodeInfo) GetFailureDomains() []string {
	if x != nil {
		return x.FailureDomains
	}
	return nil
}

func (x *DurosNodeInfo) GetFailureInfo() string {
	if x != nil {
		return x.FailureInfo
	}
	return ""
}

func (x *DurosNodeInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DurosNodeInfo) GetInLocalRebuild() bool {
	if x != nil {
		return x.InLocalRebuild
	}
	return false
}

func (x *DurosNodeInfo) GetLocalRebuildProgress() uint32 {
	if x != nil {
		return x.LocalRebuildProgress
	}
	return 0
}

func (x *DurosNodeInfo) GetNumManagedDevices() int32 {
	if x != nil {
		return x.NumManagedDevices
	}
	return 0
}

func (x *DurosNodeInfo) GetMaxNvmeDevices() uint32 {
	if x != nil {
		return x.MaxNvmeDevices
	}
	return 0
}

func (x *DurosNodeInfo) GetEc() bool {
	if x != nil {
		return x.Ec
	}
	return false
}

func (x *DurosNodeInfo) GetStatistics() *NodeStatisticsApi {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *DurosNodeInfo) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *DurosNodeInfo) GetETag() string {
	if x != nil {
		return x.ETag
	}
	return ""
}

func (x *DurosNodeInfo) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *DurosNodeInfo) GetPowerupProgress() uint32 {
	if x != nil {
		return x.PowerupProgress
	}
	return 0
}

func (x *DurosNodeInfo) GetPermanentFailure() bool {
	if x != nil {
		return x.PermanentFailure
	}
	return false
}

type ListNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*DurosNodeInfo `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ListNodesResponse) Reset() {
	*x = ListNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesResponse) ProtoMessage() {}

func (x *ListNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesResponse.ProtoReflect.Descriptor instead.
func (*ListNodesResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{56}
}

func (x *ListNodesResponse) GetNodes() []*DurosNodeInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type ListVolumesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volumes []*Volume `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *ListVolumesResponse) Reset() {
	*x = ListVolumesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVolumesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVolumesResponse) ProtoMessage() {}

func (x *ListVolumesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVolumesResponse.ProtoReflect.Descriptor instead.
func (*ListVolumesResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{57}
}

func (x *ListVolumesResponse) GetVolumes() []*Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type UpdateNvmeDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateNvmeDeviceResponse) Reset() {
	*x = UpdateNvmeDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNvmeDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNvmeDeviceResponse) ProtoMessage() {}

func (x *UpdateNvmeDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNvmeDeviceResponse.ProtoReflect.Descriptor instead.
func (*UpdateNvmeDeviceResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{58}
}

type AddNvmeDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddNvmeDeviceResponse) Reset() {
	*x = AddNvmeDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNvmeDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNvmeDeviceResponse) ProtoMessage() {}

func (x *AddNvmeDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNvmeDeviceResponse.ProtoReflect.Descriptor instead.
func (*AddNvmeDeviceResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{59}
}

type UpdateVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateVolumeResponse) Reset() {
	*x = UpdateVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVolumeResponse) ProtoMessage() {}

func (x *UpdateVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVolumeResponse.ProtoReflect.Descriptor instead.
func (*UpdateVolumeResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{60}
}

type UpgradeServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpgradeServerResponse) Reset() {
	*x = UpgradeServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeServerResponse) ProtoMessage() {}

func (x *UpgradeServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeServerResponse.ProtoReflect.Descriptor instead.
func (*UpgradeServerResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{61}
}

type UpgradeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpgradeClusterResponse) Reset() {
	*x = UpgradeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeClusterResponse) ProtoMessage() {}

func (x *UpgradeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeClusterResponse.ProtoReflect.Descriptor instead.
func (*UpgradeClusterResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{62}
}

type ReplaceNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReplaceNodeResponse) Reset() {
	*x = ReplaceNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceNodeResponse) ProtoMessage() {}

func (x *ReplaceNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceNodeResponse.ProtoReflect.Descriptor instead.
func (*ReplaceNodeResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{63}
}

type DeleteServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteServerResponse) Reset() {
	*x = DeleteServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServerResponse) ProtoMessage() {}

func (x *DeleteServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServerResponse.ProtoReflect.Descriptor instead.
func (*DeleteServerResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{64}
}

type DisableServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableServerResponse) Reset() {
	*x = DisableServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableServerResponse) ProtoMessage() {}

func (x *DisableServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableServerResponse.ProtoReflect.Descriptor instead.
func (*DisableServerResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{65}
}

type ListServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID              string                       `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name              string                       `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	RiskOfServiceLoss Server_RiskOfServiceLossEnum `protobuf:"varint,3,opt,name=RiskOfServiceLoss,proto3,enum=lightbits.api.duros.v2.Server_RiskOfServiceLossEnum" json:"RiskOfServiceLoss,omitempty"`
}

func (x *ListServersRequest) Reset() {
	*x = ListServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServersRequest) ProtoMessage() {}

func (x *ListServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServersRequest.ProtoReflect.Descriptor instead.
func (*ListServersRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{66}
}

func (x *ListServersRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ListServersRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListServersRequest) GetRiskOfServiceLoss() Server_RiskOfServiceLossEnum {
	if x != nil {
		return x.RiskOfServiceLoss
	}
	return Server_UnknownRiskOfServiceLoss
}

type GetServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *GetServerRequest) Reset() {
	*x = GetServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerRequest) ProtoMessage() {}

func (x *GetServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerRequest.ProtoReflect.Descriptor instead.
func (*GetServerRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{67}
}

func (x *GetServerRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type ListServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *ListServersResponse) Reset() {
	*x = ListServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServersResponse) ProtoMessage() {}

func (x *ListServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServersResponse.ProtoReflect.Descriptor instead.
func (*ListServersResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{68}
}

func (x *ListServersResponse) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// latest user API version
	ApiVersion string `protobuf:"bytes,4,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{69}
}

func (x *Version) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

type ClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster UUID
	//
	// UUID of cluster
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// subsystemNQN
	//
	// Subsystem NQN that shall be used by the hosts to connect to volumes on this cluster.
	SubsystemNQN string `protobuf:"bytes,2,opt,name=subsystemNQN,proto3" json:"subsystemNQN,omitempty"`
	// Current maximum number of replicas per volume
	//
	// A maximal number of replicas that a new volume can have, given current state of the nodes. This value depends on the healthiness of the nodes.
	CurrentMaxReplicas uint32 `protobuf:"varint,3,opt,name=currentMaxReplicas,proto3" json:"currentMaxReplicas,omitempty"`
	// Maximum number of replicas per volume supported by cluster.
	//
	// A maximal number of replicas that volume can have, given cluster installation parameters (Number of Servers, Failure Domains...).
	SupportedMaxReplicas uint32 `protobuf:"varint,4,opt,name=supportedMaxReplicas,proto3" json:"supportedMaxReplicas,omitempty"`
	// cluster statistics
	//
	// cluster statistics (storage capacity, used storage, compression ration...)
	Statistics *ClusterStatisticsApi `protobuf:"bytes,5,opt,name=statistics,proto3" json:"statistics,omitempty"`
	// Etag
	//
	// identifier for a specific version of a resource.
	ETag string `protobuf:"bytes,6,opt,name=ETag,proto3" json:"ETag,omitempty"`
	// Cluster Health
	//
	// Cluster health: OK- cluster healthy, Warning - Inactive node(s) and/or degraded volumes in cluster, Error - ReadOnly/Unavailable volumes in cluster.
	Health *ClusterHealth `protobuf:"bytes,7,opt,name=health,proto3" json:"health,omitempty"`
	// Minimal LightOS version
	//
	// Lowest version of LightOS running on one of the servers in cluster.
	MinVersionInCluster string `protobuf:"bytes,8,opt,name=MinVersionInCluster,proto3" json:"MinVersionInCluster,omitempty"`
	// Minimal allowed LightOS version
	//
	// For LightOS internal use.
	MinAllowedVersion string `protobuf:"bytes,9,opt,name=MinAllowedVersion,proto3" json:"MinAllowedVersion,omitempty"`
	// Maximal allowed LightOS version
	//
	// LightOS version this cluster may be upgraded to.
	MaxAllowedVersion string `protobuf:"bytes,10,opt,name=MaxAllowedVersion,proto3" json:"MaxAllowedVersion,omitempty"`
	// Addresses of the API Service
	//
	// A list of REST/gRPC endpoints - <ip>:<port> pairs that the API listen on.
	// Example entries:
	// - 192.168.16.16:443
	// - 192.168.16.17:443
	ApiEndpoints []string `protobuf:"bytes,11,rep,name=apiEndpoints,proto3" json:"apiEndpoints,omitempty"`
	// Addresses of the Discovery Service
	//
	// A list of TCP endpoints - <ip>:<port> pairs that the Discovery Service listen on.
	// Example entries:
	// - 192.168.16.16:8009
	// - 192.168.16.17:8009
	DiscoveryEndpoints []string `protobuf:"bytes,12,rep,name=discoveryEndpoints,proto3" json:"discoveryEndpoints,omitempty"`
	// cluster name
	//
	// cluster name.
	ClusterName string `protobuf:"bytes,13,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	// State of Node Level Encryption (NLE)
	//
	// State indicates whether NLE in cluster is enabled/enabling/disabled etc.
	NleState NLEState `protobuf:"varint,14,opt,name=nleState,proto3,enum=lightbits.api.duros.v2.NLEState" json:"nleState,omitempty"`
}

func (x *ClusterInfo) Reset() {
	*x = ClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfo) ProtoMessage() {}

func (x *ClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfo.ProtoReflect.Descriptor instead.
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{70}
}

func (x *ClusterInfo) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ClusterInfo) GetSubsystemNQN() string {
	if x != nil {
		return x.SubsystemNQN
	}
	return ""
}

func (x *ClusterInfo) GetCurrentMaxReplicas() uint32 {
	if x != nil {
		return x.CurrentMaxReplicas
	}
	return 0
}

func (x *ClusterInfo) GetSupportedMaxReplicas() uint32 {
	if x != nil {
		return x.SupportedMaxReplicas
	}
	return 0
}

func (x *ClusterInfo) GetStatistics() *ClusterStatisticsApi {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *ClusterInfo) GetETag() string {
	if x != nil {
		return x.ETag
	}
	return ""
}

func (x *ClusterInfo) GetHealth() *ClusterHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *ClusterInfo) GetMinVersionInCluster() string {
	if x != nil {
		return x.MinVersionInCluster
	}
	return ""
}

func (x *ClusterInfo) GetMinAllowedVersion() string {
	if x != nil {
		return x.MinAllowedVersion
	}
	return ""
}

func (x *ClusterInfo) GetMaxAllowedVersion() string {
	if x != nil {
		return x.MaxAllowedVersion
	}
	return ""
}

func (x *ClusterInfo) GetApiEndpoints() []string {
	if x != nil {
		return x.ApiEndpoints
	}
	return nil
}

func (x *ClusterInfo) GetDiscoveryEndpoints() []string {
	if x != nil {
		return x.DiscoveryEndpoints
	}
	return nil
}

func (x *ClusterInfo) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterInfo) GetNleState() NLEState {
	if x != nil {
		return x.NleState
	}
	return NLEState_UnknownNLEState
}

type ClusterInfoV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster UUID
	//
	// UUID of cluster
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// subsystemNQN
	//
	// Subsystem NQN that shall be used by the hosts to connect to volumes on this server.
	SubsystemNQN string `protobuf:"bytes,2,opt,name=subsystemNQN,proto3" json:"subsystemNQN,omitempty"`
	// Current maximum number of replicas per volume
	//
	// A maximal number of replicas that a new volume can have, given current state of the nodes. This value depends on the healthiness of the nodes.
	CurrentMaxReplicas uint32 `protobuf:"varint,3,opt,name=currentMaxReplicas,proto3" json:"currentMaxReplicas,omitempty"`
	// Maximum number of replicas per volume supported by cluster
	//
	// A maximal number of replicas that volume can have, given cluster installation parameters.
	SupportedMaxReplicas uint32 `protobuf:"varint,4,opt,name=supportedMaxReplicas,proto3" json:"supportedMaxReplicas,omitempty"`
	// Etag
	//
	// identifier for a specific version of a resource.
	ETag string `protobuf:"bytes,6,opt,name=ETag,proto3" json:"ETag,omitempty"`
	// Addresses of the API Service
	//
	// A list of REST/gRPC endpoints - <ip>:<port> pairs that the API listen on.
	// Example entries:
	// - 192.168.16.16:443
	// - 192.168.16.17:443
	ApiEndpoints []string `protobuf:"bytes,11,rep,name=apiEndpoints,proto3" json:"apiEndpoints,omitempty"`
	// Addresses of the Discovery Service
	//
	// A list of TCP endpoints - <ip>:<port> pairs that the Discovery Service listen on.
	// Example entries:
	// - 192.168.16.16:8009
	// - 192.168.16.17:8009
	DiscoveryEndpoints []string `protobuf:"bytes,12,rep,name=discoveryEndpoints,proto3" json:"discoveryEndpoints,omitempty"`
	// Addresses of the NVMe endpoints
	//
	// A list of TCP endpoints - <ip>:<port> pairs that the NVMe targets listen on.
	// Example entries:
	// - 192.168.16.16:4420
	// - 192.168.16.17:4420
	NvmeEndpoints []string `protobuf:"bytes,13,rep,name=nvmeEndpoints,proto3" json:"nvmeEndpoints,omitempty"`
	// cluster name
	//
	// cluster name.
	ClusterName string `protobuf:"bytes,14,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
}

func (x *ClusterInfoV2) Reset() {
	*x = ClusterInfoV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfoV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfoV2) ProtoMessage() {}

func (x *ClusterInfoV2) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfoV2.ProtoReflect.Descriptor instead.
func (*ClusterInfoV2) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{71}
}

func (x *ClusterInfoV2) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ClusterInfoV2) GetSubsystemNQN() string {
	if x != nil {
		return x.SubsystemNQN
	}
	return ""
}

func (x *ClusterInfoV2) GetCurrentMaxReplicas() uint32 {
	if x != nil {
		return x.CurrentMaxReplicas
	}
	return 0
}

func (x *ClusterInfoV2) GetSupportedMaxReplicas() uint32 {
	if x != nil {
		return x.SupportedMaxReplicas
	}
	return 0
}

func (x *ClusterInfoV2) GetETag() string {
	if x != nil {
		return x.ETag
	}
	return ""
}

func (x *ClusterInfoV2) GetApiEndpoints() []string {
	if x != nil {
		return x.ApiEndpoints
	}
	return nil
}

func (x *ClusterInfoV2) GetDiscoveryEndpoints() []string {
	if x != nil {
		return x.DiscoveryEndpoints
	}
	return nil
}

func (x *ClusterInfoV2) GetNvmeEndpoints() []string {
	if x != nil {
		return x.NvmeEndpoints
	}
	return nil
}

func (x *ClusterInfoV2) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type ClusterHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State                  ClusterHealth_State `protobuf:"varint,1,opt,name=state,proto3,enum=lightbits.api.duros.v2.ClusterHealth_State" json:"state,omitempty"`
	NumDegradedVolumes     uint32              `protobuf:"varint,2,opt,name=numDegradedVolumes,proto3" json:"numDegradedVolumes,omitempty"`
	NumReadOnlyVolumes     uint32              `protobuf:"varint,3,opt,name=numReadOnlyVolumes,proto3" json:"numReadOnlyVolumes,omitempty"`
	NumNotAvailableVolumes uint32              `protobuf:"varint,4,opt,name=numNotAvailableVolumes,proto3" json:"numNotAvailableVolumes,omitempty"`
	NumInactiveNodes       uint32              `protobuf:"varint,5,opt,name=numInactiveNodes,proto3" json:"numInactiveNodes,omitempty"`
}

func (x *ClusterHealth) Reset() {
	*x = ClusterHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterHealth) ProtoMessage() {}

func (x *ClusterHealth) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterHealth.ProtoReflect.Descriptor instead.
func (*ClusterHealth) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{72}
}

func (x *ClusterHealth) GetState() ClusterHealth_State {
	if x != nil {
		return x.State
	}
	return ClusterHealth_None
}

func (x *ClusterHealth) GetNumDegradedVolumes() uint32 {
	if x != nil {
		return x.NumDegradedVolumes
	}
	return 0
}

func (x *ClusterHealth) GetNumReadOnlyVolumes() uint32 {
	if x != nil {
		return x.NumReadOnlyVolumes
	}
	return 0
}

func (x *ClusterHealth) GetNumNotAvailableVolumes() uint32 {
	if x != nil {
		return x.NumNotAvailableVolumes
	}
	return 0
}

func (x *ClusterHealth) GetNumInactiveNodes() uint32 {
	if x != nil {
		return x.NumInactiveNodes
	}
	return 0
}

type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State           Volume_StateEnum     `protobuf:"varint,1,opt,name=state,proto3,enum=lightbits.api.duros.v2.Volume_StateEnum" json:"state,omitempty"`
	ProtectionState ProtectionStateEnum  `protobuf:"varint,2,opt,name=protectionState,proto3,enum=lightbits.api.duros.v2.ProtectionStateEnum" json:"protectionState,omitempty"`
	ReplicaCount    uint32               `protobuf:"varint,3,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	NodeList        []string             `protobuf:"bytes,4,rep,name=nodeList,proto3" json:"nodeList,omitempty"`
	UUID            string               `protobuf:"bytes,5,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Nsid            uint32               `protobuf:"varint,6,opt,name=nsid,proto3" json:"nsid,omitempty"`
	Acl             *StringList          `protobuf:"bytes,7,opt,name=acl,proto3" json:"acl,omitempty"`
	Compression     string               `protobuf:"bytes,8,opt,name=compression,proto3" json:"compression,omitempty"`
	Size            uint64               `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	Name            string               `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	RebuildProgress string               `protobuf:"bytes,11,opt,name=rebuildProgress,proto3" json:"rebuildProgress,omitempty"`
	Statistics      *VolumeStatisticsApi `protobuf:"bytes,12,opt,name=statistics,proto3" json:"statistics,omitempty"`
	IPAcl           *StringList          `protobuf:"bytes,13,opt,name=IPAcl,proto3" json:"IPAcl,omitempty"`
	// Etag
	//
	// identifier for a specific version of a resource
	ETag                  string                  `protobuf:"bytes,14,opt,name=ETag,proto3" json:"ETag,omitempty"`
	ConnectedHosts        []string                `protobuf:"bytes,15,rep,name=connectedHosts,proto3" json:"connectedHosts,omitempty"`
	SectorSize            uint32                  `protobuf:"varint,16,opt,name=sectorSize,proto3" json:"sectorSize,omitempty"`
	ProjectName           string                  `protobuf:"bytes,17,opt,name=projectName,proto3" json:"projectName,omitempty"`
	SourceSnapshotUUID    string                  `protobuf:"bytes,18,opt,name=sourceSnapshotUUID,proto3" json:"sourceSnapshotUUID,omitempty"`
	SourceSnapshotName    string                  `protobuf:"bytes,19,opt,name=sourceSnapshotName,proto3" json:"sourceSnapshotName,omitempty"`
	PlacementRestrictions []*LabelMatchExpression `protobuf:"bytes,20,rep,name=placementRestrictions,proto3" json:"placementRestrictions,omitempty"`
	QosPolicyUUID         string                  `protobuf:"bytes,21,opt,name=qosPolicyUUID,proto3" json:"qosPolicyUUID,omitempty"`
	QosPolicyName         string                  `protobuf:"bytes,22,opt,name=qosPolicyName,proto3" json:"qosPolicyName,omitempty"`
	PrimaryNodeUUID       string                  `protobuf:"bytes,23,opt,name=primaryNodeUUID,proto3" json:"primaryNodeUUID,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{73}
}

func (x *Volume) GetState() Volume_StateEnum {
	if x != nil {
		return x.State
	}
	return Volume_Unknown
}

func (x *Volume) GetProtectionState() ProtectionStateEnum {
	if x != nil {
		return x.ProtectionState
	}
	return ProtectionStateEnum_Unknown
}

func (x *Volume) GetReplicaCount() uint32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

func (x *Volume) GetNodeList() []string {
	if x != nil {
		return x.NodeList
	}
	return nil
}

func (x *Volume) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Volume) GetNsid() uint32 {
	if x != nil {
		return x.Nsid
	}
	return 0
}

func (x *Volume) GetAcl() *StringList {
	if x != nil {
		return x.Acl
	}
	return nil
}

func (x *Volume) GetCompression() string {
	if x != nil {
		return x.Compression
	}
	return ""
}

func (x *Volume) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Volume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Volume) GetRebuildProgress() string {
	if x != nil {
		return x.RebuildProgress
	}
	return ""
}

func (x *Volume) GetStatistics() *VolumeStatisticsApi {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Volume) GetIPAcl() *StringList {
	if x != nil {
		return x.IPAcl
	}
	return nil
}

func (x *Volume) GetETag() string {
	if x != nil {
		return x.ETag
	}
	return ""
}

func (x *Volume) GetConnectedHosts() []string {
	if x != nil {
		return x.ConnectedHosts
	}
	return nil
}

func (x *Volume) GetSectorSize() uint32 {
	if x != nil {
		return x.SectorSize
	}
	return 0
}

func (x *Volume) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *Volume) GetSourceSnapshotUUID() string {
	if x != nil {
		return x.SourceSnapshotUUID
	}
	return ""
}

func (x *Volume) GetSourceSnapshotName() string {
	if x != nil {
		return x.SourceSnapshotName
	}
	return ""
}

func (x *Volume) GetPlacementRestrictions() []*LabelMatchExpression {
	if x != nil {
		return x.PlacementRestrictions
	}
	return nil
}

func (x *Volume) GetQosPolicyUUID() string {
	if x != nil {
		return x.QosPolicyUUID
	}
	return ""
}

func (x *Volume) GetQosPolicyName() string {
	if x != nil {
		return x.QosPolicyName
	}
	return ""
}

func (x *Volume) GetPrimaryNodeUUID() string {
	if x != nil {
		return x.PrimaryNodeUUID
	}
	return ""
}

type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// risk of service loss state
	//
	// indicates the ability to upgrade or disable a server without loss of service to cluster volumes
	RiskOfServiceLossState Server_RiskOfServiceLossEnum `protobuf:"varint,4,opt,name=RiskOfServiceLossState,proto3,enum=lightbits.api.duros.v2.Server_RiskOfServiceLossEnum" json:"RiskOfServiceLossState,omitempty"`
	NodesUUIDs             []string                     `protobuf:"bytes,5,rep,name=NodesUUIDs,proto3" json:"NodesUUIDs,omitempty"`
	State                  Server_ServerStateEnum       `protobuf:"varint,6,opt,name=state,proto3,enum=lightbits.api.duros.v2.Server_ServerStateEnum" json:"state,omitempty"`
	ServerEndpoints        []string                     `protobuf:"bytes,7,rep,name=ServerEndpoints,proto3" json:"ServerEndpoints,omitempty"`
	// Etag
	//
	// identifier for a specific version of a resource
	ETag           string `protobuf:"bytes,8,opt,name=ETag,proto3" json:"ETag,omitempty"`
	LightOSVersion string `protobuf:"bytes,9,opt,name=LightOSVersion,proto3" json:"LightOSVersion,omitempty"`
	// UpgradeStatus
	//
	// following the upgrade command this field indicates the status of the upgrade operation
	UpgradeStatus Server_UpgradeStatusEnum `protobuf:"varint,10,opt,name=UpgradeStatus,proto3,enum=lightbits.api.duros.v2.Server_UpgradeStatusEnum" json:"UpgradeStatus,omitempty"`
	ApiEndpoints  []string                 `protobuf:"bytes,11,rep,name=ApiEndpoints,proto3" json:"ApiEndpoints,omitempty"`
	// State of Node Level Encryption (NLE)
	//
	// State indicates whether NLE in server is enabled/enabling/disabled etc.
	NleState NLEState `protobuf:"varint,12,opt,name=nleState,proto3,enum=lightbits.api.duros.v2.NLEState" json:"nleState,omitempty"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{74}
}

func (x *Server) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Server) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Server) GetRiskOfServiceLossState() Server_RiskOfServiceLossEnum {
	if x != nil {
		return x.RiskOfServiceLossState
	}
	return Server_UnknownRiskOfServiceLoss
}

func (x *Server) GetNodesUUIDs() []string {
	if x != nil {
		return x.NodesUUIDs
	}
	return nil
}

func (x *Server) GetState() Server_ServerStateEnum {
	if x != nil {
		return x.State
	}
	return Server_UnknownState
}

func (x *Server) GetServerEndpoints() []string {
	if x != nil {
		return x.ServerEndpoints
	}
	return nil
}

func (x *Server) GetETag() string {
	if x != nil {
		return x.ETag
	}
	return ""
}

func (x *Server) GetLightOSVersion() string {
	if x != nil {
		return x.LightOSVersion
	}
	return ""
}

func (x *Server) GetUpgradeStatus() Server_UpgradeStatusEnum {
	if x != nil {
		return x.UpgradeStatus
	}
	return Server_Unknown
}

func (x *Server) GetApiEndpoints() []string {
	if x != nil {
		return x.ApiEndpoints
	}
	return nil
}

func (x *Server) GetNleState() NLEState {
	if x != nil {
		return x.NleState
	}
	return NLEState_UnknownNLEState
}

type GetRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *GetRoleRequest) Reset() {
	*x = GetRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleRequest) ProtoMessage() {}

func (x *GetRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleRequest.ProtoReflect.Descriptor instead.
func (*GetRoleRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{75}
}

func (x *GetRoleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetRoleRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type GetRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role *Role `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *GetRoleResponse) Reset() {
	*x = GetRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleResponse) ProtoMessage() {}

func (x *GetRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleResponse.ProtoReflect.Descriptor instead.
func (*GetRoleResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{76}
}

func (x *GetRoleResponse) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
	// rulesJson
	//
	// a JSON representation of the role 'rules' array, e.g.:
	//
	//	[{"resources":["versions"],"actions":["get"]}]
	RulesJson string `protobuf:"bytes,4,opt,name=rulesJson,proto3" json:"rulesJson,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{77}
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *Role) GetRulesJson() string {
	if x != nil {
		return x.RulesJson
	}
	return ""
}

type ListRolesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName string `protobuf:"bytes,1,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *ListRolesRequest) Reset() {
	*x = ListRolesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRolesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRolesRequest) ProtoMessage() {}

func (x *ListRolesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRolesRequest.ProtoReflect.Descriptor instead.
func (*ListRolesRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{78}
}

func (x *ListRolesRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type ListRolesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roles []*Role `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *ListRolesResponse) Reset() {
	*x = ListRolesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRolesResponse) ProtoMessage() {}

func (x *ListRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRolesResponse.ProtoReflect.Descriptor instead.
func (*ListRolesResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{79}
}

func (x *ListRolesResponse) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State            Snapshot_StateEnum     `protobuf:"varint,1,opt,name=state,proto3,enum=lightbits.api.duros.v2.Snapshot_StateEnum" json:"state,omitempty"`
	UUID             string                 `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name             string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description      string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	CreationTime     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=creationTime,proto3" json:"creationTime,omitempty"`
	RetentionTime    *durationpb.Duration   `protobuf:"bytes,6,opt,name=retentionTime,proto3" json:"retentionTime,omitempty"`
	SourceVolumeUUID string                 `protobuf:"bytes,7,opt,name=sourceVolumeUUID,proto3" json:"sourceVolumeUUID,omitempty"`
	SourceVolumeName string                 `protobuf:"bytes,8,opt,name=sourceVolumeName,proto3" json:"sourceVolumeName,omitempty"`
	ReplicaCount     uint32                 `protobuf:"varint,9,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	NodeList         []string               `protobuf:"bytes,10,rep,name=nodeList,proto3" json:"nodeList,omitempty"`
	Nsid             uint32                 `protobuf:"varint,11,opt,name=nsid,proto3" json:"nsid,omitempty"`
	Acl              *StringList            `protobuf:"bytes,12,opt,name=acl,proto3" json:"acl,omitempty"`
	Compression      bool                   `protobuf:"varint,13,opt,name=compression,proto3" json:"compression,omitempty"`
	Size             uint64                 `protobuf:"varint,14,opt,name=size,proto3" json:"size,omitempty"`
	IPAcl            *StringList            `protobuf:"bytes,15,opt,name=IPAcl,proto3" json:"IPAcl,omitempty"`
	SectorSize       uint32                 `protobuf:"varint,16,opt,name=sectorSize,proto3" json:"sectorSize,omitempty"`
	Statistics       *SnapshotStatisticsApi `protobuf:"bytes,18,opt,name=statistics,proto3" json:"statistics,omitempty"`
	ETag             string                 `protobuf:"bytes,19,opt,name=ETag,proto3" json:"ETag,omitempty"`
	ProjectName      string                 `protobuf:"bytes,20,opt,name=projectName,proto3" json:"projectName,omitempty"`
	PrimaryNodeUUID  string                 `protobuf:"bytes,21,opt,name=primaryNodeUUID,proto3" json:"primaryNodeUUID,omitempty"`
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{80}
}

func (x *Snapshot) GetState() Snapshot_StateEnum {
	if x != nil {
		return x.State
	}
	return Snapshot_Unknown
}

func (x *Snapshot) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Snapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Snapshot) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Snapshot) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Snapshot) GetRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.RetentionTime
	}
	return nil
}

func (x *Snapshot) GetSourceVolumeUUID() string {
	if x != nil {
		return x.SourceVolumeUUID
	}
	return ""
}

func (x *Snapshot) GetSourceVolumeName() string {
	if x != nil {
		return x.SourceVolumeName
	}
	return ""
}

func (x *Snapshot) GetReplicaCount() uint32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

func (x *Snapshot) GetNodeList() []string {
	if x != nil {
		return x.NodeList
	}
	return nil
}

func (x *Snapshot) GetNsid() uint32 {
	if x != nil {
		return x.Nsid
	}
	return 0
}

func (x *Snapshot) GetAcl() *StringList {
	if x != nil {
		return x.Acl
	}
	return nil
}

func (x *Snapshot) GetCompression() bool {
	if x != nil {
		return x.Compression
	}
	return false
}

func (x *Snapshot) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Snapshot) GetIPAcl() *StringList {
	if x != nil {
		return x.IPAcl
	}
	return nil
}

func (x *Snapshot) GetSectorSize() uint32 {
	if x != nil {
		return x.SectorSize
	}
	return 0
}

func (x *Snapshot) GetStatistics() *SnapshotStatisticsApi {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Snapshot) GetETag() string {
	if x != nil {
		return x.ETag
	}
	return ""
}

func (x *Snapshot) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *Snapshot) GetPrimaryNodeUUID() string {
	if x != nil {
		return x.PrimaryNodeUUID
	}
	return ""
}

type DeleteSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectName string `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *DeleteSnapshotRequest) Reset() {
	*x = DeleteSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSnapshotRequest) ProtoMessage() {}

func (x *DeleteSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSnapshotRequest.ProtoReflect.Descriptor instead.
func (*DeleteSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{81}
}

func (x *DeleteSnapshotRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *DeleteSnapshotRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteSnapshotRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type CreateSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SourceVolumeUUID string               `protobuf:"bytes,2,opt,name=sourceVolumeUUID,proto3" json:"sourceVolumeUUID,omitempty"`
	SourceVolumeName string               `protobuf:"bytes,3,opt,name=sourceVolumeName,proto3" json:"sourceVolumeName,omitempty"`
	RetentionTime    *durationpb.Duration `protobuf:"bytes,4,opt,name=retentionTime,proto3" json:"retentionTime,omitempty"`
	Description      string               `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	ProjectName      string               `protobuf:"bytes,6,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *CreateSnapshotRequest) Reset() {
	*x = CreateSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshotRequest) ProtoMessage() {}

func (x *CreateSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshotRequest.ProtoReflect.Descriptor instead.
func (*CreateSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{82}
}

func (x *CreateSnapshotRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSnapshotRequest) GetSourceVolumeUUID() string {
	if x != nil {
		return x.SourceVolumeUUID
	}
	return ""
}

func (x *CreateSnapshotRequest) GetSourceVolumeName() string {
	if x != nil {
		return x.SourceVolumeName
	}
	return ""
}

func (x *CreateSnapshotRequest) GetRetentionTime() *durationpb.Duration {
	if x != nil {
		return x.RetentionTime
	}
	return nil
}

func (x *CreateSnapshotRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSnapshotRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type ListSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ProjectName string `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName,omitempty"`
	// offsetUUID
	//
	// Optional. When provided, returned list starts with next to offsetUUID volume.
	OffsetUUID string `protobuf:"bytes,4,opt,name=offsetUUID,proto3" json:"offsetUUID,omitempty"`
	// limit
	//
	// Optional. Limits the number of volumes in the response.
	Limit int64 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListSnapshotsRequest) Reset() {
	*x = ListSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSnapshotsRequest) ProtoMessage() {}

func (x *ListSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{83}
}

func (x *ListSnapshotsRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ListSnapshotsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListSnapshotsRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ListSnapshotsRequest) GetOffsetUUID() string {
	if x != nil {
		return x.OffsetUUID
	}
	return ""
}

func (x *ListSnapshotsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ProjectName string `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *GetSnapshotRequest) Reset() {
	*x = GetSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSnapshotRequest) ProtoMessage() {}

func (x *GetSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSnapshotRequest.ProtoReflect.Descriptor instead.
func (*GetSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{84}
}

func (x *GetSnapshotRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *GetSnapshotRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetSnapshotRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type ListSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshots []*Snapshot `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
}

func (x *ListSnapshotsResponse) Reset() {
	*x = ListSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSnapshotsResponse) ProtoMessage() {}

func (x *ListSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*ListSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{85}
}

func (x *ListSnapshotsResponse) GetSnapshots() []*Snapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

type DeleteSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSnapshotResponse) Reset() {
	*x = DeleteSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSnapshotResponse) ProtoMessage() {}

func (x *DeleteSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSnapshotResponse.ProtoReflect.Descriptor instead.
func (*DeleteSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{86}
}

type FeatureFlagStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Enabled bool   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *FeatureFlagStatus) Reset() {
	*x = FeatureFlagStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureFlagStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureFlagStatus) ProtoMessage() {}

func (x *FeatureFlagStatus) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureFlagStatus.ProtoReflect.Descriptor instead.
func (*FeatureFlagStatus) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{87}
}

func (x *FeatureFlagStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureFlagStatus) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type GetFeatureFlagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetFeatureFlagRequest) Reset() {
	*x = GetFeatureFlagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeatureFlagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureFlagRequest) ProtoMessage() {}

func (x *GetFeatureFlagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureFlagRequest.ProtoReflect.Descriptor instead.
func (*GetFeatureFlagRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{88}
}

func (x *GetFeatureFlagRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EnableFeatureFlagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EnableFeatureFlagRequest) Reset() {
	*x = EnableFeatureFlagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableFeatureFlagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableFeatureFlagRequest) ProtoMessage() {}

func (x *EnableFeatureFlagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableFeatureFlagRequest.ProtoReflect.Descriptor instead.
func (*EnableFeatureFlagRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{89}
}

func (x *EnableFeatureFlagRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DisableFeatureFlagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DisableFeatureFlagRequest) Reset() {
	*x = DisableFeatureFlagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableFeatureFlagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableFeatureFlagRequest) ProtoMessage() {}

func (x *DisableFeatureFlagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableFeatureFlagRequest.ProtoReflect.Descriptor instead.
func (*DisableFeatureFlagRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{90}
}

func (x *DisableFeatureFlagRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SetFeatureFlagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetFeatureFlagResponse) Reset() {
	*x = SetFeatureFlagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFeatureFlagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFeatureFlagResponse) ProtoMessage() {}

func (x *SetFeatureFlagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFeatureFlagResponse.ProtoReflect.Descriptor instead.
func (*SetFeatureFlagResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{91}
}

type ListFeatureFlagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListFeatureFlagsRequest) Reset() {
	*x = ListFeatureFlagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeatureFlagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeatureFlagsRequest) ProtoMessage() {}

func (x *ListFeatureFlagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeatureFlagsRequest.ProtoReflect.Descriptor instead.
func (*ListFeatureFlagsRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{92}
}

type ListFeatureFlagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureFlags map[string]*FeatureFlagStatus `protobuf:"bytes,1,rep,name=featureFlags,proto3" json:"featureFlags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListFeatureFlagsResponse) Reset() {
	*x = ListFeatureFlagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeatureFlagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeatureFlagsResponse) ProtoMessage() {}

func (x *ListFeatureFlagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeatureFlagsResponse.ProtoReflect.Descriptor instead.
func (*ListFeatureFlagsResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{93}
}

func (x *ListFeatureFlagsResponse) GetFeatureFlags() map[string]*FeatureFlagStatus {
	if x != nil {
		return x.FeatureFlags
	}
	return nil
}

type CreateResourcePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ResourceUUID   string          `protobuf:"bytes,2,opt,name=resourceUUID,proto3" json:"resourceUUID,omitempty"`
	ResourceName   string          `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ProjectName    string          `protobuf:"bytes,4,opt,name=projectName,proto3" json:"projectName,omitempty"`
	SchedulePolicy *SchedulePolicy `protobuf:"bytes,5,opt,name=schedulePolicy,proto3" json:"schedulePolicy,omitempty"`
	Description    string          `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateResourcePolicyRequest) Reset() {
	*x = CreateResourcePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResourcePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResourcePolicyRequest) ProtoMessage() {}

func (x *CreateResourcePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResourcePolicyRequest.ProtoReflect.Descriptor instead.
func (*CreateResourcePolicyRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{94}
}

func (x *CreateResourcePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateResourcePolicyRequest) GetResourceUUID() string {
	if x != nil {
		return x.ResourceUUID
	}
	return ""
}

func (x *CreateResourcePolicyRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *CreateResourcePolicyRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *CreateResourcePolicyRequest) GetSchedulePolicy() *SchedulePolicy {
	if x != nil {
		return x.SchedulePolicy
	}
	return nil
}

func (x *CreateResourcePolicyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Types that are assignable to Policy:
	//
	//	*CreatePolicyRequest_QoSRateLimitPolicy
	Policy isCreatePolicyRequest_Policy `protobuf_oneof:"policy"`
}

func (x *CreatePolicyRequest) Reset() {
	*x = CreatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyRequest) ProtoMessage() {}

func (x *CreatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyRequest.ProtoReflect.Descriptor instead.
func (*CreatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{95}
}

func (x *CreatePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePolicyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (m *CreatePolicyRequest) GetPolicy() isCreatePolicyRequest_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *CreatePolicyRequest) GetQoSRateLimitPolicy() *QoSRateLimitPolicy {
	if x, ok := x.GetPolicy().(*CreatePolicyRequest_QoSRateLimitPolicy); ok {
		return x.QoSRateLimitPolicy
	}
	return nil
}

type isCreatePolicyRequest_Policy interface {
	isCreatePolicyRequest_Policy()
}

type CreatePolicyRequest_QoSRateLimitPolicy struct {
	QoSRateLimitPolicy *QoSRateLimitPolicy `protobuf:"bytes,3,opt,name=qoSRateLimitPolicy,proto3,oneof"` // in the future we will move here schedule policy as well as other policies.
}

func (*CreatePolicyRequest_QoSRateLimitPolicy) isCreatePolicyRequest_Policy() {}

type UpdatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Types that are assignable to Policy:
	//
	//	*UpdatePolicyRequest_QoSRateLimitPolicy
	Policy isUpdatePolicyRequest_Policy `protobuf_oneof:"policy"`
}

func (x *UpdatePolicyRequest) Reset() {
	*x = UpdatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePolicyRequest) ProtoMessage() {}

func (x *UpdatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{96}
}

func (x *UpdatePolicyRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *UpdatePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePolicyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (m *UpdatePolicyRequest) GetPolicy() isUpdatePolicyRequest_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *UpdatePolicyRequest) GetQoSRateLimitPolicy() *QoSRateLimitPolicy {
	if x, ok := x.GetPolicy().(*UpdatePolicyRequest_QoSRateLimitPolicy); ok {
		return x.QoSRateLimitPolicy
	}
	return nil
}

type isUpdatePolicyRequest_Policy interface {
	isUpdatePolicyRequest_Policy()
}

type UpdatePolicyRequest_QoSRateLimitPolicy struct {
	QoSRateLimitPolicy *QoSRateLimitPolicy `protobuf:"bytes,4,opt,name=qoSRateLimitPolicy,proto3,oneof"` // in the future we will move here schedule policy as well as other policies.
}

func (*UpdatePolicyRequest_QoSRateLimitPolicy) isUpdatePolicyRequest_Policy() {}

type UpdatePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePolicyResponse) Reset() {
	*x = UpdatePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePolicyResponse) ProtoMessage() {}

func (x *UpdatePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdatePolicyResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{97}
}

type ResourcePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID           string               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name           string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResourceUUID   string               `protobuf:"bytes,3,opt,name=resourceUUID,proto3" json:"resourceUUID,omitempty"`
	ResourceName   string               `protobuf:"bytes,4,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	ProjectName    string               `protobuf:"bytes,5,opt,name=projectName,proto3" json:"projectName,omitempty"`
	SchedulePolicy *SchedulePolicy      `protobuf:"bytes,6,opt,name=schedulePolicy,proto3" json:"schedulePolicy,omitempty"`
	Description    string               `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	State          ResourcePolicy_State `protobuf:"varint,8,opt,name=state,proto3,enum=lightbits.api.duros.v2.ResourcePolicy_State" json:"state,omitempty"`
}

func (x *ResourcePolicy) Reset() {
	*x = ResourcePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePolicy) ProtoMessage() {}

func (x *ResourcePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePolicy.ProtoReflect.Descriptor instead.
func (*ResourcePolicy) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{98}
}

func (x *ResourcePolicy) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ResourcePolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourcePolicy) GetResourceUUID() string {
	if x != nil {
		return x.ResourceUUID
	}
	return ""
}

func (x *ResourcePolicy) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ResourcePolicy) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ResourcePolicy) GetSchedulePolicy() *SchedulePolicy {
	if x != nil {
		return x.SchedulePolicy
	}
	return nil
}

func (x *ResourcePolicy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResourcePolicy) GetState() ResourcePolicy_State {
	if x != nil {
		return x.State
	}
	return ResourcePolicy_UnknownState
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string       `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	State       Policy_State `protobuf:"varint,4,opt,name=state,proto3,enum=lightbits.api.duros.v2.Policy_State" json:"state,omitempty"`
	// Types that are assignable to Info:
	//
	//	*Policy_QoSRateLimitPolicy
	Info isPolicy_Info `protobuf_oneof:"info"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{99}
}

func (x *Policy) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Policy) GetState() Policy_State {
	if x != nil {
		return x.State
	}
	return Policy_Unknown
}

func (m *Policy) GetInfo() isPolicy_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (x *Policy) GetQoSRateLimitPolicy() *QoSRateLimitPolicy {
	if x, ok := x.GetInfo().(*Policy_QoSRateLimitPolicy); ok {
		return x.QoSRateLimitPolicy
	}
	return nil
}

type isPolicy_Info interface {
	isPolicy_Info()
}

type Policy_QoSRateLimitPolicy struct {
	QoSRateLimitPolicy *QoSRateLimitPolicy `protobuf:"bytes,5,opt,name=QoSRateLimitPolicy,proto3,oneof"`
}

func (*Policy_QoSRateLimitPolicy) isPolicy_Info() {}

type UpdateResourcePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID           string          `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ProjectName    string          `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
	SchedulePolicy *SchedulePolicy `protobuf:"bytes,3,opt,name=schedulePolicy,proto3" json:"schedulePolicy,omitempty"`
	Description    string          `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateResourcePolicyRequest) Reset() {
	*x = UpdateResourcePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResourcePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResourcePolicyRequest) ProtoMessage() {}

func (x *UpdateResourcePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResourcePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateResourcePolicyRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{100}
}

func (x *UpdateResourcePolicyRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *UpdateResourcePolicyRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UpdateResourcePolicyRequest) GetSchedulePolicy() *SchedulePolicy {
	if x != nil {
		return x.SchedulePolicy
	}
	return nil
}

func (x *UpdateResourcePolicyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpdateResourcePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateResourcePolicyResponse) Reset() {
	*x = UpdateResourcePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResourcePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResourcePolicyResponse) ProtoMessage() {}

func (x *UpdateResourcePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResourcePolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdateResourcePolicyResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{101}
}

type ListPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectName string `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *ListPoliciesRequest) Reset() {
	*x = ListPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesRequest) ProtoMessage() {}

func (x *ListPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{102}
}

func (x *ListPoliciesRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ListPoliciesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListPoliciesRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type ListPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies []*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *ListPoliciesResponse) Reset() {
	*x = ListPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesResponse) ProtoMessage() {}

func (x *ListPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{103}
}

func (x *ListPoliciesResponse) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type ListResourcePoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
	VolumeUUID  string `protobuf:"bytes,3,opt,name=volumeUUID,proto3" json:"volumeUUID,omitempty"`
}

func (x *ListResourcePoliciesRequest) Reset() {
	*x = ListResourcePoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourcePoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourcePoliciesRequest) ProtoMessage() {}

func (x *ListResourcePoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourcePoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListResourcePoliciesRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{104}
}

func (x *ListResourcePoliciesRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ListResourcePoliciesRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ListResourcePoliciesRequest) GetVolumeUUID() string {
	if x != nil {
		return x.VolumeUUID
	}
	return ""
}

type ListResourcePoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourcePolicies        []*ResourcePolicy              `protobuf:"bytes,1,rep,name=resourcePolicies,proto3" json:"resourcePolicies,omitempty"`
	DefaultResourcePolicies []*DefaultGlobalResourcePolicy `protobuf:"bytes,2,rep,name=defaultResourcePolicies,proto3" json:"defaultResourcePolicies,omitempty"`
}

func (x *ListResourcePoliciesResponse) Reset() {
	*x = ListResourcePoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourcePoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourcePoliciesResponse) ProtoMessage() {}

func (x *ListResourcePoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourcePoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListResourcePoliciesResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{105}
}

func (x *ListResourcePoliciesResponse) GetResourcePolicies() []*ResourcePolicy {
	if x != nil {
		return x.ResourcePolicies
	}
	return nil
}

func (x *ListResourcePoliciesResponse) GetDefaultResourcePolicies() []*DefaultGlobalResourcePolicy {
	if x != nil {
		return x.DefaultResourcePolicies
	}
	return nil
}

type GetPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectName string `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *GetPolicyRequest) Reset() {
	*x = GetPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyRequest) ProtoMessage() {}

func (x *GetPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPolicyRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{106}
}

func (x *GetPolicyRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *GetPolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPolicyRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type GetResourcePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *GetResourcePolicyRequest) Reset() {
	*x = GetResourcePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourcePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourcePolicyRequest) ProtoMessage() {}

func (x *GetResourcePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourcePolicyRequest.ProtoReflect.Descriptor instead.
func (*GetResourcePolicyRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{107}
}

func (x *GetResourcePolicyRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *GetResourcePolicyRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type DeleteResourcePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID        string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ProjectName string `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *DeleteResourcePolicyRequest) Reset() {
	*x = DeleteResourcePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourcePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourcePolicyRequest) ProtoMessage() {}

func (x *DeleteResourcePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourcePolicyRequest.ProtoReflect.Descriptor instead.
func (*DeleteResourcePolicyRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{108}
}

func (x *DeleteResourcePolicyRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *DeleteResourcePolicyRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type DeleteResourcePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResourcePolicyResponse) Reset() {
	*x = DeleteResourcePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourcePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourcePolicyResponse) ProtoMessage() {}

func (x *DeleteResourcePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourcePolicyResponse.ProtoReflect.Descriptor instead.
func (*DeleteResourcePolicyResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{109}
}

type DeletePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeletePolicyRequest) Reset() {
	*x = DeletePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyRequest) ProtoMessage() {}

func (x *DeletePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyRequest.ProtoReflect.Descriptor instead.
func (*DeletePolicyRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{110}
}

func (x *DeletePolicyRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *DeletePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeletePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePolicyResponse) Reset() {
	*x = DeletePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyResponse) ProtoMessage() {}

func (x *DeletePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyResponse.ProtoReflect.Descriptor instead.
func (*DeletePolicyResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{111}
}

type GetClusterConfigParamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetClusterConfigParamRequest) Reset() {
	*x = GetClusterConfigParamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterConfigParamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterConfigParamRequest) ProtoMessage() {}

func (x *GetClusterConfigParamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterConfigParamRequest.ProtoReflect.Descriptor instead.
func (*GetClusterConfigParamRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{112}
}

func (x *GetClusterConfigParamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ClusterConfigParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ClusterConfigParam) Reset() {
	*x = ClusterConfigParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfigParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfigParam) ProtoMessage() {}

func (x *ClusterConfigParam) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfigParam.ProtoReflect.Descriptor instead.
func (*ClusterConfigParam) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{113}
}

func (x *ClusterConfigParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterConfigParam) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type UpdateClusterConfigParamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigParam *ClusterConfigParam `protobuf:"bytes,1,opt,name=configParam,proto3" json:"configParam,omitempty"`
}

func (x *UpdateClusterConfigParamRequest) Reset() {
	*x = UpdateClusterConfigParamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterConfigParamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterConfigParamRequest) ProtoMessage() {}

func (x *UpdateClusterConfigParamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterConfigParamRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterConfigParamRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{114}
}

func (x *UpdateClusterConfigParamRequest) GetConfigParam() *ClusterConfigParam {
	if x != nil {
		return x.ConfigParam
	}
	return nil
}

type RollbackVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID            string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	SrcSnapshotUUID string `protobuf:"bytes,2,opt,name=srcSnapshotUUID,proto3" json:"srcSnapshotUUID,omitempty"`
	// project name
	ProjectName string `protobuf:"bytes,3,opt,name=projectName,proto3" json:"projectName,omitempty"`
}

func (x *RollbackVolumeRequest) Reset() {
	*x = RollbackVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackVolumeRequest) ProtoMessage() {}

func (x *RollbackVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackVolumeRequest.ProtoReflect.Descriptor instead.
func (*RollbackVolumeRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{115}
}

func (x *RollbackVolumeRequest) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *RollbackVolumeRequest) GetSrcSnapshotUUID() string {
	if x != nil {
		return x.SrcSnapshotUUID
	}
	return ""
}

func (x *RollbackVolumeRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type RollbackVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RollbackVolumeResponse) Reset() {
	*x = RollbackVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackVolumeResponse) ProtoMessage() {}

func (x *RollbackVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackVolumeResponse.ProtoReflect.Descriptor instead.
func (*RollbackVolumeResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{116}
}

type UpdateClusterConfigParamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateClusterConfigParamResponse) Reset() {
	*x = UpdateClusterConfigParamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterConfigParamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterConfigParamResponse) ProtoMessage() {}

func (x *UpdateClusterConfigParamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterConfigParamResponse.ProtoReflect.Descriptor instead.
func (*UpdateClusterConfigParamResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{117}
}

type ListClusterConfigParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListClusterConfigParamsRequest) Reset() {
	*x = ListClusterConfigParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterConfigParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterConfigParamsRequest) ProtoMessage() {}

func (x *ListClusterConfigParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterConfigParamsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterConfigParamsRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{118}
}

type ListClusterConfigParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*ClusterConfigParam `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ListClusterConfigParamsResponse) Reset() {
	*x = ListClusterConfigParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterConfigParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterConfigParamsResponse) ProtoMessage() {}

func (x *ListClusterConfigParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterConfigParamsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterConfigParamsResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{119}
}

func (x *ListClusterConfigParamsResponse) GetValues() []*ClusterConfigParam {
	if x != nil {
		return x.Values
	}
	return nil
}

type LabelValueKeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   LabelValueKeyPair_Key `protobuf:"varint,1,opt,name=key,proto3,enum=lightbits.api.duros.v2.LabelValueKeyPair_Key" json:"key,omitempty"`
	Value string                `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LabelValueKeyPair) Reset() {
	*x = LabelValueKeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelValueKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelValueKeyPair) ProtoMessage() {}

func (x *LabelValueKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelValueKeyPair.ProtoReflect.Descriptor instead.
func (*LabelValueKeyPair) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{120}
}

func (x *LabelValueKeyPair) GetKey() LabelValueKeyPair_Key {
	if x != nil {
		return x.Key
	}
	return LabelValueKeyPair_Unknown
}

func (x *LabelValueKeyPair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type LabelMatchExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator           LabelMatchExpression_Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=lightbits.api.duros.v2.LabelMatchExpression_Operator" json:"operator,omitempty"`
	LabelValueKeyPairs []*LabelValueKeyPair          `protobuf:"bytes,2,rep,name=labelValueKeyPairs,proto3" json:"labelValueKeyPairs,omitempty"`
}

func (x *LabelMatchExpression) Reset() {
	*x = LabelMatchExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelMatchExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelMatchExpression) ProtoMessage() {}

func (x *LabelMatchExpression) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelMatchExpression.ProtoReflect.Descriptor instead.
func (*LabelMatchExpression) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{121}
}

func (x *LabelMatchExpression) GetOperator() LabelMatchExpression_Operator {
	if x != nil {
		return x.Operator
	}
	return LabelMatchExpression_Unkown
}

func (x *LabelMatchExpression) GetLabelValueKeyPairs() []*LabelValueKeyPair {
	if x != nil {
		return x.LabelValueKeyPairs
	}
	return nil
}

// ID of the impacted component (uuid/ip/serial number)
type ComponentVolumeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// volume uuid
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// volume name
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ComponentVolumeInfo) Reset() {
	*x = ComponentVolumeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentVolumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentVolumeInfo) ProtoMessage() {}

func (x *ComponentVolumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentVolumeInfo.ProtoReflect.Descriptor instead.
func (*ComponentVolumeInfo) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{122}
}

func (x *ComponentVolumeInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ComponentVolumeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type VolumeComponentInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeComponentInfoList []*ComponentVolumeInfo `protobuf:"bytes,1,rep,name=VolumeComponentInfoList,proto3" json:"VolumeComponentInfoList,omitempty"`
}

func (x *VolumeComponentInfoList) Reset() {
	*x = VolumeComponentInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeComponentInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeComponentInfoList) ProtoMessage() {}

func (x *VolumeComponentInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeComponentInfoList.ProtoReflect.Descriptor instead.
func (*VolumeComponentInfoList) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{123}
}

func (x *VolumeComponentInfoList) GetVolumeComponentInfoList() []*ComponentVolumeInfo {
	if x != nil {
		return x.VolumeComponentInfoList
	}
	return nil
}

type ComponentVolumesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectVolumesMap map[string]*VolumeComponentInfoList `protobuf:"bytes,1,rep,name=ProjectVolumesMap,proto3" json:"ProjectVolumesMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ComponentVolumesInfo) Reset() {
	*x = ComponentVolumesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentVolumesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentVolumesInfo) ProtoMessage() {}

func (x *ComponentVolumesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentVolumesInfo.ProtoReflect.Descriptor instead.
func (*ComponentVolumesInfo) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{124}
}

func (x *ComponentVolumesInfo) GetProjectVolumesMap() map[string]*VolumeComponentInfoList {
	if x != nil {
		return x.ProjectVolumesMap
	}
	return nil
}

type ComponentNodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node uuid
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Node name
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ComponentNodeInfo) Reset() {
	*x = ComponentNodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentNodeInfo) ProtoMessage() {}

func (x *ComponentNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentNodeInfo.ProtoReflect.Descriptor instead.
func (*ComponentNodeInfo) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{125}
}

func (x *ComponentNodeInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ComponentNodeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ComponentClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster uuid
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// cluster name
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ComponentClusterInfo) Reset() {
	*x = ComponentClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentClusterInfo) ProtoMessage() {}

func (x *ComponentClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentClusterInfo.ProtoReflect.Descriptor instead.
func (*ComponentClusterInfo) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{126}
}

func (x *ComponentClusterInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ComponentClusterInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ComponentNVMeSSDInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NVMe serial number
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// SSD name
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ComponentNVMeSSDInfo) Reset() {
	*x = ComponentNVMeSSDInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentNVMeSSDInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentNVMeSSDInfo) ProtoMessage() {}

func (x *ComponentNVMeSSDInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentNVMeSSDInfo.ProtoReflect.Descriptor instead.
func (*ComponentNVMeSSDInfo) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{127}
}

func (x *ComponentNVMeSSDInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ComponentNVMeSSDInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ComponentServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server UUID
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Server name
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *ComponentServerInfo) Reset() {
	*x = ComponentServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentServerInfo) ProtoMessage() {}

func (x *ComponentServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentServerInfo.ProtoReflect.Descriptor instead.
func (*ComponentServerInfo) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{128}
}

func (x *ComponentServerInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ComponentServerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ComponentDataIntegrityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeUUID   string   `protobuf:"bytes,1,opt,name=NodeUUID,proto3" json:"NodeUUID,omitempty"`
	ServerUUID string   `protobuf:"bytes,2,opt,name=ServerUUID,proto3" json:"ServerUUID,omitempty"`
	SSDs       []string `protobuf:"bytes,3,rep,name=SSDs,proto3" json:"SSDs,omitempty"`
}

func (x *ComponentDataIntegrityInfo) Reset() {
	*x = ComponentDataIntegrityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentDataIntegrityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentDataIntegrityInfo) ProtoMessage() {}

func (x *ComponentDataIntegrityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentDataIntegrityInfo.ProtoReflect.Descriptor instead.
func (*ComponentDataIntegrityInfo) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{129}
}

func (x *ComponentDataIntegrityInfo) GetNodeUUID() string {
	if x != nil {
		return x.NodeUUID
	}
	return ""
}

func (x *ComponentDataIntegrityInfo) GetServerUUID() string {
	if x != nil {
		return x.ServerUUID
	}
	return ""
}

func (x *ComponentDataIntegrityInfo) GetSSDs() []string {
	if x != nil {
		return x.SSDs
	}
	return nil
}

// Event that will be returned to user
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event UUID
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Event start time
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=Time,proto3" json:"Time,omitempty"`
	// The component type impacted by the event
	Type Event_EventType `protobuf:"varint,3,opt,name=Type,proto3,enum=lightbits.api.duros.v2.Event_EventType" json:"Type,omitempty"`
	// The severity of the event
	Severity Event_EventSeverity `protobuf:"varint,4,opt,name=Severity,proto3,enum=lightbits.api.duros.v2.Event_EventSeverity" json:"Severity,omitempty"`
	// The name of the event
	EventName string `protobuf:"bytes,5,opt,name=EventName,proto3" json:"EventName,omitempty"`
	// The code of the cause of the event
	EventCode uint32 `protobuf:"varint,6,opt,name=EventCode,proto3" json:"EventCode,omitempty"`
	// The server that logged the event (Cluster Manager, Node Manager, etc)
	ReportingService Event_EventReportingService `protobuf:"varint,7,opt,name=ReportingService,proto3,enum=lightbits.api.duros.v2.Event_EventReportingService" json:"ReportingService,omitempty"`
	// The event ID related to this event.
	AssociatedEventID string `protobuf:"bytes,8,opt,name=AssociatedEventID,proto3" json:"AssociatedEventID,omitempty"`
	// Current status of the component
	Status string `protobuf:"bytes,9,opt,name=Status,proto3" json:"Status,omitempty"`
	// The Cause of the event
	CauseCode uint32 `protobuf:"varint,10,opt,name=CauseCode,proto3" json:"CauseCode,omitempty"`
	// The Event Description
	Description string `protobuf:"bytes,11,opt,name=Description,proto3" json:"Description,omitempty"`
	// Component info (speific to type)
	//
	// Types that are assignable to ComponentInfo:
	//
	//	*Event_ComponentVolumesInfo
	//	*Event_ComponentNVMeSSDInfo
	//	*Event_ComponentNodeInfo
	//	*Event_ComponentServerInfo
	//	*Event_ComponentClusterInfo
	//	*Event_ComponentDataIntegrityInfo
	ComponentInfo isEvent_ComponentInfo `protobuf_oneof:"ComponentInfo"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{130}
}

func (x *Event) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Event) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Event) GetType() Event_EventType {
	if x != nil {
		return x.Type
	}
	return Event_UnknownType
}

func (x *Event) GetSeverity() Event_EventSeverity {
	if x != nil {
		return x.Severity
	}
	return Event_UnkownSeverity
}

func (x *Event) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *Event) GetEventCode() uint32 {
	if x != nil {
		return x.EventCode
	}
	return 0
}

func (x *Event) GetReportingService() Event_EventReportingService {
	if x != nil {
		return x.ReportingService
	}
	return Event_UnkownReportingService
}

func (x *Event) GetAssociatedEventID() string {
	if x != nil {
		return x.AssociatedEventID
	}
	return ""
}

func (x *Event) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Event) GetCauseCode() uint32 {
	if x != nil {
		return x.CauseCode
	}
	return 0
}

func (x *Event) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (m *Event) GetComponentInfo() isEvent_ComponentInfo {
	if m != nil {
		return m.ComponentInfo
	}
	return nil
}

func (x *Event) GetComponentVolumesInfo() *ComponentVolumesInfo {
	if x, ok := x.GetComponentInfo().(*Event_ComponentVolumesInfo); ok {
		return x.ComponentVolumesInfo
	}
	return nil
}

func (x *Event) GetComponentNVMeSSDInfo() *ComponentNVMeSSDInfo {
	if x, ok := x.GetComponentInfo().(*Event_ComponentNVMeSSDInfo); ok {
		return x.ComponentNVMeSSDInfo
	}
	return nil
}

func (x *Event) GetComponentNodeInfo() *ComponentNodeInfo {
	if x, ok := x.GetComponentInfo().(*Event_ComponentNodeInfo); ok {
		return x.ComponentNodeInfo
	}
	return nil
}

func (x *Event) GetComponentServerInfo() *ComponentServerInfo {
	if x, ok := x.GetComponentInfo().(*Event_ComponentServerInfo); ok {
		return x.ComponentServerInfo
	}
	return nil
}

func (x *Event) GetComponentClusterInfo() *ComponentClusterInfo {
	if x, ok := x.GetComponentInfo().(*Event_ComponentClusterInfo); ok {
		return x.ComponentClusterInfo
	}
	return nil
}

func (x *Event) GetComponentDataIntegrityInfo() *ComponentDataIntegrityInfo {
	if x, ok := x.GetComponentInfo().(*Event_ComponentDataIntegrityInfo); ok {
		return x.ComponentDataIntegrityInfo
	}
	return nil
}

type isEvent_ComponentInfo interface {
	isEvent_ComponentInfo()
}

type Event_ComponentVolumesInfo struct {
	ComponentVolumesInfo *ComponentVolumesInfo `protobuf:"bytes,201,opt,name=ComponentVolumesInfo,proto3,oneof"`
}

type Event_ComponentNVMeSSDInfo struct {
	ComponentNVMeSSDInfo *ComponentNVMeSSDInfo `protobuf:"bytes,202,opt,name=ComponentNVMeSSDInfo,proto3,oneof"`
}

type Event_ComponentNodeInfo struct {
	ComponentNodeInfo *ComponentNodeInfo `protobuf:"bytes,203,opt,name=ComponentNodeInfo,proto3,oneof"`
}

type Event_ComponentServerInfo struct {
	ComponentServerInfo *ComponentServerInfo `protobuf:"bytes,204,opt,name=ComponentServerInfo,proto3,oneof"`
}

type Event_ComponentClusterInfo struct {
	ComponentClusterInfo *ComponentClusterInfo `protobuf:"bytes,205,opt,name=ComponentClusterInfo,proto3,oneof"`
}

type Event_ComponentDataIntegrityInfo struct {
	ComponentDataIntegrityInfo *ComponentDataIntegrityInfo `protobuf:"bytes,206,opt,name=ComponentDataIntegrityInfo,proto3,oneof"`
}

func (*Event_ComponentVolumesInfo) isEvent_ComponentInfo() {}

func (*Event_ComponentNVMeSSDInfo) isEvent_ComponentInfo() {}

func (*Event_ComponentNodeInfo) isEvent_ComponentInfo() {}

func (*Event_ComponentServerInfo) isEvent_ComponentInfo() {}

func (*Event_ComponentClusterInfo) isEvent_ComponentInfo() {}

func (*Event_ComponentDataIntegrityInfo) isEvent_ComponentInfo() {}

type QoSRateLimitPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectsNamesScope []string         `protobuf:"bytes,3,rep,name=projectsNamesScope,proto3" json:"projectsNamesScope,omitempty"`
	PolicyVisibility   PolicyVisibility `protobuf:"varint,4,opt,name=policyVisibility,proto3,enum=lightbits.api.duros.v2.PolicyVisibility" json:"policyVisibility,omitempty"`
	// Types that are assignable to QoSLimit:
	//
	//	*QoSRateLimitPolicy_LimitIOPS
	//	*QoSRateLimitPolicy_LimitBw
	//	*QoSRateLimitPolicy_LimitIOPSPerGB
	QoSLimit isQoSRateLimitPolicy_QoSLimit `protobuf_oneof:"QoSLimit"`
}

func (x *QoSRateLimitPolicy) Reset() {
	*x = QoSRateLimitPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSRateLimitPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSRateLimitPolicy) ProtoMessage() {}

func (x *QoSRateLimitPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSRateLimitPolicy.ProtoReflect.Descriptor instead.
func (*QoSRateLimitPolicy) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{131}
}

func (x *QoSRateLimitPolicy) GetProjectsNamesScope() []string {
	if x != nil {
		return x.ProjectsNamesScope
	}
	return nil
}

func (x *QoSRateLimitPolicy) GetPolicyVisibility() PolicyVisibility {
	if x != nil {
		return x.PolicyVisibility
	}
	return PolicyVisibility_Unavailable
}

func (m *QoSRateLimitPolicy) GetQoSLimit() isQoSRateLimitPolicy_QoSLimit {
	if m != nil {
		return m.QoSLimit
	}
	return nil
}

func (x *QoSRateLimitPolicy) GetLimitIOPS() *QoSRateLimitPolicy_QoSLimitIOPS {
	if x, ok := x.GetQoSLimit().(*QoSRateLimitPolicy_LimitIOPS); ok {
		return x.LimitIOPS
	}
	return nil
}

func (x *QoSRateLimitPolicy) GetLimitBw() *QoSRateLimitPolicy_QoSLimitBW {
	if x, ok := x.GetQoSLimit().(*QoSRateLimitPolicy_LimitBw); ok {
		return x.LimitBw
	}
	return nil
}

func (x *QoSRateLimitPolicy) GetLimitIOPSPerGB() *QoSRateLimitPolicy_QoSLimitIOPSPerGB {
	if x, ok := x.GetQoSLimit().(*QoSRateLimitPolicy_LimitIOPSPerGB); ok {
		return x.LimitIOPSPerGB
	}
	return nil
}

type isQoSRateLimitPolicy_QoSLimit interface {
	isQoSRateLimitPolicy_QoSLimit()
}

type QoSRateLimitPolicy_LimitIOPS struct {
	LimitIOPS *QoSRateLimitPolicy_QoSLimitIOPS `protobuf:"bytes,6,opt,name=limitIOPS,proto3,oneof"`
}

type QoSRateLimitPolicy_LimitBw struct {
	LimitBw *QoSRateLimitPolicy_QoSLimitBW `protobuf:"bytes,7,opt,name=limitBw,proto3,oneof"`
}

type QoSRateLimitPolicy_LimitIOPSPerGB struct {
	LimitIOPSPerGB *QoSRateLimitPolicy_QoSLimitIOPSPerGB `protobuf:"bytes,8,opt,name=limitIOPSPerGB,proto3,oneof"`
}

func (*QoSRateLimitPolicy_LimitIOPS) isQoSRateLimitPolicy_QoSLimit() {}

func (*QoSRateLimitPolicy_LimitBw) isQoSRateLimitPolicy_QoSLimit() {}

func (*QoSRateLimitPolicy_LimitIOPSPerGB) isQoSRateLimitPolicy_QoSLimit() {}

type DefaultGlobalResourcePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyType PolicyType `protobuf:"varint,1,opt,name=policyType,proto3,enum=lightbits.api.duros.v2.PolicyType" json:"policyType,omitempty"`
	PolicyUUID string     `protobuf:"bytes,2,opt,name=policyUUID,proto3" json:"policyUUID,omitempty"`
}

func (x *DefaultGlobalResourcePolicy) Reset() {
	*x = DefaultGlobalResourcePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultGlobalResourcePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultGlobalResourcePolicy) ProtoMessage() {}

func (x *DefaultGlobalResourcePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultGlobalResourcePolicy.ProtoReflect.Descriptor instead.
func (*DefaultGlobalResourcePolicy) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{132}
}

func (x *DefaultGlobalResourcePolicy) GetPolicyType() PolicyType {
	if x != nil {
		return x.PolicyType
	}
	return PolicyType_unknown
}

func (x *DefaultGlobalResourcePolicy) GetPolicyUUID() string {
	if x != nil {
		return x.PolicyUUID
	}
	return ""
}

type UpdateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName     string           `protobuf:"bytes,1,opt,name=projectName,proto3" json:"projectName,omitempty"`
	DefaultPolicies []*DefaultPolicy `protobuf:"bytes,2,rep,name=defaultPolicies,proto3" json:"defaultPolicies,omitempty"`
}

func (x *UpdateProjectRequest) Reset() {
	*x = UpdateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectRequest) ProtoMessage() {}

func (x *UpdateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectRequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{133}
}

func (x *UpdateProjectRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UpdateProjectRequest) GetDefaultPolicies() []*DefaultPolicy {
	if x != nil {
		return x.DefaultPolicies
	}
	return nil
}

type UpdateProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateProjectResponse) Reset() {
	*x = UpdateProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectResponse) ProtoMessage() {}

func (x *UpdateProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectResponse.ProtoReflect.Descriptor instead.
func (*UpdateProjectResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{134}
}

type EnableNLERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnableNLERequest) Reset() {
	*x = EnableNLERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableNLERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableNLERequest) ProtoMessage() {}

func (x *EnableNLERequest) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableNLERequest.ProtoReflect.Descriptor instead.
func (*EnableNLERequest) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{135}
}

type EnableNLEResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnableNLEResponse) Reset() {
	*x = EnableNLEResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableNLEResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableNLEResponse) ProtoMessage() {}

func (x *EnableNLEResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableNLEResponse.ProtoReflect.Descriptor instead.
func (*EnableNLEResponse) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{136}
}

// A limit of 0 means no rate limit.
// Bandwidth limit is in units of MB/s.
type QoSRateLimitPolicy_QoSLimitIOPS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WriteIOPSLimit uint32 `protobuf:"varint,1,opt,name=writeIOPSLimit,proto3" json:"writeIOPSLimit,omitempty"`
	ReadIOPSLimit  uint32 `protobuf:"varint,2,opt,name=readIOPSLimit,proto3" json:"readIOPSLimit,omitempty"`
}

func (x *QoSRateLimitPolicy_QoSLimitIOPS) Reset() {
	*x = QoSRateLimitPolicy_QoSLimitIOPS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSRateLimitPolicy_QoSLimitIOPS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSRateLimitPolicy_QoSLimitIOPS) ProtoMessage() {}

func (x *QoSRateLimitPolicy_QoSLimitIOPS) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSRateLimitPolicy_QoSLimitIOPS.ProtoReflect.Descriptor instead.
func (*QoSRateLimitPolicy_QoSLimitIOPS) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{131, 0}
}

func (x *QoSRateLimitPolicy_QoSLimitIOPS) GetWriteIOPSLimit() uint32 {
	if x != nil {
		return x.WriteIOPSLimit
	}
	return 0
}

func (x *QoSRateLimitPolicy_QoSLimitIOPS) GetReadIOPSLimit() uint32 {
	if x != nil {
		return x.ReadIOPSLimit
	}
	return 0
}

type QoSRateLimitPolicy_QoSLimitBW struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WriteBWLimit uint32 `protobuf:"varint,1,opt,name=writeBWLimit,proto3" json:"writeBWLimit,omitempty"`
	ReadBWLimit  uint32 `protobuf:"varint,2,opt,name=readBWLimit,proto3" json:"readBWLimit,omitempty"`
}

func (x *QoSRateLimitPolicy_QoSLimitBW) Reset() {
	*x = QoSRateLimitPolicy_QoSLimitBW{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSRateLimitPolicy_QoSLimitBW) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSRateLimitPolicy_QoSLimitBW) ProtoMessage() {}

func (x *QoSRateLimitPolicy_QoSLimitBW) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSRateLimitPolicy_QoSLimitBW.ProtoReflect.Descriptor instead.
func (*QoSRateLimitPolicy_QoSLimitBW) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{131, 1}
}

func (x *QoSRateLimitPolicy_QoSLimitBW) GetWriteBWLimit() uint32 {
	if x != nil {
		return x.WriteBWLimit
	}
	return 0
}

func (x *QoSRateLimitPolicy_QoSLimitBW) GetReadBWLimit() uint32 {
	if x != nil {
		return x.ReadBWLimit
	}
	return 0
}

type QoSRateLimitPolicy_QoSLimitIOPSPerGB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WriteIOPSPerGBLimit uint32 `protobuf:"varint,1,opt,name=writeIOPSPerGBLimit,proto3" json:"writeIOPSPerGBLimit,omitempty"`
	ReadIOPSPerGBLimit  uint32 `protobuf:"varint,2,opt,name=readIOPSPerGBLimit,proto3" json:"readIOPSPerGBLimit,omitempty"`
}

func (x *QoSRateLimitPolicy_QoSLimitIOPSPerGB) Reset() {
	*x = QoSRateLimitPolicy_QoSLimitIOPSPerGB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSRateLimitPolicy_QoSLimitIOPSPerGB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSRateLimitPolicy_QoSLimitIOPSPerGB) ProtoMessage() {}

func (x *QoSRateLimitPolicy_QoSLimitIOPSPerGB) ProtoReflect() protoreflect.Message {
	mi := &file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSRateLimitPolicy_QoSLimitIOPSPerGB.ProtoReflect.Descriptor instead.
func (*QoSRateLimitPolicy_QoSLimitIOPSPerGB) Descriptor() ([]byte, []int) {
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP(), []int{131, 2}
}

func (x *QoSRateLimitPolicy_QoSLimitIOPSPerGB) GetWriteIOPSPerGBLimit() uint32 {
	if x != nil {
		return x.WriteIOPSPerGBLimit
	}
	return 0
}

func (x *QoSRateLimitPolicy_QoSLimitIOPSPerGB) GetReadIOPSPerGBLimit() uint32 {
	if x != nil {
		return x.ReadIOPSPerGBLimit
	}
	return 0
}

var File_lightbits_api_duros_v2_durosapiv2_proto protoreflect.FileDescriptor

var file_lightbits_api_duros_v2_durosapiv2_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x1a, 0x2c, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2c, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x5f, 0x67, 0x65, 0x6e,
	0x5f, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x0c, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x49, 0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x54, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x45, 0x54, 0x61, 0x67, 0x22, 0x2d, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x6b, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x2f, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x42, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0x42, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73,
	0x22, 0x30, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x9c, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x8f, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x4b, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x48, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x73, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x55, 0x55, 0x49, 0x44, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a,
	0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x2a,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22,
	0x27, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x13,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xaa, 0x06, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x8a, 0x01,
	0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5c, 0x2e,
	0x5d, 0x7b, 0x31, 0x2c, 0x32, 0x35, 0x33, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x05, 0x49, 0x50, 0x41, 0x63, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x05, 0x49, 0x50, 0x41, 0x63, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x5a, 0x0a, 0x0a, 0x73,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3a, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x73, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x15, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a,
	0x0d, 0x71, 0x6f, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x55, 0x49, 0x44, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x71, 0x6f, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x55, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0d, 0x71, 0x6f, 0x73, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d,
	0x71, 0x6f, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a,
	0x0e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x16, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x35, 0x31, 0x32, 0x42, 0x10, 0x80, 0x04, 0x12, 0x12, 0x0a,
	0x0d, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x5f, 0x34, 0x4b, 0x10, 0x80,
	0x20, 0x42, 0x0d, 0x0a, 0x0b, 0x71, 0x6f, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x44,
	0x22, 0x5f, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a, 0x13, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x22, 0x4e, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x29, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22,
	0x8e, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x72, 0x63, 0x4e, 0x6f, 0x64,
	0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x72, 0x63,
	0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x57, 0x68, 0x69, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x22, 0x79, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x75, 0x73, 0x65, 0x49, 0x50, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x75, 0x73, 0x65, 0x49, 0x50, 0x22, 0xd0, 0x02, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x12, 0x38, 0x0a,
	0x05, 0x49, 0x50, 0x41, 0x63, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x05, 0x49, 0x50, 0x41, 0x63, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0d, 0x71, 0x6f, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x71, 0x6f, 0x73, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x55, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0d, 0x71, 0x6f, 0x73, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0d, 0x71, 0x6f, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x71, 0x6f, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x44, 0x22, 0x55,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x55,
	0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6b, 0x67,
	0x55, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x50, 0x6b, 0x67, 0x55, 0x72, 0x69, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x94, 0x01,
	0x0a, 0x15, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x50, 0x6b, 0x67, 0x55, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x6b, 0x67, 0x55, 0x72, 0x69, 0x12, 0x14, 0x0a,
	0x05, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x55, 0x55,
	0x49, 0x44, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7d, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x64, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65,
	0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x56, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x4e,
	0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x22, 0x2a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x51, 0x4e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x51, 0x4e, 0x22, 0x4c, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x51, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x51, 0x4e, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x22, 0x62, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x5f,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22,
	0xd7, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x69, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x24, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0xdd, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x22, 0x54, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x22, 0x2e,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x6c,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x4e, 0x76, 0x6d,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x76, 0x6d, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0b, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x85, 0x01, 0x0a,
	0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x51, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x51, 0x4e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55,
	0x55, 0x49, 0x44, 0x73, 0x22, 0xb5, 0x07, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x76, 0x6d,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x61, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x61, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x4f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x39, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x50, 0x0a, 0x15, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x72, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x73, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x45, 0x44, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x08, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a,
	0x09, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x76,
	0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x45, 0x44, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x73, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x54, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x45, 0x54, 0x61, 0x67, 0x12, 0x4f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x70, 0x69, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x4a, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x04, 0x22, 0x69, 0x0a, 0x08, 0x53, 0x45, 0x44, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x6f, 0x74, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x6e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x55, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x45, 0x44, 0x10, 0x05, 0x22, 0x3c,
	0x0a, 0x09, 0x53, 0x45, 0x44, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x02, 0x22, 0xce, 0x07, 0x0a,
	0x0d, 0x44, 0x75, 0x72, 0x6f, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x75, 0x72, 0x6f, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x75, 0x72, 0x6f, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x76, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x76, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x75, 0x6d,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x4e, 0x76,
	0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x65, 0x63, 0x12,
	0x49, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x70, 0x69, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x54,
	0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x45, 0x54, 0x61, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x22, 0x6c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x6e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x22, 0x5d,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x10, 0x03, 0x22, 0x50, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x75, 0x72, 0x6f, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0x4f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x15,
	0x41, 0x64, 0x64, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a,
	0x15, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x17, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x52, 0x69, 0x73, 0x6b, 0x4f,
	0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x11, 0x52, 0x69, 0x73, 0x6b, 0x4f, 0x66,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x73, 0x73, 0x22, 0x26, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x22, 0x4f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x22, 0x29, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x8c, 0x05, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4e, 0x51, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4e, 0x51, 0x4e, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x70, 0x69, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x54, 0x61,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x45, 0x54, 0x61, 0x67, 0x12, 0x3d, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x13,
	0x4d, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4d, 0x69, 0x6e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x69, 0x6e, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11,
	0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70,
	0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x70, 0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x08, 0x6e, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x4c, 0x45, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xdb,
	0x02, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4e, 0x51, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x51, 0x4e, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x45, 0x54, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x45, 0x54, 0x61, 0x67,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x76, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x76, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc9, 0x02, 0x0a,
	0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x41,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e,
	0x75, 0x6d, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e,
	0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x75, 0x6d,
	0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x22, 0x9b, 0x09, 0x0a, 0x06, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x73,
	0x69, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x70, 0x69, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x49, 0x50, 0x41,
	0x63, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x49, 0x50,
	0x41, 0x63, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x54, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x45, 0x54, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x62, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x15,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x6f, 0x73, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x55, 0x55, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x6f,
	0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x55, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x71,
	0x6f, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x71, 0x6f, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x22, 0x87, 0x01, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x10, 0x0a, 0x22, 0x1f, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x54, 0x43, 0x50, 0x10, 0x00, 0x22, 0x90, 0x07, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x16, 0x52, 0x69, 0x73,
	0x6b, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x4f, 0x66,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x16, 0x52, 0x69, 0x73, 0x6b, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x55, 0x55, 0x49, 0x44, 0x73, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x54, 0x61, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x45, 0x54, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0d, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41,
	0x70, 0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x41, 0x70, 0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x08, 0x6e, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x4c, 0x45, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5b, 0x0a,
	0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x52,
	0x65, 0x62, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x22, 0x86, 0x01, 0x0a, 0x15, 0x52,
	0x69, 0x73, 0x6b, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x73, 0x73,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52,
	0x69, 0x73, 0x6b, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x73, 0x73,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x4f, 0x66, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x73, 0x73, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49,
	0x6e, 0x52, 0x69, 0x73, 0x6b, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f,
	0x73, 0x73, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x66,
	0x52, 0x69, 0x73, 0x6b, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x73,
	0x73, 0x10, 0x03, 0x22, 0x83, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x22, 0x46, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x43, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x5a, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x4a, 0x73, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x4a, 0x73,
	0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x22, 0x96, 0x07, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x40,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x73, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x6e, 0x73, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x49, 0x50, 0x41, 0x63, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x49, 0x50, 0x41, 0x63, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x70, 0x69,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x45, 0x54, 0x61, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x45, 0x54, 0x61, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x07, 0x22, 0x61, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x88, 0x02,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x5e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x57, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x0a, 0x11, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x2b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x18, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x19, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xee, 0x01, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x1a,
	0x6a, 0x0a, 0x11, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x02, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x01, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x12, 0x71, 0x6f, 0x53,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x51,
	0x6f, 0x53, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x48, 0x00, 0x52, 0x12, 0x71, 0x6f, 0x53, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0xc7, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x12, 0x71, 0x6f, 0x53, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x6f, 0x53, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x12, 0x71,
	0x6f, 0x53, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x16, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa7, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4d,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x22, 0xce, 0x02,
	0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5c,
	0x0a, 0x12, 0x51, 0x6f, 0x53, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x51, 0x6f, 0x53, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x12, 0x51, 0x6f, 0x53, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x58, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc5,
	0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x22, 0xe1, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x52, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x17, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x50, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x32, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x6f, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x77, 0x0a, 0x15, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x72, 0x63,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x18,
	0x0a, 0x16, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x0a, 0x1e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x65,
	0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x3f, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x1a, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x44, 0x10, 0x01, 0x22, 0xe4,
	0x01, 0x0a, 0x14, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x59, 0x0a, 0x12, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x73, 0x22, 0x1e, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x49, 0x6e, 0x10, 0x01, 0x22, 0x39, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x80, 0x01, 0x0a, 0x17, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x17,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x71, 0x0a, 0x11,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x4d, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x1a,
	0x75, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x3a, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x14, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x53, 0x44, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x53, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x53, 0x53, 0x44, 0x73,
	0x22, 0x84, 0x0b, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5f, 0x0a, 0x10,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x10, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xc9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x63, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x53, 0x44, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x53,
	0x44, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x53, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a,
	0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x60, 0x0a, 0x13, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x63, 0x0a, 0x14, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x75, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xce,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6b, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x56, 0x4d, 0x65,
	0x53, 0x53, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69,
	0x74, 0x79, 0x10, 0x06, 0x22, 0x54, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x55, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x4d, 0x10,
	0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4d, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x50, 0x49,
	0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x4d, 0x10, 0x04, 0x22, 0x5a, 0x0a, 0x0d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x55,
	0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x6f, 0x77,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x03, 0x12, 0x08,
	0x0a, 0x04, 0x48, 0x69, 0x67, 0x68, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x10, 0x05, 0x42, 0x0f, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe3, 0x05, 0x0a, 0x12, 0x51, 0x6f, 0x53, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x54,
	0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x4f, 0x50,
	0x53, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x51, 0x6f, 0x53, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x51, 0x6f, 0x53, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x4f, 0x50, 0x53,
	0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x4f, 0x50, 0x53, 0x12, 0x51, 0x0a,
	0x07, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x6f, 0x53, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x51, 0x6f, 0x53, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x57, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x77,
	0x12, 0x66, 0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x4f, 0x50, 0x53, 0x50, 0x65, 0x72,
	0x47, 0x42, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x51, 0x6f, 0x53, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x51, 0x6f, 0x53, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x4f, 0x50,
	0x53, 0x50, 0x65, 0x72, 0x47, 0x42, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x49,
	0x4f, 0x50, 0x53, 0x50, 0x65, 0x72, 0x47, 0x42, 0x1a, 0x5c, 0x0a, 0x0c, 0x51, 0x6f, 0x53, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x49, 0x4f, 0x50, 0x53, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x49, 0x4f, 0x50, 0x53, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x4f, 0x50, 0x53, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x49, 0x4f, 0x50, 0x53, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x49, 0x4f, 0x50,
	0x53, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x52, 0x0a, 0x0a, 0x51, 0x6f, 0x53, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x57, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x57, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x42, 0x57, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64,
	0x42, 0x57, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x65, 0x61, 0x64, 0x42, 0x57, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x75, 0x0a, 0x11, 0x51, 0x6f,
	0x53, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x4f, 0x50, 0x53, 0x50, 0x65, 0x72, 0x47, 0x42, 0x12,
	0x30, 0x0a, 0x13, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x4f, 0x50, 0x53, 0x50, 0x65, 0x72, 0x47,
	0x42, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x49, 0x4f, 0x50, 0x53, 0x50, 0x65, 0x72, 0x47, 0x42, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x49, 0x4f, 0x50, 0x53, 0x50, 0x65, 0x72,
	0x47, 0x42, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72,
	0x65, 0x61, 0x64, 0x49, 0x4f, 0x50, 0x53, 0x50, 0x65, 0x72, 0x47, 0x42, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x51, 0x6f, 0x53, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x81, 0x01,
	0x0a, 0x1b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x42, 0x0a,
	0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x55, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x55, 0x49,
	0x44, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x17, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x4c, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x4c, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a,
	0x55, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x53, 0x32, 0x35, 0x36, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x65,
	0x6d, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x6c, 0x73, 0x50, 0x72, 0x69, 0x76, 0x4b, 0x65,
	0x79, 0x50, 0x65, 0x6d, 0x10, 0x03, 0x2a, 0x64, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x75,
	0x6c, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x2a, 0x51, 0x0a, 0x08,
	0x4e, 0x4c, 0x45, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x4e, 0x4c, 0x45, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x4e, 0x4c, 0x45, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x4c, 0x45, 0x10, 0x03, 0x2a,
	0x3b, 0x0a, 0x10, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x10, 0x02, 0x2a, 0x39, 0x0a, 0x0a,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x71, 0x6f, 0x73, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x02, 0x32, 0xce, 0x9d, 0x02, 0x0a, 0x08, 0x44, 0x75, 0x72,
	0x6f, 0x73, 0x41, 0x50, 0x49, 0x12, 0xa8, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x4e, 0x92, 0x41, 0x34, 0x12, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x20, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x20, 0x47, 0x65, 0x74, 0x20, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12,
	0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0xc9, 0x06, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xeb,
	0x05, 0x92, 0x41, 0xa0, 0x05, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x2e, 0x1a, 0xb6, 0x01, 0x41, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20,
	0x68, 0x61, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x20, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x28, 0x41, 0x43, 0x4c, 0x29, 0x2e, 0x0a,
	0x55, 0x73, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x49, 0x50, 0x2d, 0x41, 0x43, 0x4c, 0x20, 0x28, 0x49, 0x50,
	0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x29, 0x2e, 0x4a, 0xfa, 0x01,
	0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0xf2, 0x01, 0x0a, 0xe7, 0x01, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x0a, 0x73, 0x69, 0x7a, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2c, 0x20, 0x0a, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2c, 0x20, 0x0a, 0x41, 0x43, 0x4c, 0x20, 0x6f, 0x72, 0x20,
	0x49, 0x50, 0x2d, 0x41, 0x43, 0x4c, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30,
	0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x40, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x39, 0x0a,
	0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12,
	0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a, 0x01, 0x2a, 0x5a, 0x14,
	0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0xe8, 0x07, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2b, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfc, 0x06, 0x92, 0x41, 0xa9, 0x06, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x1a, 0x8c,
	0x02, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x55, 0x55,
	0x49, 0x44, 0x2e, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67,
	0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x47, 0x45, 0x54, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x2e, 0x20, 0x41, 0x73, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x75, 0x6e, 0x73, 0x20,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x20, 0x47, 0x45, 0x54, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x63, 0x0a,
	0x03, 0x34, 0x30, 0x30, 0x12, 0x5c, 0x0a, 0x52, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x6f, 0x72,
	0x20, 0x61, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20,
	0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x29, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33,
	0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x38,
	0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x31, 0x0a, 0x27, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x55, 0x55,
	0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x44, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12,
	0x3d, 0x0a, 0x33, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f,
	0x0a, 0x03, 0x34, 0x31, 0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x6a, 0x0a, 0x03,
	0x35, 0x30, 0x33, 0x12, 0x63, 0x0a, 0x59, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x20, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x28, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x29, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x5a, 0x18,
	0x2a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x2a, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x12, 0xf4, 0x06, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8c, 0x06, 0x92, 0x41, 0xc7, 0x05, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x2e, 0x1a, 0xfb, 0x03, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,
	0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x20, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x67,
	0x69, 0x76, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x55, 0x55, 0x49, 0x44,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x2c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x55, 0x55, 0x49,
	0x44, 0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x2c, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x55, 0x55, 0x49, 0x44, 0x2e, 0x20,
	0x49, 0x66, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x64, 0x2c, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x69, 0x73, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x2c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x65, 0x6e, 0x64, 0x2e, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x75, 0x6e,
	0x6c, 0x65, 0x73, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x61, 0x6e,
	0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34,
	0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3b, 0x5a, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x93,
	0x04, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xad, 0x03, 0x92, 0x41, 0xea, 0x02, 0x0a, 0x0b, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x47, 0x65, 0x74, 0x20, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x3c, 0x41, 0x50, 0x49, 0x20, 0x74,
	0x6f, 0x20, 0x70, 0x75, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b,
	0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34,
	0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x1c,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2a, 0x0a, 0x03, 0x35, 0x30, 0x31,
	0x12, 0x23, 0x0a, 0x19, 0x55, 0x6e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x20, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x5a, 0x10, 0x12, 0x0e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0xa9, 0x03, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x26, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x22,
	0xce, 0x02, 0x92, 0x41, 0xa2, 0x02, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x47, 0x65, 0x74, 0x20,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x30, 0x47, 0x65, 0x74,
	0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x67, 0x69, 0x76, 0x65,
	0x6e, 0x20, 0x62, 0x79, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x51, 0x4e, 0x2e, 0x4a, 0x35, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x30, 0x0a, 0x03, 0x34, 0x30, 0x34,
	0x12, 0x29, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x68, 0x6f, 0x73,
	0x74, 0x20, 0x4e, 0x51, 0x4e, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35,
	0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x51, 0x4e, 0x7d,
	0x12, 0xbf, 0x03, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x28,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xdc, 0x02, 0x92, 0x41, 0xba, 0x02, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x20,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1c,
	0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x2e, 0x1a, 0x24, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x55, 0x55, 0x49,
	0x44, 0x2e, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a,
	0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a,
	0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x33, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2c, 0x0a, 0x22, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x55, 0x55, 0x49,
	0x44, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24,
	0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73,
	0x74, 0x73, 0x12, 0xda, 0x03, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x28, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x82, 0x03, 0x92, 0x41, 0xaf,
	0x02, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x47,
	0x65, 0x74, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x27, 0x47, 0x65, 0x74, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x79,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x4a, 0x22,
	0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33,
	0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x33,
	0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2c, 0x0a, 0x22, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x64, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x69, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x5a, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x32, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d,
	0x12, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x12,
	0x80, 0x05, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x27, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x9e, 0x04, 0x92, 0x41, 0x85, 0x04, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x12, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x1a, 0xff, 0x01, 0x41, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x20, 0x69, 0x73, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x76, 0x69,
	0x61, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2e, 0x20, 0x41, 0x6e, 0x20, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20,
	0x69, 0x73, 0x20, 0x64, 0x6f, 0x6e, 0x65, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x2d, 0x20, 0x65,
	0x2e, 0x67, 0x2e, 0x20, 0x20, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x3f, 0x4e, 0x61, 0x6d, 0x65, 0x3d, 0x3c, 0x4e, 0x61, 0x6d, 0x65, 0x3e, 0x20, 0x32, 0x2e,
	0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x2d, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x20, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x3f, 0x55, 0x55, 0x49, 0x44, 0x3d,
	0x3c, 0x55, 0x55, 0x49, 0x44, 0x3e, 0x20, 0x33, 0x2e, 0x20, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x2d, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x20,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x3f, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3d, 0x3c, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3e, 0x4a, 0x58, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x51, 0x0a, 0x47, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61,
	0x6c, 0x20, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61,
	0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34,
	0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x80, 0x03, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x26,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x75, 0x72, 0x6f, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa5, 0x02,
	0x92, 0x41, 0x85, 0x02, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x47, 0x65, 0x74, 0x20,
	0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x1a, 0x33, 0x47, 0x65, 0x74, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a,
	0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a,
	0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x28, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x21, 0x0a, 0x17, 0x4e, 0x6f, 0x64,
	0x65, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12,
	0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b,
	0x55, 0x55, 0x49, 0x44, 0x7d, 0x12, 0xcc, 0x04, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76,
	0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd7, 0x03, 0x92, 0x41, 0xb8,
	0x03, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x76, 0x6d, 0x65, 0x20, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0xf0, 0x01,
	0x41, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6e, 0x76, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x69,
	0x73, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x76, 0x69, 0x61, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x6e, 0x76, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x20, 0x31,
	0x2e, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x20, 0x2d, 0x20, 0x65,
	0x2e, 0x67, 0x2e, 0x20, 0x20, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x76, 0x6d, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x55,
	0x49, 0x44, 0x3d, 0x3c, 0x55, 0x55, 0x49, 0x44, 0x3e, 0x20, 0x32, 0x2e, 0x20, 0x4e, 0x6f, 0x64,
	0x65, 0x55, 0x55, 0x49, 0x44, 0x20, 0x2d, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x20, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x3f, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x3d, 0x3c, 0x55, 0x55, 0x49, 0x44, 0x3e,
	0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c,
	0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e,
	0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12,
	0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0xed, 0x03, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfc, 0x02, 0x92, 0x41, 0xd4, 0x02, 0x0a, 0x0f, 0x67, 0x65,
	0x74, 0x20, 0x6e, 0x76, 0x6d, 0x65, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x20, 0x6e, 0x76, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x6e, 0x76,
	0x6d, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x62,
	0x79, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x20, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x6e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x31, 0x35, 0x65, 0x62,
	0x32, 0x31, 0x63, 0x30, 0x2d, 0x33, 0x35, 0x61, 0x65, 0x2d, 0x34, 0x37, 0x38, 0x64, 0x2d, 0x62,
	0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c,
	0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e,
	0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x25, 0x0a, 0x03,
	0x34, 0x30, 0x34, 0x12, 0x1e, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x69, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x6e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x7d, 0x12, 0x82, 0x03, 0x0a, 0x09, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x22, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xb8, 0x02, 0x92,
	0x41, 0xa0, 0x02, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x20, 0x6c, 0x6f, 0x67, 0x73, 0x12,
	0x2b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x20, 0x6c, 0x6f, 0x67, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x5c, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x61, 0x72, 0x62, 0x61, 0x6c, 0x6c, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79,
	0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6f,
	0x73, 0x20, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30,
	0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a,
	0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x32, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x30, 0x01, 0x12, 0x81, 0x03, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa2, 0x02, 0x92, 0x41, 0x87, 0x02, 0x0a,
	0x0b, 0x67, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x50, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2c, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x55,
	0x55, 0x49, 0x44, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4e, 0x51, 0x4e, 0x20, 0x69, 0x73, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20,
	0x76, 0x69, 0x61, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2e, 0x4a, 0x35, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30,
	0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x97, 0x03,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x56, 0x32, 0x22, 0xb2, 0x02, 0x92, 0x41, 0x93, 0x02, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x20, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x5c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2c, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x53, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x51, 0x4e, 0x20, 0x69, 0x73, 0x20, 0x65, 0x78,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x76, 0x69, 0x61, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41,
	0x50, 0x49, 0x2e, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30,
	0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0xc2, 0x06, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x76, 0x6d,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xca, 0x05, 0x92, 0x41, 0x99, 0x05, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x4e, 0x56, 0x4d, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x1a, 0x4b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x20, 0x4e, 0x56, 0x4d, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f,
	0x64, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x6e, 0x6f,
	0x64, 0x65, 0x20, 0x55, 0x55, 0x49, 0x44, 0x2e, 0x4a, 0x83, 0x02, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0xfb, 0x01, 0x0a, 0xf0, 0x01, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x6e, 0x6f, 0x64, 0x65,
	0x20, 0x75, 0x75, 0x69, 0x64, 0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x64, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20,
	0x6f, 0x72, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x64,
	0x65, 0x27, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x27, 0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x6e, 0x27, 0x74, 0x20, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35,
	0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65,
	0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2f, 0x0a, 0x03, 0x34, 0x30,
	0x34, 0x12, 0x28, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x6e,
	0x6f, 0x64, 0x65, 0x20, 0x75, 0x75, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x44, 0x0a, 0x03, 0x34,
	0x30, 0x39, 0x12, 0x3d, 0x0a, 0x33, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x4a, 0x1f, 0x0a, 0x03, 0x34, 0x31, 0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67,
	0x20, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x32, 0x2f, 0x6e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x7d, 0x12, 0x8b, 0x07, 0x0a,
	0x0d, 0x41, 0x64, 0x64, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x76, 0x6d, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x76, 0x6d, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x06, 0x92, 0x41,
	0xfa, 0x05, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x41, 0x64, 0x64, 0x20, 0x4e, 0x56,
	0x4d, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x1a, 0xae, 0x01, 0x41, 0x64, 0x64, 0x20, 0x4e, 0x56, 0x4d, 0x65, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x62,
	0x79, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x74, 0x6f, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x55, 0x55, 0x49, 0x44, 0x2e, 0x20,
	0x49, 0x66, 0x20, 0x4e, 0x56, 0x4d, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69,
	0x73, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62,
	0x79, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x2c, 0x20,
	0x6f, 0x72, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x64,
	0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x20, 0x66,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4a, 0x83, 0x02, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0xfb, 0x01,
	0x0a, 0xf0, 0x01, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20,
	0x6f, 0x72, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x75, 0x75,
	0x69, 0x64, 0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x6f,
	0x72, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x6f, 0x72, 0x20,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x27, 0x73,
	0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x27, 0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x72,
	0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x6e, 0x27, 0x74, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34,
	0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2f, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x28,
	0x0a, 0x1e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65,
	0x20, 0x75, 0x75, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x44, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12,
	0x3d, 0x0a, 0x33, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f,
	0x0a, 0x03, 0x34, 0x31, 0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e,
	0x76, 0x6d, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0xee, 0x06, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2b, 0x2e, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x06, 0x92, 0x41, 0xa9, 0x05, 0x0a, 0x08, 0x65,
	0x63, 0x68, 0x6f, 0x20, 0x72, 0x70, 0x63, 0x12, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x1a, 0x50, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x3a, 0x0a, 0x41, 0x43, 0x4c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x0a, 0x49,
	0x50, 0x41, 0x43, 0x4c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x4a, 0x65, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0x5e, 0x0a, 0x54, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x29, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c,
	0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e,
	0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x47, 0x0a, 0x03,
	0x34, 0x30, 0x34, 0x12, 0x40, 0x0a, 0x36, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20,
	0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x44, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x3d, 0x0a, 0x33,
	0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03, 0x34,
	0x31, 0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x73, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x3e, 0x0a, 0x03, 0x35, 0x30, 0x31,
	0x12, 0x37, 0x0a, 0x2d, 0x55, 0x6e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x20, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x28, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x29,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x5b, 0x0a, 0x03, 0x35, 0x30, 0x33,
	0x12, 0x54, 0x0a, 0x4a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6e, 0x6f, 0x77, 0x20, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x29, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x3a, 0x01, 0x2a, 0x5a,
	0x1b, 0x3a, 0x01, 0x2a, 0x1a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x1a, 0x2d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x12, 0x9f, 0x03, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x22, 0xc7, 0x02, 0x92, 0x41, 0xa5, 0x02, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x2d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x20, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x55, 0x49,
	0x44, 0x1a, 0x27, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x55, 0x55, 0x49, 0x44, 0x2e, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30,
	0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x3a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x33, 0x0a,
	0x29, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x12, 0xf2, 0x04,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x04, 0x92, 0x41, 0xee, 0x03, 0x0a, 0x0c, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0xa6, 0x02, 0x41, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x20, 0x69, 0x73, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x64, 0x20, 0x76, 0x69, 0x61, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x2e,
	0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x63, 0x61, 0x6e,
	0x20, 0x62, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a,
	0x20, 0x31, 0x2e, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x2d, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20,
	0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x3f, 0x4e, 0x61, 0x6d, 0x65, 0x3d, 0x3c, 0x4e, 0x61, 0x6d, 0x65, 0x3e, 0x20, 0x32, 0x2e, 0x20,
	0x55, 0x55, 0x49, 0x44, 0x20, 0x2d, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x20, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3f, 0x55, 0x55, 0x49,
	0x44, 0x3d, 0x3c, 0x55, 0x55, 0x49, 0x44, 0x3e, 0x20, 0x33, 0x2e, 0x20, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x20, 0x2d, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3d, 0x3c, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x3e, 0x1a, 0x2c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33,
	0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b,
	0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x8e, 0x05, 0x0a, 0x0d, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x9f, 0x04, 0x92, 0x41, 0xf2, 0x03, 0x0a, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x1a, 0x9d, 0x01, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x55, 0x55,
	0x49, 0x44, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x55, 0x52, 0x49,
	0x2e, 0x20, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x20,
	0x69, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x20, 0x73,
	0x68, 0x61, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4a, 0x25, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1e, 0x0a, 0x14, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x6f, 0x72, 0x20, 0x55, 0x52, 0x49,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31,
	0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x18, 0x0a, 0x0e,
	0x55, 0x55, 0x49, 0x44, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x44, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x3d, 0x0a,
	0x33, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03,
	0x34, 0x31, 0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x73, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a,
	0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f,
	0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x2f, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x12, 0xe8, 0x04, 0x0a, 0x0e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf6, 0x03, 0x92, 0x41, 0xd0, 0x03, 0x0a, 0x07, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x10, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x20, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x1a, 0xc9, 0x01, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x62, 0x79,
	0x20, 0x6f, 0x6e, 0x65, 0x2e, 0x20, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63,
	0x61, 0x75, 0x73, 0x65, 0x20, 0x6c, 0x6f, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x64, 0x2e, 0x20, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x20,
	0x73, 0x68, 0x61, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4a, 0x25, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1e, 0x0a, 0x14, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x6f, 0x72, 0x20, 0x55, 0x52,
	0x49, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30,
	0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x37, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x30, 0x0a,
	0x26, 0x4f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0xfb,
	0x04, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x9d, 0x04, 0x92,
	0x41, 0xff, 0x03, 0x0a, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x1a, 0xd0, 0x01, 0x41,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x20, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x61, 0x72, 0x65, 0x3a, 0x20, 0x20, 0x31, 0x2e, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x2d,
	0x20, 0x75, 0x72, 0x6c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6e, 0x65, 0x77, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x69, 0x70, 0x20, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x20, 0x61, 0x73, 0x20, 0x77, 0x65, 0x6c, 0x6c,
	0x20, 0x61, 0x73, 0x20, 0x65, 0x74, 0x63, 0x64, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x70, 0x65, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x2e, 0x67, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x31, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x3a, 0x32, 0x33, 0x38, 0x30, 0x4a,
	0x2d, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x26, 0x0a, 0x1c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35,
	0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65,
	0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x59, 0x0a, 0x03, 0x34, 0x30,
	0x39, 0x12, 0x52, 0x0a, 0x48, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x20, 0x28, 0x72, 0x65, 0x75, 0x73, 0x65, 0x49, 0x50, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x77,
	0x61, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x75, 0x73, 0x65, 0x64, 0x29, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0xed, 0x08, 0x0a,
	0x0b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x08, 0x92, 0x41, 0xd2, 0x07, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x20, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x1a, 0xf1, 0x03, 0x54, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x55, 0x55, 0x49,
	0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x64, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x28, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x20, 0x61, 0x73, 0x20, 0x53, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x29,
	0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x61, 0x72, 0x65, 0x3a, 0x0a, 0x31, 0x2e, 0x20, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x20, 0x2d, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x72, 0x63,
	0x20, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x20, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x66, 0x20, 0x73, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2c, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x55, 0x6e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x2e, 0x20, 0x53, 0x6f, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x20, 0x28, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6e, 0x6f, 0x64, 0x65, 0x20, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x29, 0x2c, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x61, 0x73, 0x73, 0x75, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x55, 0x6e,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x28, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x79, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x6e, 0x6f, 0x64, 0x65,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x20, 0x50, 0x47, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x62, 0x79, 0x20, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x74, 0x73, 0x20, 0x50, 0x47, 0x20, 0x74, 0x6f, 0x20,
	0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x29, 0x4a, 0x5e, 0x0a,
	0x03, 0x34, 0x30, 0x30, 0x12, 0x57, 0x0a, 0x4d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x64, 0x2e, 0x20, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x38, 0x0a, 0x03, 0x34, 0x30, 0x34,
	0x12, 0x31, 0x0a, 0x27, 0x4f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x73, 0x20, 0x69, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x4a, 0x4a, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x43, 0x0a, 0x39, 0x54, 0x68,
	0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x1f, 0x0a, 0x03, 0x34, 0x31, 0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d,
	0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x2f, 0x0a, 0x03, 0x34, 0x32, 0x39, 0x12, 0x28, 0x0a, 0x1e, 0x54, 0x6f, 0x6f, 0x20, 0x6d,
	0x61, 0x6e, 0x79, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x20, 0x69, 0x6e, 0x20,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x53, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x55,
	0x55, 0x49, 0x44, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0xc9, 0x05, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2b, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdd, 0x04, 0x92, 0x41, 0xbb, 0x04, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x1a, 0xc1,
	0x01, 0x41, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x20, 0x54,
	0x68, 0x69, 0x73, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x61,
	0x6b, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x74,
	0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x55, 0x55, 0x49, 0x44,
	0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x61, 0x72, 0x65, 0x3a, 0x20, 0x20, 0x31, 0x2e, 0x20, 0x55,
	0x55, 0x49, 0x44, 0x20, 0x2d, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2e, 0x0a, 0x24, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x72, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20,
	0x55, 0x55, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31,
	0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2f, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x28, 0x0a, 0x1e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x55, 0x55, 0x49, 0x44,
	0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x44, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x3d, 0x0a,
	0x33, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03,
	0x34, 0x31, 0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x73, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a,
	0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f,
	0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x2a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x12, 0xd1, 0x04, 0x0a, 0x0c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xf3, 0x03, 0x92, 0x41, 0xc7, 0x03, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x1a, 0x8c, 0x01, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x20, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x70, 0x65, 0x65, 0x72, 0x73, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x69, 0x73, 0x20, 0x72,
	0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x20, 0x75, 0x70, 0x2d, 0x74, 0x6f, 0x2d, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30,
	0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x2f, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x28, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x44, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x3d, 0x0a, 0x33, 0x54, 0x68, 0x65, 0x72, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03, 0x34, 0x31, 0x32, 0x12, 0x18, 0x0a,
	0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24,
	0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x55, 0x55, 0x49, 0x44, 0x7d, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xa1, 0x06, 0x0a,
	0x0d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2c,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb2, 0x05, 0x92, 0x41,
	0x85, 0x05, 0x0a, 0x08, 0x65, 0x63, 0x68, 0x6f, 0x20, 0x72, 0x70, 0x63, 0x12, 0x0f, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x1a, 0x8f, 0x02,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x69,
	0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,
	0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2e, 0x4a,
	0x35, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2e, 0x0a, 0x24, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x6f, 0x72, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x55, 0x55, 0x49,
	0x44, 0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a,
	0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a,
	0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x2f, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x28, 0x0a, 0x1e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x69, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x4a, 0x44, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x3d, 0x0a, 0x33, 0x54, 0x68,
	0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03, 0x34, 0x31, 0x32,
	0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30,
	0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a,
	0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0xcb, 0x04, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0xea, 0x03, 0x92, 0x41, 0xcb, 0x03, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x1a, 0x49, 0x41, 0x20, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c,
	0x20, 0x61, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x71, 0x6f,
	0x73, 0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x4a, 0x91, 0x01, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x89, 0x01, 0x0a,
	0x7f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x6d,
	0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x69, 0x6c, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12,
	0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x40, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x39, 0x0a, 0x2f, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a,
	0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0xc0,
	0x03, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd1, 0x02,
	0x92, 0x41, 0xa4, 0x02, 0x0a, 0x1d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x1a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x27, 0x73, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4a, 0x2f,
	0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x28, 0x0a, 0x1e, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a,
	0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35,
	0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01,
	0x2a, 0x1a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0x92, 0x04, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa3, 0x03, 0x92, 0x41, 0x80, 0x03, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x1a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x73, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x4a, 0x53, 0x0a,
	0x03, 0x34, 0x30, 0x30, 0x12, 0x4c, 0x0a, 0x42, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62,
	0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33,
	0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x39,
	0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x32, 0x0a, 0x28, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x4e,
	0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03, 0x34, 0x31, 0x32,
	0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30,
	0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xe7, 0x02, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xfb, 0x01, 0x92, 0x41, 0xdf, 0x01, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x1a, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x61,
	0x6c, 0x6c, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4a, 0x22, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a,
	0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35,
	0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x90, 0x03, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xb5, 0x02, 0x92, 0x41,
	0x92, 0x02, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x0b, 0x47, 0x65, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x13, 0x47, 0x65,
	0x74, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x62, 0x79, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24,
	0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03,
	0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x4a, 0x34, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2d, 0x0a, 0x23, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24,
	0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0xbc, 0x05, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xd2, 0x04,
	0x92, 0x41, 0x99, 0x04, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x1a, 0x28, 0x41, 0x20, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x68, 0x61, 0x73, 0x20, 0x61, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0xfa, 0x01, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0xf2, 0x01,
	0x0a, 0xe7, 0x01, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x3a, 0x20,
	0x0a, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2c, 0x20,
	0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x69,
	0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x73, 0x2c, 0x20, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x2c, 0x20, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x20, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2c, 0x20,
	0x0a, 0x41, 0x43, 0x4c, 0x20, 0x6f, 0x72, 0x20, 0x49, 0x50, 0x2d, 0x41, 0x43, 0x4c, 0x20, 0x69,
	0x73, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33,
	0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x40,
	0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x39, 0x0a, 0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x12, 0xbe, 0x04, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc6, 0x03, 0x92, 0x41, 0x8b,
	0x03, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x1a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x73, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x49, 0x44, 0x2e, 0x4a, 0x56,
	0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x45, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a,
	0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a,
	0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x3a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x33, 0x0a, 0x29, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f,
	0x0a, 0x03, 0x34, 0x31, 0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x31, 0x2a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b,
	0x49, 0x44, 0x7d, 0x12, 0x83, 0x03, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2e, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x02, 0x92, 0x41, 0xd8, 0x01, 0x0a,
	0x10, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2e, 0x1a, 0x04, 0x54, 0x4f, 0x44, 0x4f, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35,
	0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65,
	0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30,
	0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0xb9, 0x03, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2c, 0x2e, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xd5, 0x02,
	0x92, 0x41, 0x9a, 0x02, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x0e, 0x47, 0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x1a, 0x14, 0x47, 0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x20, 0x62, 0x79, 0x20, 0x49, 0x44, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35,
	0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65,
	0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30,
	0x34, 0x12, 0x2e, 0x0a, 0x24, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x12, 0x97, 0x03, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x26, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xba, 0x02, 0x92, 0x41, 0x83, 0x02, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x20, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x08, 0x47, 0x65, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0x10, 0x47,
	0x65, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x62, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x4a,
	0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30,
	0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x31, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2a, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x28, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x21, 0x0a, 0x17, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0xf5, 0x02, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x92, 0x02, 0x92, 0x41, 0xe2, 0x01, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x20, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x1a, 0x04, 0x54, 0x4f, 0x44,
	0x4f, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24,
	0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03,
	0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x4a, 0x28, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x21, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0xcd, 0x03, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x32, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xda, 0x02, 0x92, 0x41, 0xb5,
	0x02, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a,
	0x34, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x20, 0x49, 0x50, 0x73, 0x4a, 0x20, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x19, 0x0a, 0x0f,
	0x50, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e,
	0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23,
	0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x4a, 0x24, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x1d, 0x0a, 0x13, 0x50, 0x6f,
	0x72, 0x74, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30,
	0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22,
	0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0xb4, 0x05, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x32, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3, 0x04, 0x92, 0x41, 0x8a, 0x04, 0x0a,
	0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x2f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x20,
	0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x19, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x73,
	0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c,
	0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e,
	0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x3c, 0x0a, 0x03,
	0x34, 0x30, 0x34, 0x12, 0x35, 0x0a, 0x2b, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x42, 0x0a, 0x03, 0x34, 0x30,
	0x39, 0x12, 0x3b, 0x0a, 0x31, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69,
	0x6e, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f,
	0x0a, 0x03, 0x34, 0x31, 0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x5b, 0x0a, 0x03,
	0x35, 0x30, 0x33, 0x12, 0x54, 0x0a, 0x4a, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x28, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x29,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a,
	0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x72, 0x74, 0x7d, 0x12, 0x96,
	0x03, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x02, 0x92,
	0x41, 0xf6, 0x01, 0x0a, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x1c,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x22, 0x0a, 0x03,
	0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c,
	0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e,
	0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12,
	0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0xa2, 0x05, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x32, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xaf, 0x04, 0x92, 0x41, 0x83,
	0x04, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a,
	0x35, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x69, 0x70, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x20, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x19, 0x0a,
	0x0f, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12,
	0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x3c, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x35, 0x0a, 0x2b, 0x50,
	0x6f, 0x72, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76,
	0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x42, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x3b, 0x0a, 0x31, 0x54, 0x68, 0x65,
	0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a, 0x03, 0x34, 0x31, 0x32, 0x12, 0x18, 0x0a,
	0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24,
	0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x4e, 0x0a, 0x03, 0x35, 0x30, 0x33, 0x12, 0x47, 0x0a, 0x3d, 0x54,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x6e, 0x6f, 0x77, 0x20, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x29, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x1a, 0x1d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x72, 0x74, 0x7d, 0x12, 0xd8, 0x03, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x2f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xeb, 0x02, 0x92, 0x41, 0xc2, 0x02,
	0x0a, 0x12, 0x67, 0x65, 0x74, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x47, 0x65, 0x74, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x2f, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6e,
	0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x20, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0x19, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34,
	0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x3c, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x35,
	0x0a, 0x2b, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x32, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x6f, 0x72, 0x74, 0x7d, 0x12, 0xd8, 0x04, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x33, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xe2, 0x03,
	0x92, 0x41, 0xa4, 0x03, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x1a, 0x11, 0x41, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4a, 0x91, 0x01, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x89, 0x01, 0x0a, 0x7f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x2c, 0x20, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x20, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x59,
	0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x52, 0x0a, 0x48, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x55,
	0x55, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x40, 0x0a, 0x03, 0x34, 0x30, 0x39,
	0x12, 0x39, 0x0a, 0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35,
	0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01,
	0x2a, 0x22, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0xdf, 0x04, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x22, 0x81, 0x04, 0x92, 0x41, 0xe2, 0x03, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61,
	0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x1a, 0x64, 0x41, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65,
	0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x6e, 0x65, 0x20,
	0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4a, 0xb1,
	0x01, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0xa9, 0x01, 0x0a, 0x9e, 0x01, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x0a, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x38, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x31, 0x0a, 0x27, 0x4f, 0x6e, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x77, 0x61, 0x73, 0x6e, 0x27, 0x74, 0x20, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x3e, 0x0a, 0x03,
	0x34, 0x30, 0x39, 0x12, 0x37, 0x0a, 0x2d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a,
	0x01, 0x2a, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x8f, 0x05, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa3, 0x04, 0x92, 0x41, 0xfd, 0x03, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61,
	0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x1a, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x70, 0x72, 0x65, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x62, 0x79, 0x20, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4a, 0xfa, 0x01, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0xf2, 0x01, 0x0a, 0xe7, 0x01, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x28, 0x73, 0x29, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x0a, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x64, 0x20, 0x0a, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x20, 0x0a, 0x74, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x69, 0x73, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x75, 0x6c, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x4f, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x48, 0x0a,
	0x3e, 0x54, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x20, 0x77, 0x61, 0x73, 0x6e, 0x27, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24,
	0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x1a, 0x17, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x12, 0x95, 0x05, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x33, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x04, 0x92, 0x41, 0xcc,
	0x03, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x1a, 0x70, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x3a, 0x0a, 0x72, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0xab, 0x01, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0xa3,
	0x01, 0x0a, 0x98, 0x01, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x3a,
	0x20, 0x0a, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2c,
	0x20, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20,
	0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x73, 0x2c, 0x20, 0x0a, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x4a, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x43, 0x0a, 0x39, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x20, 0x55, 0x55, 0x49, 0x44, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x1a, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x12, 0xd7,
	0x02, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xff, 0x01, 0x92, 0x41, 0xdc, 0x01, 0x0a, 0x0a, 0x67,
	0x65, 0x74, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0b, 0x47, 0x65, 0x74, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x1a, 0x2d, 0x41, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x20, 0x62,
	0x79, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x72,
	0x20, 0x55, 0x55, 0x49, 0x44, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x41, 0x0a, 0x03, 0x34, 0x30, 0x34,
	0x12, 0x3a, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x55, 0x55, 0x49,
	0x44, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12,
	0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x12, 0x8a, 0x03, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x02, 0x92, 0x41, 0x82, 0x02, 0x0a, 0x0d, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x1a, 0x4d, 0x41, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x6f, 0x72, 0x20, 0x55, 0x55, 0x49, 0x44, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x41, 0x0a,
	0x03, 0x34, 0x30, 0x34, 0x12, 0x3a, 0x0a, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x20, 0x55, 0x55, 0x49, 0x44, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0xe5, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x33,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe1, 0x02, 0x92, 0x41, 0xa6, 0x02,
	0x0a, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2e, 0x1a, 0x56, 0x41, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x6f, 0x72, 0x20, 0x55, 0x55, 0x49, 0x44, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x4a, 0x0a,
	0x03, 0x34, 0x30, 0x34, 0x12, 0x43, 0x0a, 0x39, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x55, 0x55, 0x49, 0x44, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30,
	0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0xb1, 0x03,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x30, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xc1, 0x02,
	0x92, 0x41, 0xff, 0x01, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x47, 0x65, 0x74, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x1a,
	0x35, 0x47, 0x65, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x62, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x55, 0x55, 0x49,
	0x44, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a,
	0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x4a, 0x0a, 0x03, 0x34, 0x30,
	0x34, 0x12, 0x43, 0x0a, 0x39, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x55, 0x55, 0x49, 0x44, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a,
	0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44,
	0x7d, 0x12, 0xce, 0x03, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x2e, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xca, 0x02, 0x92, 0x41, 0x88, 0x02, 0x0a, 0x16, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x1a, 0x38, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x62, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x55, 0x55,
	0x49, 0x44, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b,
	0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x4a, 0x0a, 0x03, 0x34,
	0x30, 0x34, 0x12, 0x43, 0x0a, 0x39, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x55, 0x55, 0x49, 0x44, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24,
	0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x2a, 0x36, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49,
	0x44, 0x7d, 0x12, 0xed, 0x02, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x2b, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81,
	0x02, 0x92, 0x41, 0xde, 0x01, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x1a, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x62, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x20, 0x55, 0x55, 0x49, 0x44, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b,
	0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x39, 0x0a, 0x03, 0x34,
	0x30, 0x34, 0x12, 0x32, 0x0a, 0x28, 0x54, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x20, 0x77, 0x61, 0x73, 0x6e, 0x27, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a,
	0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x32, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49,
	0x44, 0x7d, 0x12, 0xd8, 0x05, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2d, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xf4, 0x04, 0x92, 0x41, 0xbd, 0x04, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x1a, 0x20, 0x41, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4a, 0x91, 0x01, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x89, 0x01, 0x0a, 0x7f, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x6e,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x6d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20,
	0x69, 0x73, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x69, 0x6c, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a,
	0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a,
	0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x57, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x50, 0x0a, 0x46, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x67, 0x69, 0x76,
	0x65, 0x6e, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x40, 0x0a, 0x03, 0x34,
	0x30, 0x39, 0x12, 0x39, 0x0a, 0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a,
	0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f,
	0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x3e, 0x0a, 0x03, 0x35, 0x30,
	0x31, 0x12, 0x37, 0x0a, 0x2d, 0x55, 0x6e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x20, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x28, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x29, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0xb4, 0x03,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2a, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xd6, 0x02, 0x92, 0x41,
	0x9b, 0x02, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x0d, 0x47, 0x65, 0x74, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x1a,
	0x1a, 0x47, 0x65, 0x74, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x62, 0x79,
	0x20, 0x55, 0x55, 0x49, 0x44, 0x2f, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4a, 0x22, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a,
	0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x33, 0x0a, 0x03, 0x34,
	0x30, 0x34, 0x12, 0x2c, 0x0a, 0x22, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x55, 0x55, 0x49, 0x44, 0x2f, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2f, 0x7b, 0x55,
	0x55, 0x49, 0x44, 0x7d, 0x12, 0x94, 0x03, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69,
	0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa5, 0x02, 0x92, 0x41, 0xf1, 0x01, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2e, 0x1a, 0x22, 0x4c, 0x69, 0x73, 0x74,
	0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x55, 0x55, 0x49, 0x44, 0x2f, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4a, 0x22,
	0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33,
	0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b,
	0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2a, 0x12, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0xa7, 0x07, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2d,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75,
	0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x06,
	0x92, 0x41, 0xfa, 0x05, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x1a, 0x98, 0x02, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x73, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x2e, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x47, 0x45, 0x54, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x20, 0x41, 0x73, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x75, 0x6e, 0x73,
	0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20,
	0x69, 0x73, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x20, 0x57, 0x68, 0x65,
	0x6e, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x47, 0x45, 0x54, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x4e, 0x6f, 0x74, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4a, 0x65, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x5e, 0x0a, 0x54, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x55, 0x55,
	0x49, 0x44, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x29,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x3a, 0x0a, 0x03, 0x34, 0x30, 0x34,
	0x12, 0x33, 0x0a, 0x29, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20,
	0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x46, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x3f, 0x0a, 0x35,
	0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x1f, 0x0a,
	0x03, 0x34, 0x31, 0x32, 0x12, 0x18, 0x0a, 0x0e, 0x45, 0x74, 0x61, 0x67, 0x20, 0x6d, 0x69, 0x73,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b,
	0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x80, 0x01, 0x0a, 0x03,
	0x35, 0x30, 0x33, 0x12, 0x79, 0x0a, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x20,
	0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x28, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x29, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x31, 0x2a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2f, 0x7b,
	0x55, 0x55, 0x49, 0x44, 0x7d, 0x12, 0xbb, 0x03, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2d, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xce, 0x02, 0x92, 0x41, 0xa7, 0x02, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x17, 0x47, 0x65, 0x74, 0x20, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x1a, 0x51, 0x47, 0x65, 0x74, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c,
	0x61, 0x67, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x2f, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x69, 0x76, 0x65,
	0x6e, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e,
	0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23,
	0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0xbe, 0x03, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x30, 0x2e, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc6, 0x02, 0x92, 0x41,
	0x95, 0x02, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67,
	0x12, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x20, 0x66, 0x6c, 0x61, 0x67, 0x1a, 0x43, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x6f, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35,
	0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65,
	0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30,
	0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a,
	0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0xc3, 0x03, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x31, 0x2e, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9,
	0x02, 0x92, 0x41, 0x97, 0x02, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66,
	0x6c, 0x61, 0x67, 0x12, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x1a, 0x44, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x4a,
	0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30,
	0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xfb, 0x02, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x2f, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x83, 0x02, 0x92, 0x41, 0xe3, 0x01, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x4a,
	0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30,
	0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0xba, 0x03, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x34, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0xbe, 0x02, 0x92, 0x41, 0x96, 0x02, 0x0a, 0x12, 0x67, 0x65, 0x74,
	0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x38, 0x47, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x1a, 0x38, 0x47, 0x65, 0x74, 0x20, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x2e, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x3b, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x34,
	0x0a, 0x2a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x20, 0x77, 0x61, 0x73, 0x6e, 0x27,
	0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa8, 0x03, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x37, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x02, 0x92, 0x41, 0xe1, 0x01, 0x0a, 0x15, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x1a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4a,
	0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x4a, 0x3b, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x34, 0x0a, 0x2a, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x20, 0x77, 0x61, 0x73, 0x6e, 0x27, 0x74, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x1a, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x12, 0x8f, 0x03, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x02,
	0x92, 0x41, 0xe1, 0x01, 0x0a, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x61, 0x6c, 0x6c, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x1a, 0x1f, 0x4c, 0x69, 0x73, 0x74,
	0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x4a, 0x22, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a,
	0x37, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x30, 0x0a, 0x26, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x20, 0x77, 0x61, 0x73, 0x6e, 0x27, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12,
	0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xbf, 0x04, 0x0a, 0x0e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2d, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcd, 0x03, 0x92, 0x41, 0x88, 0x03, 0x0a, 0x0f, 0x72, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x29, 0x52, 0x6f,
	0x6c, 0x6c, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0x29, 0x52, 0x6f, 0x6c, 0x6c, 0x20, 0x62, 0x61,
	0x63, 0x6b, 0x20, 0x61, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61,
	0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x4a, 0x22, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x11, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x12, 0x06,
	0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a,
	0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a,
	0x03, 0x34, 0x30, 0x33, 0x12, 0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x4a, 0x33, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2c, 0x0a, 0x22, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x20,
	0x55, 0x55, 0x49, 0x44, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12,
	0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24,
	0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x4a, 0x3d, 0x0a, 0x03, 0x35, 0x30, 0x33, 0x12, 0x36, 0x0a, 0x2c, 0x43,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x6c, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x20, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x69,
	0x73, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a,
	0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x1a, 0x36, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x82, 0x04, 0x0a, 0x09, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x4c, 0x45, 0x12, 0x28, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x75, 0x72, 0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x4c, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x62, 0x69, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x4c, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x03, 0x92, 0x41, 0xf6, 0x02, 0x0a, 0x15,
	0x6e, 0x6f, 0x64, 0x65, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6e, 0x6f,
	0x64, 0x65, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x1c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65,
	0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x2e, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e,
	0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x23, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12,
	0x1c, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65,
	0x6e, 0x69, 0x65, 0x64, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x42, 0x0a,
	0x03, 0x34, 0x30, 0x39, 0x12, 0x3b, 0x0a, 0x31, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x20,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x72,
	0x20, 0x53, 0x53, 0x44, 0x73, 0x20, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x20, 0x4e, 0x4c, 0x45, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x4a, 0x2b, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x4f, 0x53, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x4a, 0x54,
	0x0a, 0x03, 0x35, 0x30, 0x33, 0x12, 0x4d, 0x0a, 0x43, 0x4e, 0x4c, 0x45, 0x20, 0x63, 0x61, 0x6e,
	0x27, 0x74, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x74, 0x72, 0x79, 0x20,
	0x61, 0x67, 0x61, 0x69, 0x6e, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x2e, 0x12, 0x06, 0x0a, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x1a, 0x1a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6e,
	0x6c, 0x65, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x64, 0x75, 0x72,
	0x6f, 0x73, 0x2f, 0x76, 0x32, 0x3b, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lightbits_api_duros_v2_durosapiv2_proto_rawDescOnce sync.Once
	file_lightbits_api_duros_v2_durosapiv2_proto_rawDescData = file_lightbits_api_duros_v2_durosapiv2_proto_rawDesc
)

func file_lightbits_api_duros_v2_durosapiv2_proto_rawDescGZIP() []byte {
	file_lightbits_api_duros_v2_durosapiv2_proto_rawDescOnce.Do(func() {
		file_lightbits_api_duros_v2_durosapiv2_proto_rawDescData = protoimpl.X.CompressGZIP(file_lightbits_api_duros_v2_durosapiv2_proto_rawDescData)
	})
	return file_lightbits_api_duros_v2_durosapiv2_proto_rawDescData
}

var file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes = make([]protoimpl.EnumInfo, 25)
var file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes = make([]protoimpl.MessageInfo, 142)
var file_lightbits_api_duros_v2_durosapiv2_proto_goTypes = []interface{}{
	(CredsType)(0),                               // 0: lightbits.api.duros.v2.CredsType
	(ProtectionStateEnum)(0),                     // 1: lightbits.api.duros.v2.ProtectionStateEnum
	(NLEState)(0),                                // 2: lightbits.api.duros.v2.NLEState
	(PolicyVisibility)(0),                        // 3: lightbits.api.duros.v2.PolicyVisibility
	(PolicyType)(0),                              // 4: lightbits.api.duros.v2.PolicyType
	(CreateVolumeRequest_SectorSizeEnum)(0),      // 5: lightbits.api.duros.v2.CreateVolumeRequest.SectorSizeEnum
	(UserNvmeDevicesResponse_StateEnum)(0),       // 6: lightbits.api.duros.v2.UserNvmeDevicesResponse.StateEnum
	(UserNvmeDevicesResponse_SEDState)(0),        // 7: lightbits.api.duros.v2.UserNvmeDevicesResponse.SEDState
	(UserNvmeDevicesResponse_SEDStatus)(0),       // 8: lightbits.api.duros.v2.UserNvmeDevicesResponse.SEDStatus
	(DurosNodeInfo_State)(0),                     // 9: lightbits.api.duros.v2.DurosNodeInfo.State
	(DurosNodeInfo_StatusEnum)(0),                // 10: lightbits.api.duros.v2.DurosNodeInfo.StatusEnum
	(ClusterHealth_State)(0),                     // 11: lightbits.api.duros.v2.ClusterHealth.State
	(Volume_StateEnum)(0),                        // 12: lightbits.api.duros.v2.Volume.StateEnum
	(Volume_ProtocolEnum)(0),                     // 13: lightbits.api.duros.v2.Volume.ProtocolEnum
	(Server_UpgradeStatusEnum)(0),                // 14: lightbits.api.duros.v2.Server.UpgradeStatusEnum
	(Server_RiskOfServiceLossEnum)(0),            // 15: lightbits.api.duros.v2.Server.RiskOfServiceLossEnum
	(Server_ServerStateEnum)(0),                  // 16: lightbits.api.duros.v2.Server.ServerStateEnum
	(Snapshot_StateEnum)(0),                      // 17: lightbits.api.duros.v2.Snapshot.StateEnum
	(ResourcePolicy_State)(0),                    // 18: lightbits.api.duros.v2.ResourcePolicy.State
	(Policy_State)(0),                            // 19: lightbits.api.duros.v2.Policy.State
	(LabelValueKeyPair_Key)(0),                   // 20: lightbits.api.duros.v2.LabelValueKeyPair.Key
	(LabelMatchExpression_Operator)(0),           // 21: lightbits.api.duros.v2.LabelMatchExpression.Operator
	(Event_EventType)(0),                         // 22: lightbits.api.duros.v2.Event.EventType
	(Event_EventReportingService)(0),             // 23: lightbits.api.duros.v2.Event.EventReportingService
	(Event_EventSeverity)(0),                     // 24: lightbits.api.duros.v2.Event.EventSeverity
	(*LogRequest)(nil),                           // 25: lightbits.api.duros.v2.LogRequest
	(*AdminEndpoint)(nil),                        // 26: lightbits.api.duros.v2.AdminEndpoint
	(*GetAdminEndpointRequest)(nil),              // 27: lightbits.api.duros.v2.GetAdminEndpointRequest
	(*ListAdminEndpointsResponse)(nil),           // 28: lightbits.api.duros.v2.ListAdminEndpointsResponse
	(*ListAdminEndpointsRequest)(nil),            // 29: lightbits.api.duros.v2.ListAdminEndpointsRequest
	(*CreateAdminEndpointRequest)(nil),           // 30: lightbits.api.duros.v2.CreateAdminEndpointRequest
	(*UpdateAdminEndpointRequest)(nil),           // 31: lightbits.api.duros.v2.UpdateAdminEndpointRequest
	(*DeleteAdminEndpointRequest)(nil),           // 32: lightbits.api.duros.v2.DeleteAdminEndpointRequest
	(*DeleteAdminEndpointResponse)(nil),          // 33: lightbits.api.duros.v2.DeleteAdminEndpointResponse
	(*CreateCredentialRequest)(nil),              // 34: lightbits.api.duros.v2.CreateCredentialRequest
	(*Credential)(nil),                           // 35: lightbits.api.duros.v2.Credential
	(*DeleteCredentialRequest)(nil),              // 36: lightbits.api.duros.v2.DeleteCredentialRequest
	(*DeleteCredentialResponse)(nil),             // 37: lightbits.api.duros.v2.DeleteCredentialResponse
	(*ListCredentialsRequest)(nil),               // 38: lightbits.api.duros.v2.ListCredentialsRequest
	(*ListCredentialsResponse)(nil),              // 39: lightbits.api.duros.v2.ListCredentialsResponse
	(*GetCredentialRequest)(nil),                 // 40: lightbits.api.duros.v2.GetCredentialRequest
	(*DefaultPolicy)(nil),                        // 41: lightbits.api.duros.v2.DefaultPolicy
	(*CreateProjectRequest)(nil),                 // 42: lightbits.api.duros.v2.CreateProjectRequest
	(*Project)(nil),                              // 43: lightbits.api.duros.v2.Project
	(*DeleteProjectRequest)(nil),                 // 44: lightbits.api.duros.v2.DeleteProjectRequest
	(*DeleteProjectResponse)(nil),                // 45: lightbits.api.duros.v2.DeleteProjectResponse
	(*ListProjectsRequest)(nil),                  // 46: lightbits.api.duros.v2.ListProjectsRequest
	(*ListProjectsResponse)(nil),                 // 47: lightbits.api.duros.v2.ListProjectsResponse
	(*GetProjectRequest)(nil),                    // 48: lightbits.api.duros.v2.GetProjectRequest
	(*StringList)(nil),                           // 49: lightbits.api.duros.v2.StringList
	(*GetVersionRequest)(nil),                    // 50: lightbits.api.duros.v2.GetVersionRequest
	(*CreateVolumeRequest)(nil),                  // 51: lightbits.api.duros.v2.CreateVolumeRequest
	(*DeleteVolumeRequest)(nil),                  // 52: lightbits.api.duros.v2.DeleteVolumeRequest
	(*DeleteVolumeResponse)(nil),                 // 53: lightbits.api.duros.v2.DeleteVolumeResponse
	(*EnableServerRequest)(nil),                  // 54: lightbits.api.duros.v2.EnableServerRequest
	(*DisableServerRequest)(nil),                 // 55: lightbits.api.duros.v2.DisableServerRequest
	(*DeleteServerRequest)(nil),                  // 56: lightbits.api.duros.v2.DeleteServerRequest
	(*ReplaceNodeRequest)(nil),                   // 57: lightbits.api.duros.v2.ReplaceNodeRequest
	(*CreateServerRequest)(nil),                  // 58: lightbits.api.duros.v2.CreateServerRequest
	(*UpdateVolumeRequest)(nil),                  // 59: lightbits.api.duros.v2.UpdateVolumeRequest
	(*ProxyInfo)(nil),                            // 60: lightbits.api.duros.v2.ProxyInfo
	(*UpgradeServerRequest)(nil),                 // 61: lightbits.api.duros.v2.UpgradeServerRequest
	(*UpgradeClusterRequest)(nil),                // 62: lightbits.api.duros.v2.UpgradeClusterRequest
	(*GetClusterRequest)(nil),                    // 63: lightbits.api.duros.v2.GetClusterRequest
	(*UpdateNvmeDeviceRequest)(nil),              // 64: lightbits.api.duros.v2.UpdateNvmeDeviceRequest
	(*AddNvmeDeviceRequest)(nil),                 // 65: lightbits.api.duros.v2.AddNvmeDeviceRequest
	(*GetHostRequest)(nil),                       // 66: lightbits.api.duros.v2.GetHostRequest
	(*ListHostsRequest)(nil),                     // 67: lightbits.api.duros.v2.ListHostsRequest
	(*ListHostsResponse)(nil),                    // 68: lightbits.api.duros.v2.ListHostsResponse
	(*ListNodeRequest)(nil),                      // 69: lightbits.api.duros.v2.ListNodeRequest
	(*ListEventsRequest)(nil),                    // 70: lightbits.api.duros.v2.ListEventsRequest
	(*ListEventsResponse)(nil),                   // 71: lightbits.api.duros.v2.ListEventsResponse
	(*GetVolumeRequest)(nil),                     // 72: lightbits.api.duros.v2.GetVolumeRequest
	(*GetNodeRequest)(nil),                       // 73: lightbits.api.duros.v2.GetNodeRequest
	(*ListVolumeRequest)(nil),                    // 74: lightbits.api.duros.v2.ListVolumeRequest
	(*ListNvmeDevicesRequest)(nil),               // 75: lightbits.api.duros.v2.ListNvmeDevicesRequest
	(*GetNvmeDeviceRequest)(nil),                 // 76: lightbits.api.duros.v2.GetNvmeDeviceRequest
	(*ListNvmeDevicesResponse)(nil),              // 77: lightbits.api.duros.v2.ListNvmeDevicesResponse
	(*ConnectedHost)(nil),                        // 78: lightbits.api.duros.v2.ConnectedHost
	(*UserNvmeDevicesResponse)(nil),              // 79: lightbits.api.duros.v2.UserNvmeDevicesResponse
	(*DurosNodeInfo)(nil),                        // 80: lightbits.api.duros.v2.DurosNodeInfo
	(*ListNodesResponse)(nil),                    // 81: lightbits.api.duros.v2.ListNodesResponse
	(*ListVolumesResponse)(nil),                  // 82: lightbits.api.duros.v2.ListVolumesResponse
	(*UpdateNvmeDeviceResponse)(nil),             // 83: lightbits.api.duros.v2.UpdateNvmeDeviceResponse
	(*AddNvmeDeviceResponse)(nil),                // 84: lightbits.api.duros.v2.AddNvmeDeviceResponse
	(*UpdateVolumeResponse)(nil),                 // 85: lightbits.api.duros.v2.UpdateVolumeResponse
	(*UpgradeServerResponse)(nil),                // 86: lightbits.api.duros.v2.UpgradeServerResponse
	(*UpgradeClusterResponse)(nil),               // 87: lightbits.api.duros.v2.UpgradeClusterResponse
	(*ReplaceNodeResponse)(nil),                  // 88: lightbits.api.duros.v2.ReplaceNodeResponse
	(*DeleteServerResponse)(nil),                 // 89: lightbits.api.duros.v2.DeleteServerResponse
	(*DisableServerResponse)(nil),                // 90: lightbits.api.duros.v2.DisableServerResponse
	(*ListServersRequest)(nil),                   // 91: lightbits.api.duros.v2.ListServersRequest
	(*GetServerRequest)(nil),                     // 92: lightbits.api.duros.v2.GetServerRequest
	(*ListServersResponse)(nil),                  // 93: lightbits.api.duros.v2.ListServersResponse
	(*Version)(nil),                              // 94: lightbits.api.duros.v2.Version
	(*ClusterInfo)(nil),                          // 95: lightbits.api.duros.v2.ClusterInfo
	(*ClusterInfoV2)(nil),                        // 96: lightbits.api.duros.v2.ClusterInfoV2
	(*ClusterHealth)(nil),                        // 97: lightbits.api.duros.v2.ClusterHealth
	(*Volume)(nil),                               // 98: lightbits.api.duros.v2.Volume
	(*Server)(nil),                               // 99: lightbits.api.duros.v2.Server
	(*GetRoleRequest)(nil),                       // 100: lightbits.api.duros.v2.GetRoleRequest
	(*GetRoleResponse)(nil),                      // 101: lightbits.api.duros.v2.GetRoleResponse
	(*Role)(nil),                                 // 102: lightbits.api.duros.v2.Role
	(*ListRolesRequest)(nil),                     // 103: lightbits.api.duros.v2.ListRolesRequest
	(*ListRolesResponse)(nil),                    // 104: lightbits.api.duros.v2.ListRolesResponse
	(*Snapshot)(nil),                             // 105: lightbits.api.duros.v2.Snapshot
	(*DeleteSnapshotRequest)(nil),                // 106: lightbits.api.duros.v2.DeleteSnapshotRequest
	(*CreateSnapshotRequest)(nil),                // 107: lightbits.api.duros.v2.CreateSnapshotRequest
	(*ListSnapshotsRequest)(nil),                 // 108: lightbits.api.duros.v2.ListSnapshotsRequest
	(*GetSnapshotRequest)(nil),                   // 109: lightbits.api.duros.v2.GetSnapshotRequest
	(*ListSnapshotsResponse)(nil),                // 110: lightbits.api.duros.v2.ListSnapshotsResponse
	(*DeleteSnapshotResponse)(nil),               // 111: lightbits.api.duros.v2.DeleteSnapshotResponse
	(*FeatureFlagStatus)(nil),                    // 112: lightbits.api.duros.v2.FeatureFlagStatus
	(*GetFeatureFlagRequest)(nil),                // 113: lightbits.api.duros.v2.GetFeatureFlagRequest
	(*EnableFeatureFlagRequest)(nil),             // 114: lightbits.api.duros.v2.EnableFeatureFlagRequest
	(*DisableFeatureFlagRequest)(nil),            // 115: lightbits.api.duros.v2.DisableFeatureFlagRequest
	(*SetFeatureFlagResponse)(nil),               // 116: lightbits.api.duros.v2.SetFeatureFlagResponse
	(*ListFeatureFlagsRequest)(nil),              // 117: lightbits.api.duros.v2.ListFeatureFlagsRequest
	(*ListFeatureFlagsResponse)(nil),             // 118: lightbits.api.duros.v2.ListFeatureFlagsResponse
	(*CreateResourcePolicyRequest)(nil),          // 119: lightbits.api.duros.v2.CreateResourcePolicyRequest
	(*CreatePolicyRequest)(nil),                  // 120: lightbits.api.duros.v2.CreatePolicyRequest
	(*UpdatePolicyRequest)(nil),                  // 121: lightbits.api.duros.v2.UpdatePolicyRequest
	(*UpdatePolicyResponse)(nil),                 // 122: lightbits.api.duros.v2.UpdatePolicyResponse
	(*ResourcePolicy)(nil),                       // 123: lightbits.api.duros.v2.ResourcePolicy
	(*Policy)(nil),                               // 124: lightbits.api.duros.v2.Policy
	(*UpdateResourcePolicyRequest)(nil),          // 125: lightbits.api.duros.v2.UpdateResourcePolicyRequest
	(*UpdateResourcePolicyResponse)(nil),         // 126: lightbits.api.duros.v2.UpdateResourcePolicyResponse
	(*ListPoliciesRequest)(nil),                  // 127: lightbits.api.duros.v2.ListPoliciesRequest
	(*ListPoliciesResponse)(nil),                 // 128: lightbits.api.duros.v2.ListPoliciesResponse
	(*ListResourcePoliciesRequest)(nil),          // 129: lightbits.api.duros.v2.ListResourcePoliciesRequest
	(*ListResourcePoliciesResponse)(nil),         // 130: lightbits.api.duros.v2.ListResourcePoliciesResponse
	(*GetPolicyRequest)(nil),                     // 131: lightbits.api.duros.v2.GetPolicyRequest
	(*GetResourcePolicyRequest)(nil),             // 132: lightbits.api.duros.v2.GetResourcePolicyRequest
	(*DeleteResourcePolicyRequest)(nil),          // 133: lightbits.api.duros.v2.DeleteResourcePolicyRequest
	(*DeleteResourcePolicyResponse)(nil),         // 134: lightbits.api.duros.v2.DeleteResourcePolicyResponse
	(*DeletePolicyRequest)(nil),                  // 135: lightbits.api.duros.v2.DeletePolicyRequest
	(*DeletePolicyResponse)(nil),                 // 136: lightbits.api.duros.v2.DeletePolicyResponse
	(*GetClusterConfigParamRequest)(nil),         // 137: lightbits.api.duros.v2.GetClusterConfigParamRequest
	(*ClusterConfigParam)(nil),                   // 138: lightbits.api.duros.v2.ClusterConfigParam
	(*UpdateClusterConfigParamRequest)(nil),      // 139: lightbits.api.duros.v2.UpdateClusterConfigParamRequest
	(*RollbackVolumeRequest)(nil),                // 140: lightbits.api.duros.v2.RollbackVolumeRequest
	(*RollbackVolumeResponse)(nil),               // 141: lightbits.api.duros.v2.RollbackVolumeResponse
	(*UpdateClusterConfigParamResponse)(nil),     // 142: lightbits.api.duros.v2.UpdateClusterConfigParamResponse
	(*ListClusterConfigParamsRequest)(nil),       // 143: lightbits.api.duros.v2.ListClusterConfigParamsRequest
	(*ListClusterConfigParamsResponse)(nil),      // 144: lightbits.api.duros.v2.ListClusterConfigParamsResponse
	(*LabelValueKeyPair)(nil),                    // 145: lightbits.api.duros.v2.LabelValueKeyPair
	(*LabelMatchExpression)(nil),                 // 146: lightbits.api.duros.v2.LabelMatchExpression
	(*ComponentVolumeInfo)(nil),                  // 147: lightbits.api.duros.v2.ComponentVolumeInfo
	(*VolumeComponentInfoList)(nil),              // 148: lightbits.api.duros.v2.VolumeComponentInfoList
	(*ComponentVolumesInfo)(nil),                 // 149: lightbits.api.duros.v2.ComponentVolumesInfo
	(*ComponentNodeInfo)(nil),                    // 150: lightbits.api.duros.v2.ComponentNodeInfo
	(*ComponentClusterInfo)(nil),                 // 151: lightbits.api.duros.v2.ComponentClusterInfo
	(*ComponentNVMeSSDInfo)(nil),                 // 152: lightbits.api.duros.v2.ComponentNVMeSSDInfo
	(*ComponentServerInfo)(nil),                  // 153: lightbits.api.duros.v2.ComponentServerInfo
	(*ComponentDataIntegrityInfo)(nil),           // 154: lightbits.api.duros.v2.ComponentDataIntegrityInfo
	(*Event)(nil),                                // 155: lightbits.api.duros.v2.Event
	(*QoSRateLimitPolicy)(nil),                   // 156: lightbits.api.duros.v2.QoSRateLimitPolicy
	(*DefaultGlobalResourcePolicy)(nil),          // 157: lightbits.api.duros.v2.DefaultGlobalResourcePolicy
	(*UpdateProjectRequest)(nil),                 // 158: lightbits.api.duros.v2.UpdateProjectRequest
	(*UpdateProjectResponse)(nil),                // 159: lightbits.api.duros.v2.UpdateProjectResponse
	(*EnableNLERequest)(nil),                     // 160: lightbits.api.duros.v2.EnableNLERequest
	(*EnableNLEResponse)(nil),                    // 161: lightbits.api.duros.v2.EnableNLEResponse
	nil,                                          // 162: lightbits.api.duros.v2.ListFeatureFlagsResponse.FeatureFlagsEntry
	nil,                                          // 163: lightbits.api.duros.v2.ComponentVolumesInfo.ProjectVolumesMapEntry
	(*QoSRateLimitPolicy_QoSLimitIOPS)(nil),      // 164: lightbits.api.duros.v2.QoSRateLimitPolicy.QoSLimitIOPS
	(*QoSRateLimitPolicy_QoSLimitBW)(nil),        // 165: lightbits.api.duros.v2.QoSRateLimitPolicy.QoSLimitBW
	(*QoSRateLimitPolicy_QoSLimitIOPSPerGB)(nil), // 166: lightbits.api.duros.v2.QoSRateLimitPolicy.QoSLimitIOPSPerGB
	(*timestamppb.Timestamp)(nil),                // 167: google.protobuf.Timestamp
	(*NvmeDeviceStatisticsApi)(nil),              // 168: lightbits.api.duros.v2.NvmeDeviceStatisticsApi
	(*NodeStatisticsApi)(nil),                    // 169: lightbits.api.duros.v2.NodeStatisticsApi
	(*ClusterStatisticsApi)(nil),                 // 170: lightbits.api.duros.v2.ClusterStatisticsApi
	(*VolumeStatisticsApi)(nil),                  // 171: lightbits.api.duros.v2.VolumeStatisticsApi
	(*durationpb.Duration)(nil),                  // 172: google.protobuf.Duration
	(*SnapshotStatisticsApi)(nil),                // 173: lightbits.api.duros.v2.SnapshotStatisticsApi
	(*SchedulePolicy)(nil),                       // 174: lightbits.api.duros.v2.SchedulePolicy
	(*httpbody.HttpBody)(nil),                    // 175: google.api.HttpBody
}
var file_lightbits_api_duros_v2_durosapiv2_proto_depIdxs = []int32{
	26,  // 0: lightbits.api.duros.v2.ListAdminEndpointsResponse.adminEndpoints:type_name -> lightbits.api.duros.v2.AdminEndpoint
	0,   // 1: lightbits.api.duros.v2.CreateCredentialRequest.type:type_name -> lightbits.api.duros.v2.CredsType
	0,   // 2: lightbits.api.duros.v2.Credential.type:type_name -> lightbits.api.duros.v2.CredsType
	35,  // 3: lightbits.api.duros.v2.ListCredentialsResponse.credentials:type_name -> lightbits.api.duros.v2.Credential
	4,   // 4: lightbits.api.duros.v2.DefaultPolicy.policyType:type_name -> lightbits.api.duros.v2.PolicyType
	41,  // 5: lightbits.api.duros.v2.CreateProjectRequest.defaultPolicies:type_name -> lightbits.api.duros.v2.DefaultPolicy
	41,  // 6: lightbits.api.duros.v2.Project.defaultPolicies:type_name -> lightbits.api.duros.v2.DefaultPolicy
	43,  // 7: lightbits.api.duros.v2.ListProjectsResponse.projects:type_name -> lightbits.api.duros.v2.Project
	49,  // 8: lightbits.api.duros.v2.CreateVolumeRequest.acl:type_name -> lightbits.api.duros.v2.StringList
	49,  // 9: lightbits.api.duros.v2.CreateVolumeRequest.IPAcl:type_name -> lightbits.api.duros.v2.StringList
	5,   // 10: lightbits.api.duros.v2.CreateVolumeRequest.sectorSize:type_name -> lightbits.api.duros.v2.CreateVolumeRequest.SectorSizeEnum
	146, // 11: lightbits.api.duros.v2.CreateVolumeRequest.placementRestrictions:type_name -> lightbits.api.duros.v2.LabelMatchExpression
	49,  // 12: lightbits.api.duros.v2.UpdateVolumeRequest.acl:type_name -> lightbits.api.duros.v2.StringList
	49,  // 13: lightbits.api.duros.v2.UpdateVolumeRequest.IPAcl:type_name -> lightbits.api.duros.v2.StringList
	60,  // 14: lightbits.api.duros.v2.UpgradeServerRequest.ProxyInfo:type_name -> lightbits.api.duros.v2.ProxyInfo
	60,  // 15: lightbits.api.duros.v2.UpgradeClusterRequest.ProxyInfo:type_name -> lightbits.api.duros.v2.ProxyInfo
	78,  // 16: lightbits.api.duros.v2.ListHostsResponse.connectedHosts:type_name -> lightbits.api.duros.v2.ConnectedHost
	155, // 17: lightbits.api.duros.v2.ListEventsResponse.events:type_name -> lightbits.api.duros.v2.Event
	79,  // 18: lightbits.api.duros.v2.ListNvmeDevicesResponse.NvmeDevices:type_name -> lightbits.api.duros.v2.UserNvmeDevicesResponse
	6,   // 19: lightbits.api.duros.v2.UserNvmeDevicesResponse.state:type_name -> lightbits.api.duros.v2.UserNvmeDevicesResponse.StateEnum
	167, // 20: lightbits.api.duros.v2.UserNvmeDevicesResponse.failureTime:type_name -> google.protobuf.Timestamp
	167, // 21: lightbits.api.duros.v2.UserNvmeDevicesResponse.rebuildCompletionTime:type_name -> google.protobuf.Timestamp
	7,   // 22: lightbits.api.duros.v2.UserNvmeDevicesResponse.sedState:type_name -> lightbits.api.duros.v2.UserNvmeDevicesResponse.SEDState
	8,   // 23: lightbits.api.duros.v2.UserNvmeDevicesResponse.sedStatus:type_name -> lightbits.api.duros.v2.UserNvmeDevicesResponse.SEDStatus
	168, // 24: lightbits.api.duros.v2.UserNvmeDevicesResponse.statistics:type_name -> lightbits.api.duros.v2.NvmeDeviceStatisticsApi
	9,   // 25: lightbits.api.duros.v2.DurosNodeInfo.state:type_name -> lightbits.api.duros.v2.DurosNodeInfo.State
	10,  // 26: lightbits.api.duros.v2.DurosNodeInfo.status:type_name -> lightbits.api.duros.v2.DurosNodeInfo.StatusEnum
	169, // 27: lightbits.api.duros.v2.DurosNodeInfo.statistics:type_name -> lightbits.api.duros.v2.NodeStatisticsApi
	80,  // 28: lightbits.api.duros.v2.ListNodesResponse.nodes:type_name -> lightbits.api.duros.v2.DurosNodeInfo
	98,  // 29: lightbits.api.duros.v2.ListVolumesResponse.volumes:type_name -> lightbits.api.duros.v2.Volume
	15,  // 30: lightbits.api.duros.v2.ListServersRequest.RiskOfServiceLoss:type_name -> lightbits.api.duros.v2.Server.RiskOfServiceLossEnum
	99,  // 31: lightbits.api.duros.v2.ListServersResponse.servers:type_name -> lightbits.api.duros.v2.Server
	170, // 32: lightbits.api.duros.v2.ClusterInfo.statistics:type_name -> lightbits.api.duros.v2.ClusterStatisticsApi
	97,  // 33: lightbits.api.duros.v2.ClusterInfo.health:type_name -> lightbits.api.duros.v2.ClusterHealth
	2,   // 34: lightbits.api.duros.v2.ClusterInfo.nleState:type_name -> lightbits.api.duros.v2.NLEState
	11,  // 35: lightbits.api.duros.v2.ClusterHealth.state:type_name -> lightbits.api.duros.v2.ClusterHealth.State
	12,  // 36: lightbits.api.duros.v2.Volume.state:type_name -> lightbits.api.duros.v2.Volume.StateEnum
	1,   // 37: lightbits.api.duros.v2.Volume.protectionState:type_name -> lightbits.api.duros.v2.ProtectionStateEnum
	49,  // 38: lightbits.api.duros.v2.Volume.acl:type_name -> lightbits.api.duros.v2.StringList
	171, // 39: lightbits.api.duros.v2.Volume.statistics:type_name -> lightbits.api.duros.v2.VolumeStatisticsApi
	49,  // 40: lightbits.api.duros.v2.Volume.IPAcl:type_name -> lightbits.api.duros.v2.StringList
	146, // 41: lightbits.api.duros.v2.Volume.placementRestrictions:type_name -> lightbits.api.duros.v2.LabelMatchExpression
	15,  // 42: lightbits.api.duros.v2.Server.RiskOfServiceLossState:type_name -> lightbits.api.duros.v2.Server.RiskOfServiceLossEnum
	16,  // 43: lightbits.api.duros.v2.Server.state:type_name -> lightbits.api.duros.v2.Server.ServerStateEnum
	14,  // 44: lightbits.api.duros.v2.Server.UpgradeStatus:type_name -> lightbits.api.duros.v2.Server.UpgradeStatusEnum
	2,   // 45: lightbits.api.duros.v2.Server.nleState:type_name -> lightbits.api.duros.v2.NLEState
	102, // 46: lightbits.api.duros.v2.GetRoleResponse.role:type_name -> lightbits.api.duros.v2.Role
	102, // 47: lightbits.api.duros.v2.ListRolesResponse.roles:type_name -> lightbits.api.duros.v2.Role
	17,  // 48: lightbits.api.duros.v2.Snapshot.state:type_name -> lightbits.api.duros.v2.Snapshot.StateEnum
	167, // 49: lightbits.api.duros.v2.Snapshot.creationTime:type_name -> google.protobuf.Timestamp
	172, // 50: lightbits.api.duros.v2.Snapshot.retentionTime:type_name -> google.protobuf.Duration
	49,  // 51: lightbits.api.duros.v2.Snapshot.acl:type_name -> lightbits.api.duros.v2.StringList
	49,  // 52: lightbits.api.duros.v2.Snapshot.IPAcl:type_name -> lightbits.api.duros.v2.StringList
	173, // 53: lightbits.api.duros.v2.Snapshot.statistics:type_name -> lightbits.api.duros.v2.SnapshotStatisticsApi
	172, // 54: lightbits.api.duros.v2.CreateSnapshotRequest.retentionTime:type_name -> google.protobuf.Duration
	105, // 55: lightbits.api.duros.v2.ListSnapshotsResponse.snapshots:type_name -> lightbits.api.duros.v2.Snapshot
	162, // 56: lightbits.api.duros.v2.ListFeatureFlagsResponse.featureFlags:type_name -> lightbits.api.duros.v2.ListFeatureFlagsResponse.FeatureFlagsEntry
	174, // 57: lightbits.api.duros.v2.CreateResourcePolicyRequest.schedulePolicy:type_name -> lightbits.api.duros.v2.SchedulePolicy
	156, // 58: lightbits.api.duros.v2.CreatePolicyRequest.qoSRateLimitPolicy:type_name -> lightbits.api.duros.v2.QoSRateLimitPolicy
	156, // 59: lightbits.api.duros.v2.UpdatePolicyRequest.qoSRateLimitPolicy:type_name -> lightbits.api.duros.v2.QoSRateLimitPolicy
	174, // 60: lightbits.api.duros.v2.ResourcePolicy.schedulePolicy:type_name -> lightbits.api.duros.v2.SchedulePolicy
	18,  // 61: lightbits.api.duros.v2.ResourcePolicy.state:type_name -> lightbits.api.duros.v2.ResourcePolicy.State
	19,  // 62: lightbits.api.duros.v2.Policy.state:type_name -> lightbits.api.duros.v2.Policy.State
	156, // 63: lightbits.api.duros.v2.Policy.QoSRateLimitPolicy:type_name -> lightbits.api.duros.v2.QoSRateLimitPolicy
	174, // 64: lightbits.api.duros.v2.UpdateResourcePolicyRequest.schedulePolicy:type_name -> lightbits.api.duros.v2.SchedulePolicy
	124, // 65: lightbits.api.duros.v2.ListPoliciesResponse.policies:type_name -> lightbits.api.duros.v2.Policy
	123, // 66: lightbits.api.duros.v2.ListResourcePoliciesResponse.resourcePolicies:type_name -> lightbits.api.duros.v2.ResourcePolicy
	157, // 67: lightbits.api.duros.v2.ListResourcePoliciesResponse.defaultResourcePolicies:type_name -> lightbits.api.duros.v2.DefaultGlobalResourcePolicy
	138, // 68: lightbits.api.duros.v2.UpdateClusterConfigParamRequest.configParam:type_name -> lightbits.api.duros.v2.ClusterConfigParam
	138, // 69: lightbits.api.duros.v2.ListClusterConfigParamsResponse.values:type_name -> lightbits.api.duros.v2.ClusterConfigParam
	20,  // 70: lightbits.api.duros.v2.LabelValueKeyPair.key:type_name -> lightbits.api.duros.v2.LabelValueKeyPair.Key
	21,  // 71: lightbits.api.duros.v2.LabelMatchExpression.operator:type_name -> lightbits.api.duros.v2.LabelMatchExpression.Operator
	145, // 72: lightbits.api.duros.v2.LabelMatchExpression.labelValueKeyPairs:type_name -> lightbits.api.duros.v2.LabelValueKeyPair
	147, // 73: lightbits.api.duros.v2.VolumeComponentInfoList.VolumeComponentInfoList:type_name -> lightbits.api.duros.v2.ComponentVolumeInfo
	163, // 74: lightbits.api.duros.v2.ComponentVolumesInfo.ProjectVolumesMap:type_name -> lightbits.api.duros.v2.ComponentVolumesInfo.ProjectVolumesMapEntry
	167, // 75: lightbits.api.duros.v2.Event.Time:type_name -> google.protobuf.Timestamp
	22,  // 76: lightbits.api.duros.v2.Event.Type:type_name -> lightbits.api.duros.v2.Event.EventType
	24,  // 77: lightbits.api.duros.v2.Event.Severity:type_name -> lightbits.api.duros.v2.Event.EventSeverity
	23,  // 78: lightbits.api.duros.v2.Event.ReportingService:type_name -> lightbits.api.duros.v2.Event.EventReportingService
	149, // 79: lightbits.api.duros.v2.Event.ComponentVolumesInfo:type_name -> lightbits.api.duros.v2.ComponentVolumesInfo
	152, // 80: lightbits.api.duros.v2.Event.ComponentNVMeSSDInfo:type_name -> lightbits.api.duros.v2.ComponentNVMeSSDInfo
	150, // 81: lightbits.api.duros.v2.Event.ComponentNodeInfo:type_name -> lightbits.api.duros.v2.ComponentNodeInfo
	153, // 82: lightbits.api.duros.v2.Event.ComponentServerInfo:type_name -> lightbits.api.duros.v2.ComponentServerInfo
	151, // 83: lightbits.api.duros.v2.Event.ComponentClusterInfo:type_name -> lightbits.api.duros.v2.ComponentClusterInfo
	154, // 84: lightbits.api.duros.v2.Event.ComponentDataIntegrityInfo:type_name -> lightbits.api.duros.v2.ComponentDataIntegrityInfo
	3,   // 85: lightbits.api.duros.v2.QoSRateLimitPolicy.policyVisibility:type_name -> lightbits.api.duros.v2.PolicyVisibility
	164, // 86: lightbits.api.duros.v2.QoSRateLimitPolicy.limitIOPS:type_name -> lightbits.api.duros.v2.QoSRateLimitPolicy.QoSLimitIOPS
	165, // 87: lightbits.api.duros.v2.QoSRateLimitPolicy.limitBw:type_name -> lightbits.api.duros.v2.QoSRateLimitPolicy.QoSLimitBW
	166, // 88: lightbits.api.duros.v2.QoSRateLimitPolicy.limitIOPSPerGB:type_name -> lightbits.api.duros.v2.QoSRateLimitPolicy.QoSLimitIOPSPerGB
	4,   // 89: lightbits.api.duros.v2.DefaultGlobalResourcePolicy.policyType:type_name -> lightbits.api.duros.v2.PolicyType
	41,  // 90: lightbits.api.duros.v2.UpdateProjectRequest.defaultPolicies:type_name -> lightbits.api.duros.v2.DefaultPolicy
	112, // 91: lightbits.api.duros.v2.ListFeatureFlagsResponse.FeatureFlagsEntry.value:type_name -> lightbits.api.duros.v2.FeatureFlagStatus
	148, // 92: lightbits.api.duros.v2.ComponentVolumesInfo.ProjectVolumesMapEntry.value:type_name -> lightbits.api.duros.v2.VolumeComponentInfoList
	50,  // 93: lightbits.api.duros.v2.DurosAPI.GetVersion:input_type -> lightbits.api.duros.v2.GetVersionRequest
	51,  // 94: lightbits.api.duros.v2.DurosAPI.CreateVolume:input_type -> lightbits.api.duros.v2.CreateVolumeRequest
	52,  // 95: lightbits.api.duros.v2.DurosAPI.DeleteVolume:input_type -> lightbits.api.duros.v2.DeleteVolumeRequest
	74,  // 96: lightbits.api.duros.v2.DurosAPI.ListVolumes:input_type -> lightbits.api.duros.v2.ListVolumeRequest
	70,  // 97: lightbits.api.duros.v2.DurosAPI.ListEvents:input_type -> lightbits.api.duros.v2.ListEventsRequest
	66,  // 98: lightbits.api.duros.v2.DurosAPI.GetHost:input_type -> lightbits.api.duros.v2.GetHostRequest
	67,  // 99: lightbits.api.duros.v2.DurosAPI.ListHosts:input_type -> lightbits.api.duros.v2.ListHostsRequest
	72,  // 100: lightbits.api.duros.v2.DurosAPI.GetVolume:input_type -> lightbits.api.duros.v2.GetVolumeRequest
	69,  // 101: lightbits.api.duros.v2.DurosAPI.ListNodes:input_type -> lightbits.api.duros.v2.ListNodeRequest
	73,  // 102: lightbits.api.duros.v2.DurosAPI.GetNode:input_type -> lightbits.api.duros.v2.GetNodeRequest
	75,  // 103: lightbits.api.duros.v2.DurosAPI.ListNvmeDevices:input_type -> lightbits.api.duros.v2.ListNvmeDevicesRequest
	76,  // 104: lightbits.api.duros.v2.DurosAPI.GetNvmeDevice:input_type -> lightbits.api.duros.v2.GetNvmeDeviceRequest
	25,  // 105: lightbits.api.duros.v2.DurosAPI.FetchLogs:input_type -> lightbits.api.duros.v2.LogRequest
	63,  // 106: lightbits.api.duros.v2.DurosAPI.GetCluster:input_type -> lightbits.api.duros.v2.GetClusterRequest
	63,  // 107: lightbits.api.duros.v2.DurosAPI.GetClusterInfo:input_type -> lightbits.api.duros.v2.GetClusterRequest
	64,  // 108: lightbits.api.duros.v2.DurosAPI.UpdateNvmeDevice:input_type -> lightbits.api.duros.v2.UpdateNvmeDeviceRequest
	65,  // 109: lightbits.api.duros.v2.DurosAPI.AddNvmeDevice:input_type -> lightbits.api.duros.v2.AddNvmeDeviceRequest
	59,  // 110: lightbits.api.duros.v2.DurosAPI.UpdateVolume:input_type -> lightbits.api.duros.v2.UpdateVolumeRequest
	92,  // 111: lightbits.api.duros.v2.DurosAPI.GetServer:input_type -> lightbits.api.duros.v2.GetServerRequest
	91,  // 112: lightbits.api.duros.v2.DurosAPI.ListServers:input_type -> lightbits.api.duros.v2.ListServersRequest
	61,  // 113: lightbits.api.duros.v2.DurosAPI.UpgradeServer:input_type -> lightbits.api.duros.v2.UpgradeServerRequest
	62,  // 114: lightbits.api.duros.v2.DurosAPI.UpgradeCluster:input_type -> lightbits.api.duros.v2.UpgradeClusterRequest
	58,  // 115: lightbits.api.duros.v2.DurosAPI.CreateServer:input_type -> lightbits.api.duros.v2.CreateServerRequest
	57,  // 116: lightbits.api.duros.v2.DurosAPI.ReplaceNode:input_type -> lightbits.api.duros.v2.ReplaceNodeRequest
	56,  // 117: lightbits.api.duros.v2.DurosAPI.DeleteServer:input_type -> lightbits.api.duros.v2.DeleteServerRequest
	54,  // 118: lightbits.api.duros.v2.DurosAPI.EnableServer:input_type -> lightbits.api.duros.v2.EnableServerRequest
	55,  // 119: lightbits.api.duros.v2.DurosAPI.DisableServer:input_type -> lightbits.api.duros.v2.DisableServerRequest
	42,  // 120: lightbits.api.duros.v2.DurosAPI.CreateProject:input_type -> lightbits.api.duros.v2.CreateProjectRequest
	158, // 121: lightbits.api.duros.v2.DurosAPI.UpdateProject:input_type -> lightbits.api.duros.v2.UpdateProjectRequest
	44,  // 122: lightbits.api.duros.v2.DurosAPI.DeleteProject:input_type -> lightbits.api.duros.v2.DeleteProjectRequest
	46,  // 123: lightbits.api.duros.v2.DurosAPI.ListProjects:input_type -> lightbits.api.duros.v2.ListProjectsRequest
	48,  // 124: lightbits.api.duros.v2.DurosAPI.GetProject:input_type -> lightbits.api.duros.v2.GetProjectRequest
	34,  // 125: lightbits.api.duros.v2.DurosAPI.CreateCredential:input_type -> lightbits.api.duros.v2.CreateCredentialRequest
	36,  // 126: lightbits.api.duros.v2.DurosAPI.DeleteCredential:input_type -> lightbits.api.duros.v2.DeleteCredentialRequest
	38,  // 127: lightbits.api.duros.v2.DurosAPI.ListCredentials:input_type -> lightbits.api.duros.v2.ListCredentialsRequest
	40,  // 128: lightbits.api.duros.v2.DurosAPI.GetCredential:input_type -> lightbits.api.duros.v2.GetCredentialRequest
	100, // 129: lightbits.api.duros.v2.DurosAPI.GetRole:input_type -> lightbits.api.duros.v2.GetRoleRequest
	103, // 130: lightbits.api.duros.v2.DurosAPI.ListRoles:input_type -> lightbits.api.duros.v2.ListRolesRequest
	30,  // 131: lightbits.api.duros.v2.DurosAPI.CreateAdminEndpoint:input_type -> lightbits.api.duros.v2.CreateAdminEndpointRequest
	32,  // 132: lightbits.api.duros.v2.DurosAPI.DeleteAdminEndpoint:input_type -> lightbits.api.duros.v2.DeleteAdminEndpointRequest
	29,  // 133: lightbits.api.duros.v2.DurosAPI.ListAdminEndpoints:input_type -> lightbits.api.duros.v2.ListAdminEndpointsRequest
	31,  // 134: lightbits.api.duros.v2.DurosAPI.UpdateAdminEndpoint:input_type -> lightbits.api.duros.v2.UpdateAdminEndpointRequest
	27,  // 135: lightbits.api.duros.v2.DurosAPI.GetAdminEndpoint:input_type -> lightbits.api.duros.v2.GetAdminEndpointRequest
	119, // 136: lightbits.api.duros.v2.DurosAPI.CreateResourcePolicy:input_type -> lightbits.api.duros.v2.CreateResourcePolicyRequest
	120, // 137: lightbits.api.duros.v2.DurosAPI.CreatePolicy:input_type -> lightbits.api.duros.v2.CreatePolicyRequest
	121, // 138: lightbits.api.duros.v2.DurosAPI.UpdatePolicy:input_type -> lightbits.api.duros.v2.UpdatePolicyRequest
	125, // 139: lightbits.api.duros.v2.DurosAPI.UpdateResourcePolicy:input_type -> lightbits.api.duros.v2.UpdateResourcePolicyRequest
	131, // 140: lightbits.api.duros.v2.DurosAPI.GetPolicy:input_type -> lightbits.api.duros.v2.GetPolicyRequest
	127, // 141: lightbits.api.duros.v2.DurosAPI.ListPolicies:input_type -> lightbits.api.duros.v2.ListPoliciesRequest
	129, // 142: lightbits.api.duros.v2.DurosAPI.ListResourcePolicies:input_type -> lightbits.api.duros.v2.ListResourcePoliciesRequest
	132, // 143: lightbits.api.duros.v2.DurosAPI.GetResourcePolicy:input_type -> lightbits.api.duros.v2.GetResourcePolicyRequest
	133, // 144: lightbits.api.duros.v2.DurosAPI.DeleteResourcePolicy:input_type -> lightbits.api.duros.v2.DeleteResourcePolicyRequest
	135, // 145: lightbits.api.duros.v2.DurosAPI.DeletePolicy:input_type -> lightbits.api.duros.v2.DeletePolicyRequest
	107, // 146: lightbits.api.duros.v2.DurosAPI.CreateSnapshot:input_type -> lightbits.api.duros.v2.CreateSnapshotRequest
	109, // 147: lightbits.api.duros.v2.DurosAPI.GetSnapshot:input_type -> lightbits.api.duros.v2.GetSnapshotRequest
	108, // 148: lightbits.api.duros.v2.DurosAPI.ListSnapshots:input_type -> lightbits.api.duros.v2.ListSnapshotsRequest
	106, // 149: lightbits.api.duros.v2.DurosAPI.DeleteSnapshot:input_type -> lightbits.api.duros.v2.DeleteSnapshotRequest
	113, // 150: lightbits.api.duros.v2.DurosAPI.GetFeatureFlag:input_type -> lightbits.api.duros.v2.GetFeatureFlagRequest
	114, // 151: lightbits.api.duros.v2.DurosAPI.EnableFeatureFlag:input_type -> lightbits.api.duros.v2.EnableFeatureFlagRequest
	115, // 152: lightbits.api.duros.v2.DurosAPI.DisableFeatureFlag:input_type -> lightbits.api.duros.v2.DisableFeatureFlagRequest
	117, // 153: lightbits.api.duros.v2.DurosAPI.ListFeatureFlags:input_type -> lightbits.api.duros.v2.ListFeatureFlagsRequest
	137, // 154: lightbits.api.duros.v2.DurosAPI.GetClusterConfigParam:input_type -> lightbits.api.duros.v2.GetClusterConfigParamRequest
	139, // 155: lightbits.api.duros.v2.DurosAPI.UpdateClusterConfigParam:input_type -> lightbits.api.duros.v2.UpdateClusterConfigParamRequest
	143, // 156: lightbits.api.duros.v2.DurosAPI.ListClusterConfigParams:input_type -> lightbits.api.duros.v2.ListClusterConfigParamsRequest
	140, // 157: lightbits.api.duros.v2.DurosAPI.RollbackVolume:input_type -> lightbits.api.duros.v2.RollbackVolumeRequest
	160, // 158: lightbits.api.duros.v2.DurosAPI.EnableNLE:input_type -> lightbits.api.duros.v2.EnableNLERequest
	94,  // 159: lightbits.api.duros.v2.DurosAPI.GetVersion:output_type -> lightbits.api.duros.v2.Version
	98,  // 160: lightbits.api.duros.v2.DurosAPI.CreateVolume:output_type -> lightbits.api.duros.v2.Volume
	53,  // 161: lightbits.api.duros.v2.DurosAPI.DeleteVolume:output_type -> lightbits.api.duros.v2.DeleteVolumeResponse
	82,  // 162: lightbits.api.duros.v2.DurosAPI.ListVolumes:output_type -> lightbits.api.duros.v2.ListVolumesResponse
	71,  // 163: lightbits.api.duros.v2.DurosAPI.ListEvents:output_type -> lightbits.api.duros.v2.ListEventsResponse
	78,  // 164: lightbits.api.duros.v2.DurosAPI.GetHost:output_type -> lightbits.api.duros.v2.ConnectedHost
	68,  // 165: lightbits.api.duros.v2.DurosAPI.ListHosts:output_type -> lightbits.api.duros.v2.ListHostsResponse
	98,  // 166: lightbits.api.duros.v2.DurosAPI.GetVolume:output_type -> lightbits.api.duros.v2.Volume
	81,  // 167: lightbits.api.duros.v2.DurosAPI.ListNodes:output_type -> lightbits.api.duros.v2.ListNodesResponse
	80,  // 168: lightbits.api.duros.v2.DurosAPI.GetNode:output_type -> lightbits.api.duros.v2.DurosNodeInfo
	77,  // 169: lightbits.api.duros.v2.DurosAPI.ListNvmeDevices:output_type -> lightbits.api.duros.v2.ListNvmeDevicesResponse
	79,  // 170: lightbits.api.duros.v2.DurosAPI.GetNvmeDevice:output_type -> lightbits.api.duros.v2.UserNvmeDevicesResponse
	175, // 171: lightbits.api.duros.v2.DurosAPI.FetchLogs:output_type -> google.api.HttpBody
	95,  // 172: lightbits.api.duros.v2.DurosAPI.GetCluster:output_type -> lightbits.api.duros.v2.ClusterInfo
	96,  // 173: lightbits.api.duros.v2.DurosAPI.GetClusterInfo:output_type -> lightbits.api.duros.v2.ClusterInfoV2
	83,  // 174: lightbits.api.duros.v2.DurosAPI.UpdateNvmeDevice:output_type -> lightbits.api.duros.v2.UpdateNvmeDeviceResponse
	84,  // 175: lightbits.api.duros.v2.DurosAPI.AddNvmeDevice:output_type -> lightbits.api.duros.v2.AddNvmeDeviceResponse
	85,  // 176: lightbits.api.duros.v2.DurosAPI.UpdateVolume:output_type -> lightbits.api.duros.v2.UpdateVolumeResponse
	99,  // 177: lightbits.api.duros.v2.DurosAPI.GetServer:output_type -> lightbits.api.duros.v2.Server
	93,  // 178: lightbits.api.duros.v2.DurosAPI.ListServers:output_type -> lightbits.api.duros.v2.ListServersResponse
	86,  // 179: lightbits.api.duros.v2.DurosAPI.UpgradeServer:output_type -> lightbits.api.duros.v2.UpgradeServerResponse
	87,  // 180: lightbits.api.duros.v2.DurosAPI.UpgradeCluster:output_type -> lightbits.api.duros.v2.UpgradeClusterResponse
	99,  // 181: lightbits.api.duros.v2.DurosAPI.CreateServer:output_type -> lightbits.api.duros.v2.Server
	88,  // 182: lightbits.api.duros.v2.DurosAPI.ReplaceNode:output_type -> lightbits.api.duros.v2.ReplaceNodeResponse
	89,  // 183: lightbits.api.duros.v2.DurosAPI.DeleteServer:output_type -> lightbits.api.duros.v2.DeleteServerResponse
	99,  // 184: lightbits.api.duros.v2.DurosAPI.EnableServer:output_type -> lightbits.api.duros.v2.Server
	90,  // 185: lightbits.api.duros.v2.DurosAPI.DisableServer:output_type -> lightbits.api.duros.v2.DisableServerResponse
	43,  // 186: lightbits.api.duros.v2.DurosAPI.CreateProject:output_type -> lightbits.api.duros.v2.Project
	159, // 187: lightbits.api.duros.v2.DurosAPI.UpdateProject:output_type -> lightbits.api.duros.v2.UpdateProjectResponse
	45,  // 188: lightbits.api.duros.v2.DurosAPI.DeleteProject:output_type -> lightbits.api.duros.v2.DeleteProjectResponse
	47,  // 189: lightbits.api.duros.v2.DurosAPI.ListProjects:output_type -> lightbits.api.duros.v2.ListProjectsResponse
	43,  // 190: lightbits.api.duros.v2.DurosAPI.GetProject:output_type -> lightbits.api.duros.v2.Project
	35,  // 191: lightbits.api.duros.v2.DurosAPI.CreateCredential:output_type -> lightbits.api.duros.v2.Credential
	37,  // 192: lightbits.api.duros.v2.DurosAPI.DeleteCredential:output_type -> lightbits.api.duros.v2.DeleteCredentialResponse
	39,  // 193: lightbits.api.duros.v2.DurosAPI.ListCredentials:output_type -> lightbits.api.duros.v2.ListCredentialsResponse
	35,  // 194: lightbits.api.duros.v2.DurosAPI.GetCredential:output_type -> lightbits.api.duros.v2.Credential
	101, // 195: lightbits.api.duros.v2.DurosAPI.GetRole:output_type -> lightbits.api.duros.v2.GetRoleResponse
	104, // 196: lightbits.api.duros.v2.DurosAPI.ListRoles:output_type -> lightbits.api.duros.v2.ListRolesResponse
	26,  // 197: lightbits.api.duros.v2.DurosAPI.CreateAdminEndpoint:output_type -> lightbits.api.duros.v2.AdminEndpoint
	33,  // 198: lightbits.api.duros.v2.DurosAPI.DeleteAdminEndpoint:output_type -> lightbits.api.duros.v2.DeleteAdminEndpointResponse
	28,  // 199: lightbits.api.duros.v2.DurosAPI.ListAdminEndpoints:output_type -> lightbits.api.duros.v2.ListAdminEndpointsResponse
	26,  // 200: lightbits.api.duros.v2.DurosAPI.UpdateAdminEndpoint:output_type -> lightbits.api.duros.v2.AdminEndpoint
	26,  // 201: lightbits.api.duros.v2.DurosAPI.GetAdminEndpoint:output_type -> lightbits.api.duros.v2.AdminEndpoint
	123, // 202: lightbits.api.duros.v2.DurosAPI.CreateResourcePolicy:output_type -> lightbits.api.duros.v2.ResourcePolicy
	124, // 203: lightbits.api.duros.v2.DurosAPI.CreatePolicy:output_type -> lightbits.api.duros.v2.Policy
	122, // 204: lightbits.api.duros.v2.DurosAPI.UpdatePolicy:output_type -> lightbits.api.duros.v2.UpdatePolicyResponse
	126, // 205: lightbits.api.duros.v2.DurosAPI.UpdateResourcePolicy:output_type -> lightbits.api.duros.v2.UpdateResourcePolicyResponse
	124, // 206: lightbits.api.duros.v2.DurosAPI.GetPolicy:output_type -> lightbits.api.duros.v2.Policy
	128, // 207: lightbits.api.duros.v2.DurosAPI.ListPolicies:output_type -> lightbits.api.duros.v2.ListPoliciesResponse
	130, // 208: lightbits.api.duros.v2.DurosAPI.ListResourcePolicies:output_type -> lightbits.api.duros.v2.ListResourcePoliciesResponse
	123, // 209: lightbits.api.duros.v2.DurosAPI.GetResourcePolicy:output_type -> lightbits.api.duros.v2.ResourcePolicy
	134, // 210: lightbits.api.duros.v2.DurosAPI.DeleteResourcePolicy:output_type -> lightbits.api.duros.v2.DeleteResourcePolicyResponse
	136, // 211: lightbits.api.duros.v2.DurosAPI.DeletePolicy:output_type -> lightbits.api.duros.v2.DeletePolicyResponse
	105, // 212: lightbits.api.duros.v2.DurosAPI.CreateSnapshot:output_type -> lightbits.api.duros.v2.Snapshot
	105, // 213: lightbits.api.duros.v2.DurosAPI.GetSnapshot:output_type -> lightbits.api.duros.v2.Snapshot
	110, // 214: lightbits.api.duros.v2.DurosAPI.ListSnapshots:output_type -> lightbits.api.duros.v2.ListSnapshotsResponse
	111, // 215: lightbits.api.duros.v2.DurosAPI.DeleteSnapshot:output_type -> lightbits.api.duros.v2.DeleteSnapshotResponse
	112, // 216: lightbits.api.duros.v2.DurosAPI.GetFeatureFlag:output_type -> lightbits.api.duros.v2.FeatureFlagStatus
	116, // 217: lightbits.api.duros.v2.DurosAPI.EnableFeatureFlag:output_type -> lightbits.api.duros.v2.SetFeatureFlagResponse
	116, // 218: lightbits.api.duros.v2.DurosAPI.DisableFeatureFlag:output_type -> lightbits.api.duros.v2.SetFeatureFlagResponse
	118, // 219: lightbits.api.duros.v2.DurosAPI.ListFeatureFlags:output_type -> lightbits.api.duros.v2.ListFeatureFlagsResponse
	138, // 220: lightbits.api.duros.v2.DurosAPI.GetClusterConfigParam:output_type -> lightbits.api.duros.v2.ClusterConfigParam
	142, // 221: lightbits.api.duros.v2.DurosAPI.UpdateClusterConfigParam:output_type -> lightbits.api.duros.v2.UpdateClusterConfigParamResponse
	144, // 222: lightbits.api.duros.v2.DurosAPI.ListClusterConfigParams:output_type -> lightbits.api.duros.v2.ListClusterConfigParamsResponse
	141, // 223: lightbits.api.duros.v2.DurosAPI.RollbackVolume:output_type -> lightbits.api.duros.v2.RollbackVolumeResponse
	161, // 224: lightbits.api.duros.v2.DurosAPI.EnableNLE:output_type -> lightbits.api.duros.v2.EnableNLEResponse
	159, // [159:225] is the sub-list for method output_type
	93,  // [93:159] is the sub-list for method input_type
	93,  // [93:93] is the sub-list for extension type_name
	93,  // [93:93] is the sub-list for extension extendee
	0,   // [0:93] is the sub-list for field type_name
}

func init() { file_lightbits_api_duros_v2_durosapiv2_proto_init() }
func file_lightbits_api_duros_v2_durosapiv2_proto_init() {
	if File_lightbits_api_duros_v2_durosapiv2_proto != nil {
		return
	}
	file_lightbits_api_duros_v2_schedule_policy_proto_init()
	file_lightbits_api_duros_v2_statisticsapiv2_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdminEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAdminEndpointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAdminEndpointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAdminEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAdminEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdminEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdminEndpointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNvmeDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNvmeDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHostsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmeDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNvmeDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNvmeDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectedHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNvmeDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DurosNodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVolumesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNvmeDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNvmeDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfoV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRolesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRolesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureFlagStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeatureFlagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableFeatureFlagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableFeatureFlagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFeatureFlagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeatureFlagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeatureFlagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResourcePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResourcePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResourcePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourcePoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourcePoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourcePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourcePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourcePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterConfigParamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfigParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterConfigParamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterConfigParamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterConfigParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterConfigParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelValueKeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelMatchExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentVolumeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeComponentInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentVolumesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentNodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentNVMeSSDInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentDataIntegrityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSRateLimitPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultGlobalResourcePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableNLERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableNLEResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSRateLimitPolicy_QoSLimitIOPS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSRateLimitPolicy_QoSLimitBW); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSRateLimitPolicy_QoSLimitIOPSPerGB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*CreateVolumeRequest_QosPolicyUUID)(nil),
		(*CreateVolumeRequest_QosPolicyName)(nil),
	}
	file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*UpdateVolumeRequest_QosPolicyUUID)(nil),
		(*UpdateVolumeRequest_QosPolicyName)(nil),
	}
	file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[95].OneofWrappers = []interface{}{
		(*CreatePolicyRequest_QoSRateLimitPolicy)(nil),
	}
	file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[96].OneofWrappers = []interface{}{
		(*UpdatePolicyRequest_QoSRateLimitPolicy)(nil),
	}
	file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[99].OneofWrappers = []interface{}{
		(*Policy_QoSRateLimitPolicy)(nil),
	}
	file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[130].OneofWrappers = []interface{}{
		(*Event_ComponentVolumesInfo)(nil),
		(*Event_ComponentNVMeSSDInfo)(nil),
		(*Event_ComponentNodeInfo)(nil),
		(*Event_ComponentServerInfo)(nil),
		(*Event_ComponentClusterInfo)(nil),
		(*Event_ComponentDataIntegrityInfo)(nil),
	}
	file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes[131].OneofWrappers = []interface{}{
		(*QoSRateLimitPolicy_LimitIOPS)(nil),
		(*QoSRateLimitPolicy_LimitBw)(nil),
		(*QoSRateLimitPolicy_LimitIOPSPerGB)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lightbits_api_duros_v2_durosapiv2_proto_rawDesc,
			NumEnums:      25,
			NumMessages:   142,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lightbits_api_duros_v2_durosapiv2_proto_goTypes,
		DependencyIndexes: file_lightbits_api_duros_v2_durosapiv2_proto_depIdxs,
		EnumInfos:         file_lightbits_api_duros_v2_durosapiv2_proto_enumTypes,
		MessageInfos:      file_lightbits_api_duros_v2_durosapiv2_proto_msgTypes,
	}.Build()
	File_lightbits_api_duros_v2_durosapiv2_proto = out.File
	file_lightbits_api_duros_v2_durosapiv2_proto_rawDesc = nil
	file_lightbits_api_duros_v2_durosapiv2_proto_goTypes = nil
	file_lightbits_api_duros_v2_durosapiv2_proto_depIdxs = nil
}
