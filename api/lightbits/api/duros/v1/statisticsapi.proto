syntax = "proto3";

package lightbits.api.duros.v1;

option go_package = "duros/v1;v1";


///////////////////////////////////////
//   API structures (external facing)
///////////////////////////////////////
message ClusterStatisticsApi {
    // Installed Physical Storage
    //
    // All installed SSDs capacities over all servers in cluster, given in bytes.
    uint64 installedPhysicalStorage = 1;
    // Total Attached Physical Storage
    //
    // Sum of all managed and healthy SSDs capacities, given in bytes.
    uint64 managedPhysicalStorage = 2;
    // Effective Physical Storage
    //
    // Effective Physical storage excluding overhead of OVP and Parity, given in bytes.
    uint64 effectivePhysicalStorage = 3;
    // Logical Storage
    //
    // Sum of capacities of all allocated volumes, given in bytes.
    uint64 logicalStorage = 4;
    // Logical Used Storage
    //
    // Logical storage space used by all volumes (n of LBAs x 4096), given in bytes.
    uint64 logicalUsedStorage = 5;
    // Physical Used Storage Excluding Parity
    //
    // Physical storage space occupied by all volumes (data only), given in bytes.
    uint64 physicalUsedStorage = 6;
    // Physical Used Storage
    //
    // Physical storage space occupied by all data including Parity overhead when EC enabled (physical n*disks/(n*disks -1)), given in bytes.
    uint64 physicalUsedStorageIncludingParity = 7;
    // Free Physical Storage
    //
    // Free storage before entering to read-only mode , given in bytes.
    uint64 freePhysicalStorage = 8;
    // Estimated Free Logical Storage
    //
    // Estimated free storage before entering to read-only mode assuming current compression ratio, given in bytes.
    uint64 estimatedFreeLogicalStorage = 9;
    // Estimated Total Available Logical Storage
    //
    // Estimate of total available logical storage based on current compression ratio (effective * compression)
    uint64 estimatedLogicalStorage = 10;
    // commpression ratio
    //
    // compression ratio logicalUsedStorage/physicalUsedStorage
    double compressionRatio = 11;
}

message NodeStatisticsApi {
    // Total Attached Physical Total Storage
    //
    // Sum of all managed and healthy SSDs capacities, given in bytes.
    uint64 managedPhysicalStorage = 1;
    // Effective Physical Storage
    //
    // Effective Physical storage excluding overhead of OVP and Parity, given in bytes.
    uint64 effectivePhysicalStorage = 2;
    // Logical Storage
    //
    // Sum of capacities of all allocated volumes, given in bytes.
    uint64 logicalStorage = 3;
    // Logical Used Storage
    //
    // Logical storage space used by all volumes (n of LBAs x 4096), given in bytes.
    uint64 logicalUsedStorage = 4;
    // Physical Used Storage Excluding Parity
    //
    // Physical storage space occupied by all volumes (data only), given in bytes.
    uint64 physicalUsedStorage = 5;
    // Physical Used Storage
    //
    // Physical storage space occupied by all data including Parity overhead when EC enabled (physical n*disks/(n*disks -1)), given in bytes.
    uint64 physicalUsedStorageIncludingParity = 6;
    // Free Physical Storage
    //
    // Free storage before entering to read-only mode, given in bytes.
    uint64 freePhysicalStorage = 7;
    // Estimated Free Logical Storage
    //
    // Estimated free storage before entering to read-only mode assuming current compression ratio, given in bytes.
    uint64 estimatedFreeLogicalStorage = 8;
    // Estimated Total Available Logical Storage
    //
    // Estimate of total available logical storage based on current compression ratio (effective * compression)
    uint64 estimatedLogicalStorage = 9;
    // commpression ratio
    //
    // compression ratio logicalUsedStorage/physicalUsedStorage
    double compressionRatio = 10;
}


message VolumeStatisticsApi {
    // Logical Used Storage
    //
    // Logical storage space used by volume, given in bytes.
    uint64 logicalUsedStorage = 1;
    // Physical Used Storage
    //
    // Physical storage space used by volume excluding parity, given in bytes.
    uint64 physicalUsedStorage = 2;
    // commpression ratio
    //
    // compression ratio logicalUsedStorage/physicalUsedStorage
    double compressionRatio = 3;
}